function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var digitUiReactComponents = require('@egovernments/digit-ui-react-components');
var React = require('react');
var React__default = _interopDefault(React);
var reactI18next = require('react-i18next');
var reactRouterDom = require('react-router-dom');
var reactHookForm = require('react-hook-form');
var reactQuery = require('react-query');
var TimePicker = _interopDefault(require('react-time-picker'));
var recharts = require('recharts');

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var EngagementCard = function EngagementCard() {
  var _Digit$SessionStorage, _Digit$SessionStorage2;
  var userRoles = (_Digit$SessionStorage = Digit.SessionStorage.get('User')) === null || _Digit$SessionStorage === void 0 ? void 0 : (_Digit$SessionStorage2 = _Digit$SessionStorage.info) === null || _Digit$SessionStorage2 === void 0 ? void 0 : _Digit$SessionStorage2.roles;
  var isEmployee = userRoles.find(function (role) {
    return role.code === 'EMPLOYEE';
  });
  React.useEffect(function () {
    Digit.SessionStorage.set("CITIZENSURVEY.INBOX", null);
  }, []);
  if (!isEmployee) return null;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _Digit$Hooks$engageme = Digit.Hooks.engagement.useDocSearch({
      tenantIds: tenantId
    }, {
      select: function select(data) {
        return data === null || data === void 0 ? void 0 : data.totalCount;
      }
    }),
    documentsCount = _Digit$Hooks$engageme.data,
    isLoadingDocs = _Digit$Hooks$engageme.isLoading;
  var _Digit$Hooks$events$u = Digit.Hooks.events.useInbox(tenantId, {}, {
      status: "ACTIVE,INACTIVE",
      eventTypes: "BROADCAST"
    }, {
      select: function select(data) {
        return data === null || data === void 0 ? void 0 : data.totalCount;
      }
    }),
    MessagesCount = _Digit$Hooks$events$u.data,
    isLoadingMessages = _Digit$Hooks$events$u.isLoading;
  var _Digit$Hooks$events$u2 = Digit.Hooks.events.useInbox(tenantId, {}, {
      eventTypes: "EVENTSONGROUND"
    }, {
      select: function select(data) {
        return data === null || data === void 0 ? void 0 : data.totalCount;
      }
    }),
    totalEvents = _Digit$Hooks$events$u2.data,
    isLoadingEvents = _Digit$Hooks$events$u2.isLoading;
  var _Digit$Hooks$survey$u = Digit.Hooks.survey.useSearch({
      tenantIds: tenantId
    }, {
      select: function select(data) {
        return data === null || data === void 0 ? void 0 : data.TotalCount;
      }
    }),
    surveysCount = _Digit$Hooks$survey$u.data,
    isLoadingSurveys = _Digit$Hooks$survey$u.isLoading;
  var totalDocsCount = React.useMemo(function () {
    return isLoadingDocs ? "-" : documentsCount;
  }, [isLoadingDocs, documentsCount]);
  var totalEventsCount = React.useMemo(function () {
    return isLoadingEvents ? "-" : totalEvents;
  }, [isLoadingEvents, totalEvents]);
  var totalMessagesCount = React.useMemo(function () {
    return isLoadingMessages ? "-" : MessagesCount;
  }, [isLoadingMessages, MessagesCount]);
  var totalSurveysCount = React.useMemo(function () {
    return isLoadingSurveys ? "-" : surveysCount;
  }, [isLoadingSurveys, surveysCount]);
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var result = null;
  var propsForSurveyModuleCard = {
    Icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.SurveyIconSolid, null),
    moduleName: t("CS_COMMON_SURVEYS"),
    kpis: [{
      count: totalSurveysCount,
      label: t("TOTAL_SURVEYS"),
      link: "/digit-ui/employee/engagement/surveys/inbox"
    }],
    links: [{
      count: totalSurveysCount,
      label: t("ES_TITLE_INBOX"),
      link: "/digit-ui/employee/engagement/surveys/inbox"
    }, {
      label: t("CS_COMMON_NEW_SURVEY"),
      link: "/digit-ui/employee/engagement/surveys/create"
    }]
  };
  var propsForPMBModuleCard = {
    Icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.PMBIconSolid, null),
    moduleName: t("ACTION_TEST_PUBLIC_MESSAGE_BROADCAST"),
    kpis: [{
      count: totalMessagesCount,
      label: t("TOTAL_MESSAGES"),
      link: "/digit-ui/employee/engagement/messages/inbox"
    }],
    links: [{
      count: totalMessagesCount,
      label: t("ES_TITLE_INBOX"),
      link: "/digit-ui/employee/engagement/messages/inbox"
    }, {
      label: t("NEW_PUBLIC_MESSAGE_BUTTON_LABEL"),
      link: "/digit-ui/employee/engagement/messages/create"
    }]
  };
  var propsForEventsModuleCard = {
    Icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.EventsIconSolid, null),
    moduleName: t("TOTAL_EVENTS"),
    kpis: [{
      count: totalEventsCount,
      label: t("TOTAL_EVENTS"),
      link: "/digit-ui/employee/engagement/event/inbox"
    }],
    links: [{
      count: totalEventsCount,
      label: t("ES_TITLE_INBOX"),
      link: "/digit-ui/employee/engagement/event/inbox"
    }, {
      label: t("ES_TITLE_NEW_EVENTS"),
      link: "/digit-ui/employee/engagement/event/new-event"
    }]
  };
  var propsForDocumentModuleCard = {
    Icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.DocumentIconSolid, null),
    moduleName: t("ES_TITLE_DOCS"),
    kpis: [{
      count: totalDocsCount,
      label: t("TOTAL_DOCUMENTS"),
      link: "/digit-ui/employee/engagement/documents/inbox"
    }],
    links: [{
      count: totalDocsCount,
      label: t("ES_TITLE_INBOX"),
      link: "/digit-ui/employee/engagement/documents/inbox"
    }, {
      label: t("NEW_DOCUMENT_TEXT"),
      link: "/digit-ui/employee/engagement/documents/new-doc"
    }]
  };
  var engagementSubModulesProps = [propsForDocumentModuleCard, propsForEventsModuleCard, propsForPMBModuleCard, propsForSurveyModuleCard];
  if (isEmployee) result = /*#__PURE__*/React__default.createElement(React.Fragment, null, engagementSubModulesProps.map(function (propsForModuleCard, index) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.EmployeeModuleCard, _extends({
      key: index
    }, propsForModuleCard));
  }));
  return result;
};

var _iteratorSymbol = /*#__PURE__*/typeof Symbol !== "undefined" ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator";
var _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== "undefined" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator")) : "@@asyncIterator";

function _catch(body, recover) {
  try {
    var result = body();
  } catch (e) {
    return recover(e);
  }
  if (result && result.then) {
    return result.then(void 0, recover);
  }
  return result;
}

function _finallyRethrows(body, finalizer) {
  try {
    var result = body();
  } catch (e) {
    return finalizer(true, e);
  }
  if (result && result.then) {
    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));
  }
  return finalizer(false, result);
}

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);

  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");

      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

function isToday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, Date.now());
}

var alphabeticalSortFunctionForTenantsBasedOnName = function alphabeticalSortFunctionForTenantsBasedOnName(firstEl, secondEl) {
  if (firstEl.name.toUpperCase() < secondEl.name.toUpperCase()) {
    return -1;
  }
  if (firstEl.name.toUpperCase() > secondEl.name.toUpperCase()) {
    return 1;
  }
  return 0;
};
var areEqual = function areEqual(stringA, stringB) {
  var _stringA$trim, _stringB$trim;
  if (!stringA || !stringB) return false;
  if ((stringA === null || stringA === void 0 ? void 0 : (_stringA$trim = stringA.trim()) === null || _stringA$trim === void 0 ? void 0 : _stringA$trim.toLowerCase()) === (stringB === null || stringB === void 0 ? void 0 : (_stringB$trim = stringB.trim()) === null || _stringB$trim === void 0 ? void 0 : _stringB$trim.toLowerCase())) {
    return true;
  }
  return false;
};
var getFileUrl = function getFileUrl(fileStoreId) {
  return Promise.resolve(_catch(function () {
    return Promise.resolve(Digit.UploadServices.Filefetch([fileStoreId], Digit.ULBService.getStateId())).then(function (response) {
      var _response$data, _response$data$fileSt;
      if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$fileSt = _response$data.fileStoreIds) === null || _response$data$fileSt === void 0 ? void 0 : _response$data$fileSt.length) > 0) {
        var _response$data$fileSt2, _response$data$fileSt3;
        var url = (_response$data$fileSt2 = response.data.fileStoreIds[0]) === null || _response$data$fileSt2 === void 0 ? void 0 : _response$data$fileSt2.url;
        if (url.includes(".jpg") || url.includes(".png")) {
          var arr = url.split(",");
          var original = arr[0],
            large = arr[1],
            medium = arr[2],
            small = arr[3];
          return original;
        }
        return (_response$data$fileSt3 = response.data.fileStoreIds[0]) === null || _response$data$fileSt3 === void 0 ? void 0 : _response$data$fileSt3.url;
      }
    });
  }, function () {}));
};
var openUploadedDocument = function openUploadedDocument(filestoreId, name) {
  try {
    if (!filestoreId || !filestoreId.length) {
      alert("No Document exists!");
      return Promise.resolve();
    }
    var w = window.open("", "_blank");
    return Promise.resolve(getFileUrl(filestoreId)).then(function (url) {
      if (window.mSewaApp && window.mSewaApp.isMsewaApp()) {
        window.open(url, "_blank");
        setTimeout(function () {
          window.location.href = url;
        }, 1000);
      } else {
        w.location = url;
        w.document.title = name;
      }
    });
  } catch (e) {
    return Promise.reject(e);
  }
};
var openDocumentLink = function openDocumentLink(docLink, title) {
  if (!docLink || !docLink.length) {
    alert("No Document Link exists!");
    return;
  }
  if (window.mSewaApp && window.mSewaApp.isMsewaApp()) {
    window.open(docLink, "_blank");
    setTimeout(function () {
      window.location.href = docLink;
    }, 1000);
  } else {
    var w = window.open("", "_blank");
    w.location = docLink;
    w.document.title = title;
  }
};
var downloadDocument = function downloadDocument(filestoreId, title) {
  try {
    if (!filestoreId || !filestoreId.length) {
      alert("No Document exists!");
      return Promise.resolve();
    }
    return Promise.resolve(getFileUrl(filestoreId)).then(function (fileUrl) {
      if (fileUrl) {
        Digit.Utils.downloadPDFFromLink(fileUrl);
      }
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var isNestedArray = function isNestedArray(documents) {
  if (!documents || !documents.length) return false;
  if (Array.isArray(documents) && documents.length) {
    var firstItem = Array.isArray(documents[0]);
    if (firstItem) {
      return true;
    }
  }
  return false;
};

var reduceDocsArray = function reduceDocsArray(documentsArray) {
  if (!documentsArray || !documentsArray.length) return [];
  return documentsArray.reduce(function (acc, files) {
    var fileObj = {};
    var _files$ = files[1],
      file = _files$.file,
      fileStoreId = _files$.fileStoreId;
    fileObj["fileName"] = file === null || file === void 0 ? void 0 : file.name;
    fileObj["documentType"] = file === null || file === void 0 ? void 0 : file.type;
    fileObj["fileStoreId"] = fileStoreId === null || fileStoreId === void 0 ? void 0 : fileStoreId.fileStoreId;
    acc.push(fileObj);
    return acc;
  }, []);
};
var getFileSize = function getFileSize(size) {
  if (size === 0) return "0 Bytes";
  var k = 1024;
  var sizes = ["Bytes", "KB", "MB", "GB", "TB"];
  var i = Math.floor(Math.log(size) / Math.log(k));
  return parseFloat((size / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
};
var documentUploadMessage = function documentUploadMessage(t, fileStoreId, editMode) {
  var _fileStoreId$fileStor;
  if (!fileStoreId) return t("CS_ACTION_NO_FILEUPLOADED");
  return editMode ? fileStoreId !== null && fileStoreId !== void 0 && (_fileStoreId$fileStor = fileStoreId.fileStoreId) !== null && _fileStoreId$fileStor !== void 0 && _fileStoreId$fileStor.length ? "1 " + t("CS_ACTION_FILEUPLOADED") : t("CS_ACTION_NO_FILEUPLOADED") : fileStoreId ? "1 " + t("CS_ACTION_FILEUPLOADED") : t("CS_ACTION_NO_FILEUPLOADED");
};
var checkValidFileType = function checkValidFileType(fileType) {
  if (!fileType) return false;
  var allowedFileType = /(.*?)(jpg|jpeg|png|image|pdf|msword|openxmlformats)$/i;
  if (allowedFileType.test(fileType)) {
    return true;
  }
  return false;
};

var handleTodaysDate = function handleTodaysDate(dateString) {
  var dateObject = new Date(dateString);
  if (isToday(dateObject)) {
    var todaysDate = new Date();
    dateObject = new Date(todaysDate.getFullYear(), todaysDate.getMonth(), todaysDate.getDate(), 23, 59);
  }
  return dateObject.getTime();
};

var convertDateToMaximumPossibleValue = function convertDateToMaximumPossibleValue(dateObject) {
  return new Date(dateObject.getFullYear(), dateObject.getMonth(), dateObject.getDate(), 23, 59);
};

var SelectULB = function SelectULB(_ref) {
  var _formData$config$key2, _formData$config$key3;
  var t = _ref.t,
    setValue = _ref.setValue,
    config = _ref.config,
    formData = _ref.formData,
    errors = _ref.errors,
    control = _ref.control;
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var selectedTenat = React.useMemo(function () {
    if (formData !== null && formData !== void 0 && formData.defaultTenantId) {
      return ulbs === null || ulbs === void 0 ? void 0 : ulbs.find(function (ulb) {
        return (ulb === null || ulb === void 0 ? void 0 : ulb.code) === (formData === null || formData === void 0 ? void 0 : formData.defaultTenantId);
      });
    }
    if (tenantId && ulbs) {
      var filtered = ulbs === null || ulbs === void 0 ? void 0 : ulbs.filter(function (item) {
        return item.code === tenantId;
      });
      return filtered;
    }
    return (userUlbs === null || userUlbs === void 0 ? void 0 : userUlbs.length) === 1 ? userUlbs === null || userUlbs === void 0 ? void 0 : userUlbs[0] : null;
  }, [tenantId, ulbs]);
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  }).sort(alphabeticalSortFunctionForTenantsBasedOnName);
  var dropDownData = Digit.ULBService.getUserUlbs("SUPERUSER").sort(alphabeticalSortFunctionForTenantsBasedOnName);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, {
    style: {
      alignItems: 'start'
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    style: {
      fontWeight: "bold"
    }
  }, t("ES_COMMON_ULB") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: config.key,
    control: control,
    defaultValue: selectedTenat === null || selectedTenat === void 0 ? void 0 : selectedTenat[0],
    rules: {
      required: true
    },
    render: function render(props) {
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
        allowMultiselect: true,
        optionKey: "i18nKey"
        ,
        option: dropDownData,
        select: function select(e) {
          var _formData$config$key, _formData$config$key$;
          props.onChange([].concat((formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config === null || config === void 0 ? void 0 : config.key]) === null || _formData$config$key === void 0 ? void 0 : (_formData$config$key$ = _formData$config$key.filter) === null || _formData$config$key$ === void 0 ? void 0 : _formData$config$key$.call(_formData$config$key, function (f) {
            return e.code != (f === null || f === void 0 ? void 0 : f.code);
          })) || [], [e]));
        },
        keepNull: true,
        selected: props.value,
        disable: (ulbs === null || ulbs === void 0 ? void 0 : ulbs.length) === 1,
        t: t
      });
    }
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "tag-container"
  }, formData && ((_formData$config$key2 = formData[config === null || config === void 0 ? void 0 : config.key]) === null || _formData$config$key2 === void 0 ? void 0 : _formData$config$key2.length) > 0 && (formData === null || formData === void 0 ? void 0 : (_formData$config$key3 = formData[config.key]) === null || _formData$config$key3 === void 0 ? void 0 : _formData$config$key3.map(function (ulb, index) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: index,
      text: t(ulb === null || ulb === void 0 ? void 0 : ulb.i18nKey),
      onClick: function onClick() {
        var _formData$config$key4;
        setValue(config.key, formData === null || formData === void 0 ? void 0 : (_formData$config$key4 = formData[config.key]) === null || _formData$config$key4 === void 0 ? void 0 : _formData$config$key4.filter(function (e) {
          return e.i18nKey != ulb.i18nKey;
        }));
      }
    });
  }))), errors && errors[config.key] && /*#__PURE__*/React__default.createElement(CardLabelError, null, t("EVENTS_TENANT_ERROR_REQUIRED")))));
};

var ULBDropdown = function ULBDropdown(_ref) {
  var t = _ref.t,
    config = _ref.config,
    errors = _ref.errors,
    control = _ref.control;
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  }).sort(alphabeticalSortFunctionForTenantsBasedOnName);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, {
    style: {
      alignItems: 'start'
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    style: {
      fontWeight: "bold"
    }
  }, t("ES_COMMON_ULB") + "*"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: config.key,
    control: control,
    rules: {
      required: true
    },
    render: function render(_ref2) {
      var onChange = _ref2.onChange,
        value = _ref2.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
        option: userUlbs,
        selected: value,
        disable: (userUlbs === null || userUlbs === void 0 ? void 0 : userUlbs.length) === 1,
        optionKey: "code",
        t: t,
        select: onChange
      });
    }
  }), errors && errors[config === null || config === void 0 ? void 0 : config.key] && /*#__PURE__*/React__default.createElement(CardLabelError, null, t("EVENTS_TENANT_ERROR_REQUIRED")))));
};

var DocumentName = function DocumentName(_ref) {
  var t = _ref.t,
    config = _ref.config,
    register = _ref.register;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, {
    style: {
      marginBottom: '20px'
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    style: {
      fontWeight: "bold"
    }
  }, t("ES_COMMON_DOC_NAME") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    name: config.key,
    inputRef: register()
  }))));
};

var SelectCategory = function SelectCategory(_ref) {
  var t = _ref.t,
    config = _ref.config,
    formData = _ref.formData,
    control = _ref.control;
  var stateId = Digit.ULBService.getStateId();
  var _useState = React.useState(function () {
      return [];
    }),
    setUlbs = _useState[1];
  var currrentUlb = Digit.ULBService.getCurrentUlb() || "pb.amritsar";
  var _Digit$Hooks$engageme = Digit.Hooks.engagement.useMDMS(stateId, "DocumentUploader", ["UlbLevelCategories"], {
      select: function select(d) {
        var _d$DocumentUploader, _d$DocumentUploader$U, _d$DocumentUploader$U2;
        var data = d === null || d === void 0 ? void 0 : (_d$DocumentUploader = d.DocumentUploader) === null || _d$DocumentUploader === void 0 ? void 0 : (_d$DocumentUploader$U = _d$DocumentUploader.UlbLevelCategories) === null || _d$DocumentUploader$U === void 0 ? void 0 : (_d$DocumentUploader$U2 = _d$DocumentUploader$U.filter) === null || _d$DocumentUploader$U2 === void 0 ? void 0 : _d$DocumentUploader$U2.call(_d$DocumentUploader$U, function (e) {
          return e.ulb === currrentUlb.code;
        });
        return data[0].categoryList.map(function (name) {
          return {
            name: name
          };
        });
      }
    }),
    categoryData = _Digit$Hooks$engageme.data;
  React.useEffect(function () {
    var _formData$ULB, _formData$ULB2;
    formData !== null && formData !== void 0 && (_formData$ULB = formData.ULB) !== null && _formData$ULB !== void 0 && _formData$ULB.length ? setUlbs(formData === null || formData === void 0 ? void 0 : (_formData$ULB2 = formData.ULB) === null || _formData$ULB2 === void 0 ? void 0 : _formData$ULB2.map(function (e) {
      return e === null || e === void 0 ? void 0 : e.code;
    })) : null;
  }, [formData === null || formData === void 0 ? void 0 : formData.ULB]);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    style: {
      fontWeight: "bold"
    }
  }, t("ES_COMMON_DOC_CATEGORY") + "*"), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: config.key,
    control: control,
    render: function render(props) {
      return /*#__PURE__*/React__default.createElement("div", {
        className: "field"
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
        option: categoryData,
        select: props.onChange,
        selected: props.value,
        t: t,
        optionKey: "name"
      }));
    }
  })));
};

var SelectULB$1 = function SelectULB(_ref) {
  var _errors$description, _errors$description2, _errors$description2$;
  var t = _ref.t,
    config = _ref.config,
    register = _ref.register,
    errors = _ref.errors;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    style: {
      fontWeight: "bold"
    }
  }, t("ES_COMMON_DOC_DESCRIPTION")), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextArea, {
    name: config.key,
    inputRef: register({
      maxLength: 140
    })
  }), (errors === null || errors === void 0 ? void 0 : (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.type) && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("ERROR_" + (errors === null || errors === void 0 ? void 0 : (_errors$description2 = errors.description) === null || _errors$description2 === void 0 ? void 0 : (_errors$description2$ = _errors$description2.type) === null || _errors$description2$ === void 0 ? void 0 : _errors$description2$.toUpperCase()) + "_140")))));
};

var EngagementDocUploadDocument = function EngagementDocUploadDocument(_ref) {
  var t = _ref.t,
    config = _ref.config,
    formData = _ref.formData,
    setError = _ref.setError,
    control = _ref.control;
  var _useState = React.useState(function () {
      var _formData$config$key;
      return formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.filestoreId;
    }),
    fileStoreId = _useState[0],
    setFileStoreId = _useState[1];
  var _useState2 = React.useState(),
    fileSize = _useState2[0],
    setFileSize = _useState2[1];
  var _useState3 = React.useState(''),
    fileType = _useState3[0],
    setFileType = _useState3[1];
  var _useState4 = React.useState(),
    file = _useState4[0],
    setFile = _useState4[1];
  var _useState5 = React.useState(false),
    setUrlDisabled = _useState5[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useState6 = React.useState({}),
    controllerProps = _useState6[0],
    setProps = _useState6[1];
  var _useState7 = React.useState(false),
    isUploadingImage = _useState7[0],
    setIsUploadingImage = _useState7[1];
  var _useState8 = React.useState(""),
    imageUploadError = _useState8[0],
    setUploadError = _useState8[1];
  var selectFile = function selectFile(e, props) {
    var _e$target, _e$target$files, _e$target2, _e$target2$files$, _e$target3, _e$target3$files$;
    setFile();
    setFileSize();
    setFileType();
    setUploadError("");
    if (!((_e$target = e.target) !== null && _e$target !== void 0 && (_e$target$files = _e$target.files) !== null && _e$target$files !== void 0 && _e$target$files.length)) return;
    var size = e === null || e === void 0 ? void 0 : (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : (_e$target2$files$ = _e$target2.files[0]) === null || _e$target2$files$ === void 0 ? void 0 : _e$target2$files$.size;
    var type = e === null || e === void 0 ? void 0 : (_e$target3 = e.target) === null || _e$target3 === void 0 ? void 0 : (_e$target3$files$ = _e$target3.files[0]) === null || _e$target3$files$ === void 0 ? void 0 : _e$target3$files$.type;
    if (size && size / 1024 / 1024 > 5) {
      setUploadError('FILE_SIZE_EXCEEDED');
      return;
    }
    if (type && checkValidFileType(type)) {
      setFileSize(size);
      setFileType(type);
      setProps(props);
      setFile(e.target.files[0]);
      return;
    } else {
      setUploadError('NOT_SUPPORTED_FILE_TYPE');
    }
  };
  React.useEffect(function () {
    if (file) uploadFile();
  }, [file]);
  React.useEffect(function () {
    var _controllerProps$onCh;
    if (fileStoreId) ;else setUrlDisabled(false);
    controllerProps === null || controllerProps === void 0 ? void 0 : (_controllerProps$onCh = controllerProps.onChange) === null || _controllerProps$onCh === void 0 ? void 0 : _controllerProps$onCh.call(controllerProps, {
      fileStoreId: fileStoreId,
      fileSize: fileSize,
      fileType: fileType
    });
  }, [fileStoreId, controllerProps]);
  var uploadFile = function uploadFile() {
    try {
      var _temp2 = _finallyRethrows(function () {
        return _catch(function () {
          setIsUploadingImage(true);
          return Promise.resolve(Digit.UploadServices.Filestorage("engagement", file, Digit.ULBService.getStateId())).then(function (response) {
            var _response$data, _response$data$files;
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setFileStoreId(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          });
        }, function () {});
      }, function (_wasThrown, _result) {
        setIsUploadingImage(false);
        if (_wasThrown) throw _result;
        return _result;
      });
      return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var location = reactRouterDom.useLocation();
  var isInEditFormMode = React.useMemo(function () {
    if (location.pathname.includes('/documents/inbox/update')) return true;
    return false;
  }, [location.pathname]);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    style: {
      fontWeight: "bold"
    }
  }, t("ES_COMMON_DOC_DOCUMENT") + "*"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: config.key + ".filestoreId",
    control: control,
    render: function render(props) {
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.UploadFile, {
        id: "city-engagement-doc",
        onUpload: function onUpload(d) {
          return selectFile(d, props);
        },
        onDelete: function onDelete() {
          setFileStoreId(null);
          setFileSize(100);
        },
        accept: "image/*, .pdf, .png, .jpeg, .doc",
        showHintBelow: true,
        hintText: t("DOCUMENTS_ATTACH_RESTRICTIONS_SIZE"),
        message: isUploadingImage ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null) : documentUploadMessage(t, fileStoreId, isInEditFormMode),
        textStyles: {
          width: "100%"
        },
        inputStyles: {
          width: "280px"
        }
      });
    }
  }), fileSize ? "" + getFileSize(fileSize) : null, imageUploadError ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t(imageUploadError)) : null)));
};

var _ref;
var config = [{
  head: "",
  body: [{
    type: "form",
    withoutLabel: true,
    component: "EventForm",
    nextStep: "",
    route: "",
    key: "eventData"
  }, {
    type: "text",
    label: "EVENTS_DESCRIPTION_LABEL",
    isMandatory: true,
    description: "EVENTS_DESCRIPTION_TEXT",
    populators: {
      name: "description",
      className: "fullWidth",
      validation: {
        required: true,
        maxLength: 500
      },
      error: 'EVENTS_DESCRIPTION_ERROR_REQUIRED'
    }
  }, {
    type: "date",
    label: "EVENTS_FROM_DATE_LABEL",
    isMandatory: true,
    populators: {
      name: "fromDate",
      className: "fullWidth",
      validation: {
        required: true
      },
      shouldUpdate: true,
      error: "EVENTS_FROM_DATE_ERROR_INVALID"
    }
  }, (_ref = {
    type: "form",
    key: "SelectToDate",
    withoutLabel: true,
    component: "SelectToDate"
  }, _ref["key"] = "toDate", _ref), {
    type: "time",
    label: "EVENTS_FROM_TIME_LABEL",
    isMandatory: true,
    populators: {
      name: "fromTime",
      className: "fullWidth",
      validation: {
        required: true
      },
      error: "EVENTS_FROM_TIME_ERROR_REQUIRED"
    }
  }, {
    type: "time",
    label: "EVENTS_TO_TIME_LABEL",
    isMandatory: true,
    populators: {
      name: "toTime",
      className: "fullWidth",
      validation: {
        required: true
      },
      error: "EVENTS_TO_TIME_ERROR_REQUIRED"
    }
  }, {
    type: "text",
    label: "EVENTS_ADDRESS_LABEL",
    isMandatory: true,
    populators: {
      name: "address",
      className: "fullWidth",
      validation: {
        required: true
      },
      error: "EVENTS_ADDRESS_ERROR_REQUIRED"
    }
  }, {
    type: "component",
    component: "SelectEventGeolocation",
    withoutLabel: true,
    key: "geoLocation"
  }, {
    type: "text",
    label: "EVENTS_ORGANIZER_NAME_LABEL",
    populators: {
      name: "organizer",
      className: "fullWidth",
      validation: {
        pattern: /^[A-Za-z ]*$/
      },
      error: "EVENTS_ORGANIZER_ERROR"
    }
  }, {
    type: "number",
    label: "EVENTS_ENTRY_FEE_INR_LABEL",
    populators: {
      name: "fees",
      className: "fullWidth",
      error: "EVENTS_ENTRY_ERROR_REQUIRED"
    }
  }]
}];

var NewEvents = function NewEvents() {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var onSubmit = function onSubmit(data) {
    var _data$tenantId, _data$eventCategory;
    var fromDate = data.fromDate,
      toDate = data.toDate,
      fromTime = data.fromTime,
      toTime = data.toTime,
      address = data.address,
      organizer = data.organizer,
      fees = data.fees,
      _data$geoLocation = data.geoLocation,
      geoLocation = _data$geoLocation === void 0 ? {} : _data$geoLocation;
    var details = {
      events: [{
        source: "WEBAPP",
        eventType: "EVENTSONGROUND",
        tenantId: data === null || data === void 0 ? void 0 : (_data$tenantId = data.tenantId) === null || _data$tenantId === void 0 ? void 0 : _data$tenantId.code,
        description: data === null || data === void 0 ? void 0 : data.description,
        name: data === null || data === void 0 ? void 0 : data.name,
        eventcategory: data === null || data === void 0 ? void 0 : (_data$eventCategory = data.eventCategory) === null || _data$eventCategory === void 0 ? void 0 : _data$eventCategory.code,
        eventDetails: _extends({
          fromDate: new Date(fromDate + " " + fromTime).getTime(),
          toDate: new Date(toDate + " " + toTime).getTime(),
          fromTime: fromTime,
          toTime: toTime,
          address: address,
          organizer: organizer,
          fees: fees
        }, geoLocation)
      }]
    };
    history.push("/digit-ui/employee/engagement/event/response", details);
  };
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_MUTATION_HAPPENED", false),
    setMutationHappened = _Digit$Hooks$useSessi[1];
  var _Digit$Hooks$useSessi2 = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_ERROR_DATA", false),
    clearError = _Digit$Hooks$useSessi2[2];
  var _Digit$Hooks$useSessi3 = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_MUTATION_SUCCESS_DATA", false),
    clearSuccessData = _Digit$Hooks$useSessi3[2];
  React.useEffect(function () {
    setMutationHappened(false);
    clearSuccessData();
    clearError();
  }, []);
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("ES_TITLE_NEW_EVENTS")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    config: config,
    onSubmit: onSubmit,
    label: t("EVENTS_CREATE_EVENT")
  }));
};

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}

function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}

function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}

function differenceInMilliseconds(dateLeft, dateRight) {
  requiredArgs(2, arguments);
  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();
}

var roundingMap = {
  ceil: Math.ceil,
  round: Math.round,
  floor: Math.floor,
  trunc: function trunc(value) {
    return value < 0 ? Math.ceil(value) : Math.floor(value);
  }
};

var defaultRoundingMethod = 'trunc';
function getRoundingMethod(method) {
  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];
}

function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}

function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

function isLastDayOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return endOfDay(date).getTime() === endOfMonth(date).getTime();
}

function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  var result;

  if (difference < 1) {
    result = 0;
  } else {
    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {
      dateLeft.setDate(30);
    }
    dateLeft.setMonth(dateLeft.getMonth() - sign * difference);

    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;

    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {
      isLastMonthNotFull = false;
    }
    result = sign * (difference - Number(isLastMonthNotFull));
  }

  return result === 0 ? 0 : result;
}

function differenceInSeconds(dateLeft, dateRight, options) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;
  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);
}

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};
var formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }
  return result;
};

function buildFormatLongFn(args) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};

function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;
    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;

    return valuesArray[index];
  };
}

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
};

var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);

  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';
      case 2:
        return number + 'nd';
      case 3:
        return number + 'rd';
    }
  }
  return number + 'th';
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};

function buildMatchFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return undefined;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return undefined;
}

function buildMatchPatternFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};

var locale = {
  code: 'en-US',
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0
    ,

    firstWeekContainsDate: 1
  }
};

function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

var MILLISECONDS_IN_DAY = 86400000;

function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

var MILLISECONDS_IN_WEEK = 604800000;

function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}

var MILLISECONDS_IN_WEEK$1 = 604800000;

function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}

function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = '0' + output;
  }
  return sign + output;
}

var formatters = {
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();

    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
  },
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
    switch (token) {
      case 'a':
      case 'aa':
        return dayPeriodEnumValue.toUpperCase();
      case 'aaa':
        return dayPeriodEnumValue;
      case 'aaaaa':
        return dayPeriodEnumValue[0];
      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};

var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
};

var formatters$1 = {
  G: function G(date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated'
        });

      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow'
        });

      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide'
        });
    }
  },
  y: function y(date, token, localize) {
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear();

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year'
      });
    }
    return formatters.y(date, token);
  },
  Y: function Y(date, token, localize, options) {
    var signedWeekYear = getUTCWeekYear(date, options);

    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }

    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year'
      });
    }

    return addLeadingZeros(weekYear, token.length);
  },
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);

    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function Q(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case 'Q':
        return String(quarter);

      case 'QQ':
        return addLeadingZeros(quarter, 2);

      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });

      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  q: function q(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case 'q':
        return String(quarter);

      case 'qq':
        return addLeadingZeros(quarter, 2);

      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });

      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone'
        });

      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone'
        });

      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  M: function M(date, token, localize) {
    var month = date.getUTCMonth();
    switch (token) {
      case 'M':
      case 'MM':
        return formatters.M(date, token);

      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });

      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  L: function L(date, token, localize) {
    var month = date.getUTCMonth();
    switch (token) {
      case 'L':
        return String(month + 1);

      case 'LL':
        return addLeadingZeros(month + 1, 2);

      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });

      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone'
        });

      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone'
        });

      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  w: function w(date, token, localize, options) {
    var week = getUTCWeek(date, options);
    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week'
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function I(date, token, localize) {
    var isoWeek = getUTCISOWeek(date);
    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week'
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function d(date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date'
      });
    }
    return formatters.d(date, token);
  },
  D: function D(date, token, localize) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear'
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function E(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });

      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  e: function e(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case 'e':
        return String(localDayOfWeek);

      case 'ee':
        return addLeadingZeros(localDayOfWeek, 2);

      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });
      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });

      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  c: function c(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case 'c':
        return String(localDayOfWeek);

      case 'cc':
        return addLeadingZeros(localDayOfWeek, token.length);

      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });
      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone'
        });

      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone'
        });

      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone'
        });

      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  i: function i(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case 'i':
        return String(isoDayOfWeek);

      case 'ii':
        return addLeadingZeros(isoDayOfWeek, token.length);

      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day'
        });

      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });

      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  a: function a(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    switch (token) {
      case 'a':
      case 'aa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });
      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();
      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });
      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  b: function b(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }
    switch (token) {
      case 'b':
      case 'bb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });
      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();
      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });
      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  B: function B(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });
      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });
      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  h: function h(date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }
    return formatters.h(date, token);
  },
  H: function H(date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour'
      });
    }
    return formatters.H(date, token);
  },
  K: function K(date, token, localize) {
    var hours = date.getUTCHours() % 12;
    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function k(date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;
    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function m(date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute'
      });
    }
    return formatters.m(date, token);
  },
  s: function s(date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second'
      });
    }
    return formatters.s(date, token);
  },
  S: function S(date, token) {
    return formatters.S(date, token);
  },
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return 'Z';
    }
    switch (token) {
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      case 'XXXX':
      case 'XX':
        return formatTimezone(timezoneOffset);

      case 'XXXXX':
      case 'XXX':

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      case 'xxxx':
      case 'xx':
        return formatTimezone(timezoneOffset);

      case 'xxxxx':
      case 'xxx':

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');

      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');

      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });
    case 'PP':
      return formatLong.date({
        width: 'medium'
      });
    case 'PPP':
      return formatLong.date({
        width: 'long'
      });
    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
}
function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });
    case 'pp':
      return formatLong.time({
        width: 'medium'
      });
    case 'ppp':
      return formatLong.time({
        width: 'long'
      });
    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
}
function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;
    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;
    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;
    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }
  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};

var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}

var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale$1 = options.locale || locale;
  var localeFirstWeekContainsDate = locale$1.options && locale$1.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var localeWeekStartsOn = locale$1.options && locale$1.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  if (!locale$1.localize) {
    throw new RangeError('locale must contain localize property');
  }
  if (!locale$1.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError('Invalid time value');
  }

  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale$1,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale$1.formatLong, formatterOptions);
    }
    return substring;
  }).join('').match(formattingTokensRegExp).map(function (substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters$1[firstCharacter];
    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      return formatter(utcDate, substring, locale$1.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
    }
    return substring;
  }).join('');
  return result;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError('assign requires that input parameter not be null or undefined');
  }
  dirtyObject = dirtyObject || {};
  for (var property in dirtyObject) {
    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
      target[property] = dirtyObject[property];
    }
  }
  return target;
}

function cloneObject(dirtyObject) {
  return assign({}, dirtyObject);
}

var MINUTES_IN_DAY = 1440;
var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_TWO_MONTHS = 86400;

function formatDistance$1(dirtyDate, dirtyBaseDate) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  requiredArgs(2, arguments);
  var locale$1 = options.locale || locale;
  if (!locale$1.formatDistance) {
    throw new RangeError('locale must contain formatDistance property');
  }
  var comparison = compareAsc(dirtyDate, dirtyBaseDate);
  if (isNaN(comparison)) {
    throw new RangeError('Invalid time value');
  }
  var localizeOptions = cloneObject(options);
  localizeOptions.addSuffix = Boolean(options.addSuffix);
  localizeOptions.comparison = comparison;
  var dateLeft;
  var dateRight;
  if (comparison > 0) {
    dateLeft = toDate(dirtyBaseDate);
    dateRight = toDate(dirtyDate);
  } else {
    dateLeft = toDate(dirtyDate);
    dateRight = toDate(dirtyBaseDate);
  }
  var seconds = differenceInSeconds(dateRight, dateLeft);
  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;
  var minutes = Math.round((seconds - offsetInSeconds) / 60);
  var months;

  if (minutes < 2) {
    if (options.includeSeconds) {
      if (seconds < 5) {
        return locale$1.formatDistance('lessThanXSeconds', 5, localizeOptions);
      } else if (seconds < 10) {
        return locale$1.formatDistance('lessThanXSeconds', 10, localizeOptions);
      } else if (seconds < 20) {
        return locale$1.formatDistance('lessThanXSeconds', 20, localizeOptions);
      } else if (seconds < 40) {
        return locale$1.formatDistance('halfAMinute', null, localizeOptions);
      } else if (seconds < 60) {
        return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
      } else {
        return locale$1.formatDistance('xMinutes', 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
      } else {
        return locale$1.formatDistance('xMinutes', minutes, localizeOptions);
      }
    }
  } else if (minutes < 45) {
    return locale$1.formatDistance('xMinutes', minutes, localizeOptions);
  } else if (minutes < 90) {
    return locale$1.formatDistance('aboutXHours', 1, localizeOptions);
  } else if (minutes < MINUTES_IN_DAY) {
    var hours = Math.round(minutes / 60);
    return locale$1.formatDistance('aboutXHours', hours, localizeOptions);
  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
    return locale$1.formatDistance('xDays', 1, localizeOptions);
  } else if (minutes < MINUTES_IN_MONTH) {
    var days = Math.round(minutes / MINUTES_IN_DAY);
    return locale$1.formatDistance('xDays', days, localizeOptions);
  } else if (minutes < MINUTES_IN_TWO_MONTHS) {
    months = Math.round(minutes / MINUTES_IN_MONTH);
    return locale$1.formatDistance('aboutXMonths', months, localizeOptions);
  }
  months = differenceInMonths(dateRight, dateLeft);

  if (months < 12) {
    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
    return locale$1.formatDistance('xMonths', nearestMonth, localizeOptions);
  } else {
    var monthsSinceStartOfYear = months % 12;
    var years = Math.floor(months / 12);

    if (monthsSinceStartOfYear < 3) {
      return locale$1.formatDistance('aboutXYears', years, localizeOptions);
    } else if (monthsSinceStartOfYear < 9) {
      return locale$1.formatDistance('overXYears', years, localizeOptions);
    } else {
      return locale$1.formatDistance('almostXYears', years + 1, localizeOptions);
    }
  }
}

function formatDistanceToNow(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  return formatDistance$1(dirtyDate, Date.now(), dirtyOptions);
}

var EditEvents = function EditEvents() {
  var _data$eventDetails, _data$eventDetails2, _data$eventDetails3, _data$eventDetails4, _data$eventDetails5, _data$eventDetails6, _data$eventDetails7, _data$eventDetails8, _data$eventDetails9;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _useParams = reactRouterDom.useParams(),
    EventId = _useParams.id;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _Digit$Hooks$events$u = Digit.Hooks.events.useInbox(tenantId, {}, {
      eventTypes: "EVENTSONGROUND",
      ids: EventId
    }, {
      select: function select(data) {
        var _data$events;
        return data === null || data === void 0 ? void 0 : (_data$events = data.events) === null || _data$events === void 0 ? void 0 : _data$events[0];
      }
    }),
    isLoading = _Digit$Hooks$events$u.isLoading,
    data = _Digit$Hooks$events$u.data;
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_MUTATION_HAPPENED", false),
    setMutationHappened = _Digit$Hooks$useSessi[1];
  var _Digit$Hooks$useSessi2 = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_ERROR_DATA", false),
    clearError = _Digit$Hooks$useSessi2[2];
  var _Digit$Hooks$useSessi3 = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_MUTATION_SUCCESS_DATA", false),
    clearSuccessData = _Digit$Hooks$useSessi3[2];
  React.useEffect(function () {
    setMutationHappened(false);
    clearSuccessData();
    clearError();
  }, []);
  var onSubmit = function onSubmit(formData) {
    var _formData$tenantId, _formData$eventCatego;
    var fromDate = formData.fromDate,
      toDate = formData.toDate,
      fromTime = formData.fromTime,
      toTime = formData.toTime,
      address = formData.address,
      organizer = formData.organizer,
      fees = formData.fees,
      geoLocation = formData.geoLocation;
    var details = {
      events: [_extends({}, data, {
        source: "WEBAPP",
        status: "ACTIVE",
        eventType: "EVENTSONGROUND",
        tenantId: formData === null || formData === void 0 ? void 0 : (_formData$tenantId = formData.tenantId) === null || _formData$tenantId === void 0 ? void 0 : _formData$tenantId.code,
        description: formData === null || formData === void 0 ? void 0 : formData.description,
        name: formData === null || formData === void 0 ? void 0 : formData.name,
        eventcategory: formData === null || formData === void 0 ? void 0 : (_formData$eventCatego = formData.eventCategory) === null || _formData$eventCatego === void 0 ? void 0 : _formData$eventCatego.code,
        eventDetails: _extends({}, data === null || data === void 0 ? void 0 : data.eventDetails, {
          fromDate: new Date(fromDate + " " + fromTime).getTime(),
          toDate: new Date(toDate + " " + toTime).getTime(),
          fromTime: fromTime,
          toTime: toTime,
          address: address,
          organizer: organizer,
          fees: fees,
          latitude: geoLocation === null || geoLocation === void 0 ? void 0 : geoLocation.latitude,
          longitude: geoLocation === null || geoLocation === void 0 ? void 0 : geoLocation.longitude
        })
      })]
    };
    history.push("/digit-ui/employee/engagement/event/response?update=true", details);
  };
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  var defaultValues = {
    defaultTenantId: data === null || data === void 0 ? void 0 : data.tenantId,
    name: data === null || data === void 0 ? void 0 : data.name,
    fromDate: format(new Date(data === null || data === void 0 ? void 0 : (_data$eventDetails = data.eventDetails) === null || _data$eventDetails === void 0 ? void 0 : _data$eventDetails.fromDate), 'yyyy-MM-dd'),
    toDate: format(new Date(data === null || data === void 0 ? void 0 : (_data$eventDetails2 = data.eventDetails) === null || _data$eventDetails2 === void 0 ? void 0 : _data$eventDetails2.toDate), 'yyyy-MM-dd'),
    organizer: data === null || data === void 0 ? void 0 : (_data$eventDetails3 = data.eventDetails) === null || _data$eventDetails3 === void 0 ? void 0 : _data$eventDetails3.organizer,
    fees: data === null || data === void 0 ? void 0 : (_data$eventDetails4 = data.eventDetails) === null || _data$eventDetails4 === void 0 ? void 0 : _data$eventDetails4.fees,
    description: data === null || data === void 0 ? void 0 : data.description,
    address: data === null || data === void 0 ? void 0 : (_data$eventDetails5 = data.eventDetails) === null || _data$eventDetails5 === void 0 ? void 0 : _data$eventDetails5.address,
    category: data === null || data === void 0 ? void 0 : data.eventCategory,
    fromTime: format(new Date(data === null || data === void 0 ? void 0 : (_data$eventDetails6 = data.eventDetails) === null || _data$eventDetails6 === void 0 ? void 0 : _data$eventDetails6.fromDate), 'HH:mm'),
    toTime: format(new Date(data === null || data === void 0 ? void 0 : (_data$eventDetails7 = data.eventDetails) === null || _data$eventDetails7 === void 0 ? void 0 : _data$eventDetails7.toDate), 'HH:mm'),
    geoLocation: {
      latitude: data === null || data === void 0 ? void 0 : (_data$eventDetails8 = data.eventDetails) === null || _data$eventDetails8 === void 0 ? void 0 : _data$eventDetails8.latitude,
      longitude: data === null || data === void 0 ? void 0 : (_data$eventDetails9 = data.eventDetails) === null || _data$eventDetails9 === void 0 ? void 0 : _data$eventDetails9.longitude
    }
  };
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("ES_TITLE_EDIT_EVENTS")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    defaultValues: defaultValues,
    config: config,
    onSubmit: onSubmit,
    label: t("EVENTS_SAVE_CHANGES")
  }));
};

var BannerPicker = function BannerPicker(props) {
  var _props$data, _props$data$events, _props$data$events$;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Banner, {
    message: t(props.message),
    applicationNumber: props === null || props === void 0 ? void 0 : (_props$data = props.data) === null || _props$data === void 0 ? void 0 : (_props$data$events = _props$data.events) === null || _props$data$events === void 0 ? void 0 : (_props$data$events$ = _props$data$events[0]) === null || _props$data$events$ === void 0 ? void 0 : _props$data$events$.name,
    info: t("ENGAGEMENT_EVENT_NAME"),
    successful: props.isSuccess
  });
};
var Response = function Response(props) {
  var _mutation$data, _mutation$data$events, _successData$events, _event$eventDetails, _event$eventDetails2, _event$eventDetails3, _event$eventDetails4;
  var queryClient = reactQuery.useQueryClient();
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var searchParams = Digit.Hooks.useQueryParams();
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var mutation = Digit.Hooks.events.useCreateEvent();
  var updateEventMutation = Digit.Hooks.events.useUpdateEvent();
  var _useState = React.useState(false);
  var state = props.location.state;
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_MUTATION_HAPPENED", false),
    mutationHappened = _Digit$Hooks$useSessi[0],
    setMutationHappened = _Digit$Hooks$useSessi[1];
  var _Digit$Hooks$useSessi2 = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_MUTATION_SUCCESS_DATA", false),
    successData = _Digit$Hooks$useSessi2[0],
    setsuccessData = _Digit$Hooks$useSessi2[1];
  var _Digit$Hooks$useSessi3 = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_ERROR_DATA", false),
    setErrorInfo = _Digit$Hooks$useSessi3[1];
  var onError = function onError(error, variables) {
    var _error$response, _error$response$data, _error$response$data$;
    setErrorInfo((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.Errors[0]) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.code) || 'ERROR');
    setMutationHappened(true);
  };
  React.useEffect(function () {
    if (mutation.data) setsuccessData(mutation.data);
  }, [mutation.data]);
  React.useEffect(function () {
    if (updateEventMutation.data) setsuccessData(updateEventMutation.data);
  }, [updateEventMutation.data]);
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      setMutationHappened(true);
      queryClient.clear();
    };
    if (!mutationHappened) {
      if (Boolean(searchParams === null || searchParams === void 0 ? void 0 : searchParams.delete) || Boolean(searchParams === null || searchParams === void 0 ? void 0 : searchParams.update)) {
        updateEventMutation.mutate(state, {
          onError: onError,
          onSuccess: onSuccess
        });
        return;
      }
      mutation.mutate(state, {
        onError: onError,
        onSuccess: onSuccess
      });
      return;
    }
    return function () {
      queryClient.clear();
    };
  }, []);
  if (searchParams !== null && searchParams !== void 0 && searchParams.delete || searchParams !== null && searchParams !== void 0 && searchParams.update) {
    if (updateEventMutation.isLoading || updateEventMutation.isIdle && !mutationHappened) {
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
    }
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker, {
      t: t,
      message: searchParams !== null && searchParams !== void 0 && searchParams.update ? updateEventMutation.isSuccess || successData ? 'ENGAGEMENT_EVENT_UPDATED' : "ENGAGEMENT_EVENT_UPDATED_FAILED" : updateEventMutation.isSuccess || successData ? 'ENGAGEMENT_EVENT_DELETED' : 'ENGAGEMENT_EVENT_DELETED_FAILED',
      data: updateEventMutation.data || successData,
      isSuccess: (updateEventMutation === null || updateEventMutation === void 0 ? void 0 : updateEventMutation.isSuccess) || successData,
      isLoading: updateEventMutation.isIdle && !mutationHappened || updateEventMutation.isLoading
    }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardText, null, searchParams !== null && searchParams !== void 0 && searchParams.update ? updateEventMutation.isSuccess || successData ? t('ENGAGEMENT_EVENT_UPDATED') : t("ENGAGEMENT_EVENT_UPDATED_FAILED") : updateEventMutation.isSuccess || successData ? t('ENGAGEMENT_EVENT_DELETED') : t('ENGAGEMENT_EVENT_DELETED_FAILED')), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
      to: "/digit-ui/employee"
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
      label: t("CORE_COMMON_GO_TO_HOME")
    }))));
  }
  if (mutation.isLoading || mutation.isIdle && !mutationHappened) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  var event = (mutation === null || mutation === void 0 ? void 0 : (_mutation$data = mutation.data) === null || _mutation$data === void 0 ? void 0 : (_mutation$data$events = _mutation$data.events) === null || _mutation$data$events === void 0 ? void 0 : _mutation$data$events[0]) || (successData === null || successData === void 0 ? void 0 : (_successData$events = successData.events) === null || _successData$events === void 0 ? void 0 : _successData$events[0]) || {};
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker, {
    t: t,
    message: mutation.isSuccess || successData ? "ENGAGEMENT_EVENT_CREATED_MESSAGE" : "ENGAGEMENT_EVENT_FAILED_MESSAGES",
    data: mutation.data || successData,
    isSuccess: mutation.isSuccess || successData,
    isLoading: mutation.isIdle && !mutationHappened || mutation.isLoading
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardText, null, mutation.isSuccess || successData ? t("ENGAGEMENT_EVENT_CREATED_MESSAGES", {
    eventName: event === null || event === void 0 ? void 0 : event.name,
    fromDate: Digit.DateUtils.ConvertTimestampToDate(event === null || event === void 0 ? void 0 : (_event$eventDetails = event.eventDetails) === null || _event$eventDetails === void 0 ? void 0 : _event$eventDetails.fromDate),
    toDate: Digit.DateUtils.ConvertTimestampToDate(event === null || event === void 0 ? void 0 : (_event$eventDetails2 = event.eventDetails) === null || _event$eventDetails2 === void 0 ? void 0 : _event$eventDetails2.toDate),
    fromTime: mutation.isSuccess ? format(new Date(event === null || event === void 0 ? void 0 : (_event$eventDetails3 = event.eventDetails) === null || _event$eventDetails3 === void 0 ? void 0 : _event$eventDetails3.fromDate), 'HH:mm') : null,
    toTime: mutation.isSuccess ? format(new Date(event === null || event === void 0 ? void 0 : (_event$eventDetails4 = event.eventDetails) === null || _event$eventDetails4 === void 0 ? void 0 : _event$eventDetails4.toDate), 'HH:mm') : null
  }) : null), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
    to: "/digit-ui/employee"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CORE_COMMON_GO_TO_HOME")
  }))));
};

var ApplicationTable = function ApplicationTable(_ref) {
  var t = _ref.t,
    data = _ref.data,
    columns = _ref.columns,
    globalSearch = _ref.globalSearch,
    onSearch = _ref.onSearch,
    getCellProps = _ref.getCellProps,
    pageSizeLimit = _ref.pageSizeLimit,
    totalRecords = _ref.totalRecords,
    currentPage = _ref.currentPage,
    onNextPage = _ref.onNextPage,
    onPrevPage = _ref.onPrevPage,
    onPageSizeChange = _ref.onPageSizeChange;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Table, {
    t: t,
    data: data,
    columns: columns,
    onSearch: onSearch,
    globalSearch: globalSearch,
    manualGlobalFilter: true,
    manualPagination: true,
    pageSizeLimit: pageSizeLimit,
    getCellProps: getCellProps,
    totalRecords: totalRecords,
    currentPage: currentPage,
    onNextPage: onNextPage,
    onPrevPage: onPrevPage,
    onPageSizeChange: onPageSizeChange
  });
};

var DropdownUlb = function DropdownUlb(_ref) {
  var ulb = _ref.ulb,
    onAssignmentChange = _ref.onAssignmentChange,
    value = _ref.value,
    t = _ref.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
    option: ulb,
    optionKey: "code",
    selected: value,
    select: onAssignmentChange,
    t: t
  });
};

var Search = function Search(_ref) {
  var onSearch = _ref.onSearch,
    searchParams = _ref.searchParams,
    searchFields = _ref.searchFields,
    type = _ref.type,
    onClose = _ref.onClose,
    isInboxPage = _ref.isInboxPage,
    t = _ref.t;
  var _useForm = reactHookForm.useForm({
      defaultValues: searchParams
    }),
    handleSubmit = _useForm.handleSubmit,
    formState = _useForm.formState,
    reset = _useForm.reset,
    control = _useForm.control;
  var mobileView = innerWidth <= 640;
  var ulb = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulb.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  }).sort(alphabeticalSortFunctionForTenantsBasedOnName);
  var getFields = function getFields(input) {
    switch (input.type) {
      case "ulb":
        return /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          rules: {
            required: true
          },
          render: function render(props) {
            return /*#__PURE__*/React__default.createElement(DropdownUlb, {
              onAssignmentChange: props.onChange,
              value: props.value,
              ulb: userUlbs,
              t: t
            });
          },
          name: input.name,
          control: control,
          defaultValue: null
        });
      default:
        return /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          render: function render(props) {
            return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
              onChange: props.onChange,
              value: props.value
            });
          },
          name: input.name,
          control: control,
          defaultValue: null
        });
    }
  };
  var onSubmitInput = function onSubmitInput(data) {

    onSearch(data);
    if (type === "mobile") {
      onClose();
    }
  };
  var clearSearch = function clearSearch() {
    reset({
      ulb: null,
      eventName: ''
    });
    onSearch({
      ulb: null,
      eventName: ''
    });
  };
  var clearAll = function clearAll(mobileView) {
    var mobileViewStyles = mobileView ? {
      margin: 0
    } : {};
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.LinkLabel, {
      style: _extends({
        display: "inline"
      }, mobileViewStyles),
      onClick: clearSearch
    }, t("ES_COMMON_CLEAR_SEARCH"));
  };
  return /*#__PURE__*/React__default.createElement("form", {
    onSubmit: handleSubmit(onSubmitInput)
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "search-container",
    style: {
      width: "auto",
      marginLeft: isInboxPage ? "24px" : "revert"
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "search-complaint-container"
  }, (type === "mobile" || mobileView) && /*#__PURE__*/React__default.createElement("div", {
    className: "complaint-header"
  }, /*#__PURE__*/React__default.createElement("h2", null, t("ES_COMMON_SEARCH_BY")), /*#__PURE__*/React__default.createElement("span", {
    onClick: onClose
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null))), /*#__PURE__*/React__default.createElement("div", {
    className: "complaint-input-container for-pt " + (!isInboxPage ? "for-search" : ""),
    style: {
      width: "100%"
    }
  }, searchFields === null || searchFields === void 0 ? void 0 : searchFields.map(function (input, index) {
    var _formState$dirtyField, _formState$errors, _formState$errors$inp;
    return /*#__PURE__*/React__default.createElement("div", {
      key: input.name,
      className: "input-fields"
    }, /*#__PURE__*/React__default.createElement("span", {
      className: "mobile-input"
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Label, null, t(input.label) + (" " + (input.isMendatory ? "*" : ""))), getFields(input)), formState !== null && formState !== void 0 && (_formState$dirtyField = formState.dirtyFields) !== null && _formState$dirtyField !== void 0 && _formState$dirtyField[input.name] ? /*#__PURE__*/React__default.createElement("span", {
      style: {
        fontWeight: "700",
        color: "rgba(212, 53, 28)",
        paddingLeft: "8px",
        marginTop: "-20px",
        fontSize: "12px"
      },
      className: "inbox-search-form-error"
    }, formState === null || formState === void 0 ? void 0 : (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$inp = _formState$errors[input.name]) === null || _formState$errors$inp === void 0 ? void 0 : _formState$errors$inp.message) : null);
  }), type === "desktop" && !mobileView && /*#__PURE__*/React__default.createElement("div", {
    style: {
      maxWidth: "unset",
      marginLeft: "unset",
      marginTop: "55px"
    },
    className: "search-submit-wrapper"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    className: "submit-bar-search",
    label: t("ES_COMMON_SEARCH")
    ,
    submit: true
  }), /*#__PURE__*/React__default.createElement("div", null, clearAll()))))), (type === "mobile" || mobileView) && /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, {
    className: "clear-search-container"
  }, /*#__PURE__*/React__default.createElement("button", {
    className: "clear-search",
    style: {
      flex: 1
    }
  }, clearAll(mobileView)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    disabled: !!Object.keys(formState.errors).length,
    label: t("ES_COMMON_SEARCH"),
    style: {
      flex: 1
    },
    submit: true
  })));
};

var EventLink = function EventLink(_ref) {
  var _ref$title = _ref.title,
    title = _ref$title === void 0 ? "EVENTS_EVENTS_HEADER" : _ref$title,
    links = _ref.links,
    _ref$icon = _ref.icon,
    icon = _ref$icon === void 0 ? 'calender' : _ref$icon;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var GetLogo = function GetLogo() {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "header",
      style: {
        justifyContent: "flex-start"
      }
    }, /*#__PURE__*/React__default.createElement("span", {
      className: "logo",
      style: {
        backgroundColor: "#fff"
      }
    }, icon === "calender" ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.EventCalendar, null) : icon === "survey" ? 'surveyIcon' : /*#__PURE__*/React__default.createElement(digitUiReactComponents.DocumentIcon, null)), " ", /*#__PURE__*/React__default.createElement("span", {
      className: "text"
    }, t(title)));
  };
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
    className: "employeeCard filter inboxLinks"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "complaint-links-container"
  }, GetLogo(), /*#__PURE__*/React__default.createElement("div", {
    className: "body"
  }, links.map(function (_ref2, index) {
    var link = _ref2.link,
      text = _ref2.text,
      _ref2$hyperlink = _ref2.hyperlink,
      hyperlink = _ref2$hyperlink === void 0 ? false : _ref2$hyperlink;
    return /*#__PURE__*/React__default.createElement("span", {
      className: "link",
      key: index
    }, hyperlink ? /*#__PURE__*/React__default.createElement("a", {
      href: link
    }, text) : /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
      to: link
    }, text));
  }))));
};

var StatusCount = function StatusCount(_ref) {
  var _searchParams$eventSt, _searchParams$eventSt2;
  var status = _ref.status,
    onAssignmentChange = _ref.onAssignmentChange,
    searchParams = _ref.searchParams;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.CheckBox, {
    onChange: function onChange(e) {
      return onAssignmentChange(e, status);
    },
    checked: (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt = searchParams.eventStatus) === null || _searchParams$eventSt === void 0 ? void 0 : (_searchParams$eventSt2 = _searchParams$eventSt.filter(function (event) {
      return event === status;
    })) === null || _searchParams$eventSt2 === void 0 ? void 0 : _searchParams$eventSt2.length) > 0 ? true : false,
    label: t(status),
    pageType: 'employee'
  });
};

var statuses = ["ACTIVE", "INACTIVE"];
var Status = function Status(_ref) {
  var onAssignmentChange = _ref.onAssignmentChange,
    searchParams = _ref.searchParams;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "status-container"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filter-label"
  }, t("ES_INBOX_STATUS")), statuses === null || statuses === void 0 ? void 0 : statuses.map(function (status, key) {
    return /*#__PURE__*/React__default.createElement(StatusCount, {
      key: key,
      status: status,
      onAssignmentChange: onAssignmentChange,
      searchParams: searchParams
    });
  }));
};

var Filter = function Filter(_ref) {
  var _data$mseva;
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? "desktop" : _ref$type,
    onClose = _ref.onClose,
    onFilterChange = _ref.onFilterChange,
    searchParams = _ref.searchParams;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useState = React.useState(function () {
      return _extends({}, searchParams);
    }),
    localSearchParams = _useState[0],
    setLocalSearchParams = _useState[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var state = tenantId === null || tenantId === void 0 ? void 0 : tenantId.split('.')[0];
  var _Digit$Hooks$useCommo = Digit.Hooks.useCommonMDMS(state, "mseva", ["EventCategories"]),
    isLoading = _Digit$Hooks$useCommo.isLoading,
    data = _Digit$Hooks$useCommo.data;
  var clearAll = function clearAll() {
    setLocalSearchParams({
      eventCategory: null,
      eventStatus: [],
      range: {
        startDate: null,
        endDate: new Date(""),
        title: ""
      }
    });
    onFilterChange({
      eventCategory: null,
      eventStatus: [],
      range: {
        startDate: null,
        endDate: new Date(""),
        title: ""
      }
    });
    onClose === null || onClose === void 0 ? void 0 : onClose();
  };
  var applyLocalFilters = function applyLocalFilters() {
    onFilterChange(localSearchParams);
    onClose === null || onClose === void 0 ? void 0 : onClose();
  };
  var handleChange = function handleChange(data) {
    setLocalSearchParams(_extends({}, localSearchParams, data));
  };
  var onStatusChange = function onStatusChange(e, type) {
    var _localSearchParams$ev;
    if (e.target.checked) handleChange({
      eventStatus: [].concat((localSearchParams === null || localSearchParams === void 0 ? void 0 : localSearchParams.eventStatus) || [], [type])
    });else handleChange({
      eventStatus: localSearchParams === null || localSearchParams === void 0 ? void 0 : (_localSearchParams$ev = localSearchParams.eventStatus) === null || _localSearchParams$ev === void 0 ? void 0 : _localSearchParams$ev.filter(function (status) {
        return status !== type;
      })
    });
  };
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "filter"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filter-card"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "heading"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filter-label"
  }, t("ES_COMMON_FILTER_BY"), ":"), /*#__PURE__*/React__default.createElement("div", {
    className: "clearAll",
    onClick: clearAll
  }, t("ES_COMMON_CLEAR_ALL")), type === "desktop" && /*#__PURE__*/React__default.createElement("span", {
    className: "clear-search",
    onClick: clearAll
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.RefreshIcon, null)), type === "mobile" && /*#__PURE__*/React__default.createElement("span", {
    onClick: onClose
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null))), /*#__PURE__*/React__default.createElement("div", {
    className: "filter-label"
  }, "" + t("EVENTS_CATEGORY_LABEL")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
    option: data === null || data === void 0 ? void 0 : (_data$mseva = data.mseva) === null || _data$mseva === void 0 ? void 0 : _data$mseva.EventCategories,
    optionKey: "code",
    t: t,
    selected: localSearchParams === null || localSearchParams === void 0 ? void 0 : localSearchParams.eventCategory,
    select: function select(val) {
      return handleChange({
        eventCategory: val
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.DateRange, {
    t: t,
    values: localSearchParams === null || localSearchParams === void 0 ? void 0 : localSearchParams.range,
    onFilterChange: handleChange,
    labelClass: "filter-label"
  }), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(Status, {
    onAssignmentChange: onStatusChange,
    searchParams: localSearchParams
  })), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    style: {
      width: '100%'
    },
    onSubmit: function onSubmit() {
      return applyLocalFilters();
    },
    label: t("ES_COMMON_APPLY")
  }))));
};

var GetCell = function GetCell(value) {
  return /*#__PURE__*/React__default.createElement("span", {
    className: ""
  }, value);
};
var GetStatusCell = function GetStatusCell(value) {
  return value === "Active" ? /*#__PURE__*/React__default.createElement("span", {
    className: "sla-cell-success"
  }, value) : /*#__PURE__*/React__default.createElement("span", {
    className: "sla-cell-error"
  }, value);
};
var DesktopInbox = function DesktopInbox(_ref) {
  var isLoading = _ref.isLoading,
    data = _ref.data,
    t = _ref.t,
    onSearch = _ref.onSearch,
    parentRoute = _ref.parentRoute,
    title = _ref.title,
    iconName = _ref.iconName,
    links = _ref.links,
    globalSearch = _ref.globalSearch,
    searchFields = _ref.searchFields,
    searchParams = _ref.searchParams,
    onFilterChange = _ref.onFilterChange,
    pageSizeLimit = _ref.pageSizeLimit,
    totalRecords = _ref.totalRecords,
    currentPage = _ref.currentPage,
    onNextPage = _ref.onNextPage,
    onPrevPage = _ref.onPrevPage,
    onPageSizeChange = _ref.onPageSizeChange;
  var columns = React__default.useMemo(function () {
    return [{
      Header: t("EVENTS_EVENT_NAME_LABEL"),
      accessor: "name",
      Cell: function Cell(_ref2) {
        var row = _ref2.row;
        return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("span", {
          className: "link"
        }, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
          to: parentRoute + "/event/inbox/event-details/" + row.original.id
        }, row.original["name"])));
      }
    }, {
      Header: t("EVENTS_EVENT_CATEGORY_LABEL"),
      accessor: function accessor(row) {
        return GetCell(row !== null && row !== void 0 && row.eventCategory ? t("MSEVA_EVENTCATEGORIES_" + (row === null || row === void 0 ? void 0 : row.eventCategory)) : "");
      }
    }, {
      Header: t("EVENTS_START_DATE_LABEL"),
      accessor: function accessor(row) {
        var _row$eventDetails, _row$eventDetails2;
        return row !== null && row !== void 0 && (_row$eventDetails = row.eventDetails) !== null && _row$eventDetails !== void 0 && _row$eventDetails.fromDate ? GetCell(format(new Date(row === null || row === void 0 ? void 0 : (_row$eventDetails2 = row.eventDetails) === null || _row$eventDetails2 === void 0 ? void 0 : _row$eventDetails2.fromDate), 'dd/MM/yyyy')) : "";
      }
    }, {
      Header: t("EVENTS_END_DATE_LABEL"),
      accessor: function accessor(row) {
        var _row$eventDetails3, _row$eventDetails4;
        return row !== null && row !== void 0 && (_row$eventDetails3 = row.eventDetails) !== null && _row$eventDetails3 !== void 0 && _row$eventDetails3.toDate ? GetCell(format(new Date(row === null || row === void 0 ? void 0 : (_row$eventDetails4 = row.eventDetails) === null || _row$eventDetails4 === void 0 ? void 0 : _row$eventDetails4.toDate), "dd/MM/yyyy")) : "";
      }
    }, {
      Header: t("EVENTS_POSTEDBY_LABEL"),
      accessor: function accessor(row) {
        var _row$user;
        return GetCell((row === null || row === void 0 ? void 0 : (_row$user = row.user) === null || _row$user === void 0 ? void 0 : _row$user.name) || "");
      }
    }, {
      Header: t("EVENTS_STATUS_LABEL"),
      accessor: function accessor(row) {
        return GetStatusCell(t(row === null || row === void 0 ? void 0 : row.status));
      }
    }];
  });
  var result;
  if (isLoading) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  } else if ((data === null || data === void 0 ? void 0 : data.length) > 0) {
    result = /*#__PURE__*/React__default.createElement(ApplicationTable, {
      t: t,
      data: data,
      columns: columns,
      globalSearch: globalSearch,
      onSearch: searchParams,
      pageSizeLimit: pageSizeLimit,
      totalRecords: totalRecords,
      currentPage: currentPage,
      onNextPage: onNextPage,
      onPrevPage: onPrevPage,
      onPageSizeChange: onPageSizeChange,
      getCellProps: function getCellProps(cellInfo) {
        return {
          style: {
            minWidth: cellInfo.column.Header === t("ES_INBOX_APPLICATION_NO") ? "240px" : "",
            padding: "20px 18px",
            fontSize: "16px"
          }
        };
      }
    });
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "inbox-container"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filters-container"
  }, /*#__PURE__*/React__default.createElement(EventLink, {
    title: title,
    icon: iconName,
    links: links
  }), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(Filter, {
    onFilterChange: onFilterChange,
    searchParams: searchParams
  }))), /*#__PURE__*/React__default.createElement("div", {
    style: {
      flex: 1
    }
  }, /*#__PURE__*/React__default.createElement(Search, {
    t: t,
    onSearch: onSearch,
    type: "desktop",
    searchFields: searchFields,
    isInboxPage: true,
    searchParams: searchParams
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "result",
    style: {
      marginLeft: "24px",
      flex: 1
    }
  }, result)));
};

var ApplicationCard = function ApplicationCard(_ref) {
  var searchFields = _ref.searchFields,
    searchParams = _ref.searchParams,
    onFilterChange = _ref.onFilterChange,
    onSearch = _ref.onSearch,
    t = _ref.t,
    data = _ref.data,
    serviceRequestIdKey = _ref.serviceRequestIdKey;
  var _useState = React.useState(""),
    type = _useState[0],
    setType = _useState[1];
  var _useState2 = React.useState(false),
    popup = _useState2[0],
    setPopup = _useState2[1];
  var _useState3 = React.useState(searchParams),
    params = _useState3[0],
    setParams = _useState3[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var history = reactRouterDom.useHistory();
  React.useEffect(function () {
    if (type) setPopup(true);
  }, [type]);
  var handlePopupClose = function handlePopupClose() {
    setPopup(false);
    setParams(searchParams);
  };
  var result;
  if ((data === null || data === void 0 ? void 0 : data.length) === 0) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
      style: {
        marginTop: 20
      }
    }, t("ES_NO_EVENTS").split("\\n").map(function (text, index) {
      return /*#__PURE__*/React__default.createElement("p", {
        key: index,
        style: {
          textAlign: "center"
        }
      }, text);
    }));
  } else if (data && (data === null || data === void 0 ? void 0 : data.length) > 0) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.DetailsCard, {
      data: data,
      linkPrefix: '/digit-ui/employee/engagement/event/inbox/event-details/',
      serviceRequestIdKey: serviceRequestIdKey
    });
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: "searchBox"
  }, onSearch && /*#__PURE__*/React__default.createElement(digitUiReactComponents.SearchAction, {
    text: "SEARCH",
    handleActionClick: function handleActionClick() {
      setType("SEARCH");
      setPopup(true);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.FilterAction, {
    text: "FILTER",
    handleActionClick: function handleActionClick() {
      setType("FILTER");
      setPopup(true);
    }
  })), result, popup && /*#__PURE__*/React__default.createElement(digitUiReactComponents.PopUp, null, type === "FILTER" && /*#__PURE__*/React__default.createElement("div", {
    className: "popup-module"
  }, /*#__PURE__*/React__default.createElement(Filter, {
    onFilterChange: onFilterChange,
    onClose: handlePopupClose,
    onSearch: onSearch,
    type: "mobile",
    searchParams: params
  })), type === "SEARCH" && /*#__PURE__*/React__default.createElement("div", {
    className: "popup-module"
  }, /*#__PURE__*/React__default.createElement(Search, {
    t: t,
    type: "mobile",
    onClose: handlePopupClose,
    onSearch: onSearch,
    searchParams: searchParams,
    searchFields: searchFields
  }))));
};

var GetStatusCell$1 = function GetStatusCell(value) {
  return value === "Active" ? /*#__PURE__*/React__default.createElement("span", {
    className: "sla-cell-success"
  }, value) : /*#__PURE__*/React__default.createElement("span", {
    className: "sla-cell-error"
  }, value);
};
var MobileInbox = function MobileInbox(_ref) {
  var data = _ref.data,
    t = _ref.t,
    title = _ref.title,
    iconName = _ref.iconName,
    links = _ref.links,
    searchFields = _ref.searchFields,
    searchParams = _ref.searchParams,
    onFilterChange = _ref.onFilterChange,
    onSearch = _ref.onSearch,
    isLoading = _ref.isLoading;
  var getData = function getData() {
    return data === null || data === void 0 ? void 0 : data.filter(function (event) {
      var _searchParams$eventSt, _searchParams$eventSt2, _event$name, _searchParams$eventNa, _searchParams$ulb, _searchParams$ulb2, _searchParams$eventCa, _searchParams$range, _event$eventDetails, _searchParams$range2, _searchParams$range3, _event$eventDetails2, _searchParams$range4;
      return ((searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt = searchParams.eventStatus) === null || _searchParams$eventSt === void 0 ? void 0 : _searchParams$eventSt.length) > 0 ? searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt2 = searchParams.eventStatus) === null || _searchParams$eventSt2 === void 0 ? void 0 : _searchParams$eventSt2.includes(event.status) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.eventName ? (_event$name = event.name) === null || _event$name === void 0 ? void 0 : _event$name.toUpperCase().startsWith(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventNa = searchParams.eventName) === null || _searchParams$eventNa === void 0 ? void 0 : _searchParams$eventNa.toUpperCase()) : true) && (searchParams !== null && searchParams !== void 0 && (_searchParams$ulb = searchParams.ulb) !== null && _searchParams$ulb !== void 0 && _searchParams$ulb.code ? event.tenantId === (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$ulb2 = searchParams.ulb) === null || _searchParams$ulb2 === void 0 ? void 0 : _searchParams$ulb2.code) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.eventCategory ? event.eventCategory === (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventCa = searchParams.eventCategory) === null || _searchParams$eventCa === void 0 ? void 0 : _searchParams$eventCa.code) : true) && (isValid(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range = searchParams.range) === null || _searchParams$range === void 0 ? void 0 : _searchParams$range.startDate) ? ((_event$eventDetails = event.eventDetails) === null || _event$eventDetails === void 0 ? void 0 : _event$eventDetails.fromDate) >= new Date(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range2 = searchParams.range) === null || _searchParams$range2 === void 0 ? void 0 : _searchParams$range2.startDate).getTime() : true) && (isValid(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range3 = searchParams.range) === null || _searchParams$range3 === void 0 ? void 0 : _searchParams$range3.endDate) ? ((_event$eventDetails2 = event.eventDetails) === null || _event$eventDetails2 === void 0 ? void 0 : _event$eventDetails2.toDate) <= new Date(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range4 = searchParams.range) === null || _searchParams$range4 === void 0 ? void 0 : _searchParams$range4.endDate).getTime() : true);
    }).map(function (event) {
      var _event$eventDetails3, _event$eventDetails4, _event$user, _ref2;
      return _ref2 = {}, _ref2["applicationNo"] = event === null || event === void 0 ? void 0 : event.id, _ref2[t("EVENTS_EVENT_NAME_LABEL")] = event === null || event === void 0 ? void 0 : event.name, _ref2[t("EVENTS_EVENT_CATEGORY_LABEL")] = t("MSEVA_EVENTCATEGORIES_" + (event === null || event === void 0 ? void 0 : event.eventCategory)), _ref2[t("EVENTS_START_DATE_LABEL")] = format(new Date(event === null || event === void 0 ? void 0 : (_event$eventDetails3 = event.eventDetails) === null || _event$eventDetails3 === void 0 ? void 0 : _event$eventDetails3.fromDate), 'dd/MM/yyyy'), _ref2[t("EVENTS_END_DATE_LABEL")] = format(new Date(event === null || event === void 0 ? void 0 : (_event$eventDetails4 = event.eventDetails) === null || _event$eventDetails4 === void 0 ? void 0 : _event$eventDetails4.toDate), 'dd/MM/yyyy'), _ref2[t("EVENTS_POSTEDBY_LABEL")] = event === null || event === void 0 ? void 0 : (_event$user = event.user) === null || _event$user === void 0 ? void 0 : _event$user.name, _ref2[t("EVENTS_STATUS_LABEL")] = GetStatusCell$1(t(event === null || event === void 0 ? void 0 : event.status)), _ref2;
    });
  };
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      padding: 0
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "inbox-container"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filters-container"
  }, /*#__PURE__*/React__default.createElement(EventLink, {
    title: title,
    icon: iconName,
    links: links
  }), /*#__PURE__*/React__default.createElement(ApplicationCard, {
    t: t,
    data: getData(),
    onFilterChange: onFilterChange,
    isLoading: isLoading,
    onSearch: onSearch,
    searchParams: searchParams,
    searchFields: searchFields,
    serviceRequestIdKey: "applicationNo"
  }))));
};

var Inbox = function Inbox(_ref) {
  var _searchParams$ulb, _React$createElement;
  var tenants = _ref.tenants,
    parentRoute = _ref.parentRoute;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  Digit.SessionStorage.set("ENGAGEMENT_TENANTS", tenants);
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useState = React.useState(10),
    pageSize = _useState[0],
    setPageSize = _useState[1];
  var _useState2 = React.useState(0),
    pageOffset = _useState2[0],
    setPageOffset = _useState2[1];
  var _useState3 = React.useState({
      eventStatus: [],
      range: {
        startDate: null,
        endDate: new Date(""),
        title: ""
      },
      ulb: tenants === null || tenants === void 0 ? void 0 : tenants.find(function (tenant) {
        return (tenant === null || tenant === void 0 ? void 0 : tenant.code) === tenantId;
      })
    }),
    searchParams = _useState3[0],
    setSearchParams = _useState3[1];
  var isMobile = window.Digit.Utils.browser.isMobile();
  var getSearchFields = function getSearchFields() {
    return [{
      label: t("EVENTS_ULB_LABEL"),
      name: "ulb",
      type: "ulb"
    }, {
      label: t("EVENTS_NAME_LABEL"),
      name: "eventName"
    }];
  };
  var links = [{
    text: t("ES_TITLE_NEW_EVENTS"),
    link: "/digit-ui/employee/engagement/event/inbox/new-event"
  }];
  var _Digit$Hooks$events$u = Digit.Hooks.events.useInbox(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$ulb = searchParams.ulb) === null || _searchParams$ulb === void 0 ? void 0 : _searchParams$ulb.code, {}, {
      eventTypes: "EVENTSONGROUND",
      limit: pageSize,
      offset: pageOffset
    }, {
      select: function select(data) {
        return {
          events: data === null || data === void 0 ? void 0 : data.events,
          totalCount: data === null || data === void 0 ? void 0 : data.totalCount
        };
      }
    }),
    data = _Digit$Hooks$events$u.data,
    isLoading = _Digit$Hooks$events$u.isLoading;
  var onSearch = function onSearch(params) {
    var updatedParams = _extends({}, params);
    if (!(params !== null && params !== void 0 && params.ulb)) {
      updatedParams = _extends({}, params, {
        ulb: {
          code: tenantId
        }
      });
    }
    setSearchParams(_extends({}, searchParams, updatedParams));
  };
  var handleFilterChange = function handleFilterChange(data) {
    setSearchParams(_extends({}, searchParams, data));
  };
  var globalSearch = function globalSearch(rows, columnIds) {
    return rows === null || rows === void 0 ? void 0 : rows.filter(function (row) {
      var _searchParams$eventSt, _searchParams$eventSt2, _row$original, _row$original2, _row$original2$name, _searchParams$ulb2, _searchParams$ulb3, _searchParams$eventCa, _searchParams$range, _row$original$eventDe, _searchParams$range2, _searchParams$range3, _row$original$eventDe2, _searchParams$range4;
      return ((searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt = searchParams.eventStatus) === null || _searchParams$eventSt === void 0 ? void 0 : _searchParams$eventSt.length) > 0 ? searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt2 = searchParams.eventStatus) === null || _searchParams$eventSt2 === void 0 ? void 0 : _searchParams$eventSt2.includes((_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.status) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.eventName ? (_row$original2 = row.original) === null || _row$original2 === void 0 ? void 0 : (_row$original2$name = _row$original2.name) === null || _row$original2$name === void 0 ? void 0 : _row$original2$name.toUpperCase().startsWith(searchParams === null || searchParams === void 0 ? void 0 : searchParams.eventName.toUpperCase()) : true) && (searchParams !== null && searchParams !== void 0 && (_searchParams$ulb2 = searchParams.ulb) !== null && _searchParams$ulb2 !== void 0 && _searchParams$ulb2.code ? row.original.tenantId === (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$ulb3 = searchParams.ulb) === null || _searchParams$ulb3 === void 0 ? void 0 : _searchParams$ulb3.code) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.eventCategory ? row.original.eventCategory === (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventCa = searchParams.eventCategory) === null || _searchParams$eventCa === void 0 ? void 0 : _searchParams$eventCa.code) : true) && (isValid(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range = searchParams.range) === null || _searchParams$range === void 0 ? void 0 : _searchParams$range.startDate) ? ((_row$original$eventDe = row.original.eventDetails) === null || _row$original$eventDe === void 0 ? void 0 : _row$original$eventDe.fromDate) >= new Date(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range2 = searchParams.range) === null || _searchParams$range2 === void 0 ? void 0 : _searchParams$range2.startDate).getTime() : true) && (isValid(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range3 = searchParams.range) === null || _searchParams$range3 === void 0 ? void 0 : _searchParams$range3.endDate) ? ((_row$original$eventDe2 = row.original.eventDetails) === null || _row$original$eventDe2 === void 0 ? void 0 : _row$original$eventDe2.toDate) <= new Date(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range4 = searchParams.range) === null || _searchParams$range4 === void 0 ? void 0 : _searchParams$range4.endDate).getTime() : true);
    });
  };
  var fetchNextPage = React.useCallback(function () {
    setPageOffset(function (prevPageOffSet) {
      return parseInt(prevPageOffSet) + parseInt(pageSize);
    });
  }, [pageSize]);
  var fetchPrevPage = React.useCallback(function () {
    setPageOffset(function (prevPageOffSet) {
      return parseInt(prevPageOffSet) - parseInt(pageSize);
    });
  }, [pageSize]);
  var handlePageSizeChange = function handlePageSizeChange(e) {
    setPageSize(function (prevPageSize) {
      return e.target.value;
    });
  };
  if (isMobile) {
    return /*#__PURE__*/React__default.createElement(MobileInbox, {
      data: data === null || data === void 0 ? void 0 : data.events,
      searchParams: searchParams,
      searchFields: getSearchFields(),
      t: t,
      onFilterChange: handleFilterChange,
      onSearch: onSearch,
      isLoading: isLoading,
      title: "EVENTS_EVENTS_HEADER",
      iconName: "calender",
      links: links
    });
  }
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("EVENTS_EVENTS_HEADER"), Number(data === null || data === void 0 ? void 0 : data.totalCount) ? /*#__PURE__*/React__default.createElement("p", {
    className: "inbox-count"
  }, Number(data === null || data === void 0 ? void 0 : data.totalCount)) : null), /*#__PURE__*/React__default.createElement(DesktopInbox, (_React$createElement = {
    t: t,
    data: data === null || data === void 0 ? void 0 : data.events,
    links: links,
    parentRoute: parentRoute,
    searchParams: searchParams,
    onSearch: onSearch,
    globalSearch: globalSearch,
    searchFields: getSearchFields(),
    onFilterChange: handleFilterChange,
    pageSizeLimit: pageSize,
    totalRecords: data === null || data === void 0 ? void 0 : data.totalCount,
    title: "EVENTS_EVENTS_HEADER",
    iconName: "calender"
  }, _React$createElement["links"] = links, _React$createElement.currentPage = parseInt(pageOffset / pageSize), _React$createElement.onNextPage = fetchNextPage, _React$createElement.onPrevPage = fetchPrevPage, _React$createElement.onPageSizeChange = handlePageSizeChange, _React$createElement)));
};

var ApplicationTable$1 = function ApplicationTable(_ref) {
  var t = _ref.t,
    data = _ref.data,
    columns = _ref.columns,
    globalSearch = _ref.globalSearch,
    onSearch = _ref.onSearch,
    getCellProps = _ref.getCellProps,
    pageSizeLimit = _ref.pageSizeLimit,
    totalRecords = _ref.totalRecords,
    currentPage = _ref.currentPage,
    onNextPage = _ref.onNextPage,
    onPrevPage = _ref.onPrevPage,
    onPageSizeChange = _ref.onPageSizeChange;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Table, {
    t: t,
    data: data,
    columns: columns,
    onSearch: onSearch,
    globalSearch: globalSearch,
    manualGlobalFilter: true,
    manualPagination: true,
    pageSizeLimit: pageSizeLimit,
    getCellProps: getCellProps,
    totalRecords: totalRecords,
    currentPage: currentPage,
    onNextPage: onNextPage,
    onPrevPage: onPrevPage,
    onPageSizeChange: onPageSizeChange
  });
};

var DropdownUlb$1 = function DropdownUlb(_ref) {
  var ulb = _ref.ulb,
    onAssignmentChange = _ref.onAssignmentChange,
    value = _ref.value,
    t = _ref.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
    option: ulb,
    optionKey: "code",
    selected: value,
    select: onAssignmentChange,
    t: t
  });
};

var Search$1 = function Search(_ref) {
  var onSearch = _ref.onSearch,
    searchParams = _ref.searchParams,
    searchFields = _ref.searchFields,
    type = _ref.type,
    onClose = _ref.onClose,
    isInboxPage = _ref.isInboxPage,
    t = _ref.t;
  var _useForm = reactHookForm.useForm({
      defaultValues: searchParams
    }),
    handleSubmit = _useForm.handleSubmit,
    formState = _useForm.formState,
    reset = _useForm.reset,
    control = _useForm.control;
  var mobileView = innerWidth <= 640;
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  }).sort(alphabeticalSortFunctionForTenantsBasedOnName);
  var getFields = function getFields(input) {
    switch (input.type) {
      case "ulb":
        return /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          rules: {
            required: true
          },
          render: function render(props) {
            return /*#__PURE__*/React__default.createElement(DropdownUlb$1, {
              onAssignmentChange: props.onChange,
              value: props.value,
              ulb: userUlbs,
              t: t
            });
          },
          name: input.name,
          control: control,
          defaultValue: null
        });
      case "range":
        return /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          render: function render(_ref2) {
            var value = _ref2.value,
              onChange = _ref2.onChange;
            return /*#__PURE__*/React__default.createElement(digitUiReactComponents.DateRange, {
              t: t,
              values: value,
              onFilterChange: function onFilterChange(value) {
                return onChange(value.range);
              },
              labelClass: "filter-label"
            });
          },
          name: input.name,
          control: control,
          defaultValue: null
        });
      default:
        return /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          render: function render(props) {
            return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
              onChange: props.onChange,
              value: props.value
            });
          },
          name: input.name,
          control: control,
          defaultValue: null
        });
    }
  };
  var onSubmitInput = function onSubmitInput(data) {

    onSearch(data);
    if (type === "mobile") {
      onClose();
    }
  };
  var clearSearch = function clearSearch() {
    reset({
      ulb: null,
      name: ''
    });
    onSearch({
      ulb: null,
      name: ''
    });
  };
  var clearAll = function clearAll(mobileView) {
    var mobileViewStyles = mobileView ? {
      margin: 0
    } : {};
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.LinkLabel, {
      style: _extends({
        display: "inline"
      }, mobileViewStyles),
      onClick: clearSearch
    }, t("ES_COMMON_CLEAR_SEARCH"));
  };
  return /*#__PURE__*/React__default.createElement("form", {
    onSubmit: handleSubmit(onSubmitInput)
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "search-container",
    style: {
      width: "auto",
      marginLeft: isInboxPage ? "24px" : "revert"
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "search-complaint-container"
  }, (type === "mobile" || mobileView) && /*#__PURE__*/React__default.createElement("div", {
    className: "complaint-header"
  }, /*#__PURE__*/React__default.createElement("h2", null, t("ES_COMMON_SEARCH_BY")), /*#__PURE__*/React__default.createElement("span", {
    onClick: onClose
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null))), /*#__PURE__*/React__default.createElement("div", {
    className: "complaint-input-container for-pt " + (!isInboxPage ? "for-search" : ""),
    style: {
      width: "100%"
    }
  }, searchFields === null || searchFields === void 0 ? void 0 : searchFields.map(function (input, index) {
    var _formState$dirtyField, _formState$errors, _formState$errors$inp;
    return /*#__PURE__*/React__default.createElement("div", {
      key: input.name,
      className: "input-fields"
    }, /*#__PURE__*/React__default.createElement("span", {
      className: "mobile-input"
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Label, null, t(input.label) + (" " + (input.isMendatory ? "*" : ""))), getFields(input)), formState !== null && formState !== void 0 && (_formState$dirtyField = formState.dirtyFields) !== null && _formState$dirtyField !== void 0 && _formState$dirtyField[input.name] ? /*#__PURE__*/React__default.createElement("span", {
      style: {
        fontWeight: "700",
        color: "rgba(212, 53, 28)",
        paddingLeft: "8px",
        marginTop: "-20px",
        fontSize: "12px"
      },
      className: "inbox-search-form-error"
    }, formState === null || formState === void 0 ? void 0 : (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$inp = _formState$errors[input.name]) === null || _formState$errors$inp === void 0 ? void 0 : _formState$errors$inp.message) : null);
  }), type === "desktop" && !mobileView && /*#__PURE__*/React__default.createElement("div", {
    style: {
      maxWidth: "unset",
      marginLeft: "unset",
      marginTop: "55px"
    },
    className: "search-submit-wrapper"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    className: "submit-bar-search",
    label: t("ES_COMMON_SEARCH")
    ,
    submit: true
  }), /*#__PURE__*/React__default.createElement("div", null, clearAll()))))), (type === "mobile" || mobileView) && /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, {
    className: "clear-search-container"
  }, /*#__PURE__*/React__default.createElement("button", {
    className: "clear-search",
    style: {
      flex: 1
    }
  }, clearAll(mobileView)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    disabled: !!Object.keys(formState.errors).length,
    label: t("ES_COMMON_SEARCH"),
    style: {
      flex: 1
    },
    submit: true
  })));
};

var EventLink$1 = function EventLink(_ref) {
  var _ref$title = _ref.title,
    title = _ref$title === void 0 ? "CS_HEADER_PUBLIC_BRDCST" : _ref$title,
    links = _ref.links;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var GetLogo = function GetLogo() {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "header",
      style: {
        justifyContent: "flex-start"
      }
    }, /*#__PURE__*/React__default.createElement("span", {
      className: "logo",
      style: {
        backgroundColor: "#fff"
      }
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.PMBIcon, null)), " ", /*#__PURE__*/React__default.createElement("span", {
      className: "text"
    }, t(title)));
  };
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
    className: "employeeCard filter inboxLinks"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "complaint-links-container"
  }, GetLogo(), /*#__PURE__*/React__default.createElement("div", {
    className: "body"
  }, links.map(function (_ref2, index) {
    var link = _ref2.link,
      text = _ref2.text,
      _ref2$hyperlink = _ref2.hyperlink,
      hyperlink = _ref2$hyperlink === void 0 ? false : _ref2$hyperlink;
    return /*#__PURE__*/React__default.createElement("span", {
      className: "link",
      key: index
    }, hyperlink ? /*#__PURE__*/React__default.createElement("a", {
      href: link
    }, text) : /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
      to: link
    }, text));
  }))));
};

var StatusCount$1 = function StatusCount(_ref) {
  var _searchParams$eventSt, _searchParams$eventSt2;
  var status = _ref.status,
    onAssignmentChange = _ref.onAssignmentChange,
    searchParams = _ref.searchParams;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.CheckBox, {
    onChange: function onChange(e) {
      return onAssignmentChange(e, status);
    },
    checked: (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt = searchParams.eventStatus) === null || _searchParams$eventSt === void 0 ? void 0 : (_searchParams$eventSt2 = _searchParams$eventSt.filter(function (event) {
      return event === status;
    })) === null || _searchParams$eventSt2 === void 0 ? void 0 : _searchParams$eventSt2.length) > 0 ? true : false,
    label: t(status),
    pageType: 'employee'
  });
};

var statuses$1 = ["ACTIVE", "INACTIVE"];
var Status$1 = function Status(_ref) {
  var onAssignmentChange = _ref.onAssignmentChange,
    searchParams = _ref.searchParams;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "status-container"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filter-label"
  }, t("ES_INBOX_STATUS")), statuses$1 === null || statuses$1 === void 0 ? void 0 : statuses$1.map(function (status, key) {
    return /*#__PURE__*/React__default.createElement(StatusCount$1, {
      key: key,
      status: status,
      onAssignmentChange: onAssignmentChange,
      searchParams: searchParams
    });
  }));
};

var Filter$1 = function Filter(_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? "desktop" : _ref$type,
    onClose = _ref.onClose,
    onFilterChange = _ref.onFilterChange,
    searchParams = _ref.searchParams;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useState = React.useState(function () {
      return _extends({}, searchParams);
    }),
    localSearchParams = _useState[0],
    setLocalSearchParams = _useState[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var state = tenantId === null || tenantId === void 0 ? void 0 : tenantId.split('.')[0];
  var _Digit$Hooks$useCommo = Digit.Hooks.useCommonMDMS(state, "mseva", ["EventCategories"]),
    isLoading = _Digit$Hooks$useCommo.isLoading;
  var clearAll = function clearAll() {
    setLocalSearchParams({
      eventCategory: null,
      eventStatus: [],
      range: {
        startDate: null,
        endDate: new Date(""),
        title: ""
      }
    });
    onFilterChange({
      eventCategory: null,
      eventStatus: [],
      range: {
        startDate: null,
        endDate: new Date(""),
        title: ""
      }
    });
    onClose === null || onClose === void 0 ? void 0 : onClose();
  };
  var applyLocalFilters = function applyLocalFilters() {
    onFilterChange(localSearchParams);
    onClose === null || onClose === void 0 ? void 0 : onClose();
  };
  var handleChange = React.useCallback(function (data) {
    setLocalSearchParams(function (prevLocalSearchParams) {
      return _extends({}, prevLocalSearchParams, data);
    });
  }, []);
  var onStatusChange = function onStatusChange(e, type) {
    var _localSearchParams$ev;
    if (e.target.checked) handleChange({
      eventStatus: [].concat((localSearchParams === null || localSearchParams === void 0 ? void 0 : localSearchParams.eventStatus) || [], [type])
    });else handleChange({
      eventStatus: localSearchParams === null || localSearchParams === void 0 ? void 0 : (_localSearchParams$ev = localSearchParams.eventStatus) === null || _localSearchParams$ev === void 0 ? void 0 : _localSearchParams$ev.filter(function (status) {
        return status !== type;
      })
    });
  };
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "filter"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filter-card"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "heading"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filter-label"
  }, t("ES_COMMON_FILTER_BY"), ":"), /*#__PURE__*/React__default.createElement("div", {
    className: "clearAll",
    onClick: clearAll
  }, t("ES_COMMON_CLEAR_ALL")), type === "desktop" && /*#__PURE__*/React__default.createElement("span", {
    className: "clear-search",
    onClick: clearAll
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.RefreshIcon, null)), type === "mobile" && /*#__PURE__*/React__default.createElement("span", {
    onClick: onClose
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.DateRange, {
    t: t,
    values: localSearchParams === null || localSearchParams === void 0 ? void 0 : localSearchParams.range,
    onFilterChange: handleChange,
    labelClass: "filter-label"
  }), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(Status$1, {
    onAssignmentChange: onStatusChange,
    searchParams: localSearchParams
  })), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    style: {
      width: '100%'
    },
    onSubmit: function onSubmit() {
      return applyLocalFilters();
    },
    label: t("ES_COMMON_APPLY")
  }))));
};

var GetCell$1 = function GetCell(value) {
  return /*#__PURE__*/React__default.createElement("span", {
    className: ""
  }, value);
};
var GetStatusCell$2 = function GetStatusCell(value) {
  return value === "Active" ? /*#__PURE__*/React__default.createElement("span", {
    className: "sla-cell-success"
  }, value) : /*#__PURE__*/React__default.createElement("span", {
    className: "sla-cell-error"
  }, value);
};
var DesktopInbox$1 = function DesktopInbox(_ref) {
  var isLoading = _ref.isLoading,
    data = _ref.data,
    t = _ref.t,
    onSearch = _ref.onSearch,
    parentRoute = _ref.parentRoute,
    title = _ref.title,
    iconName = _ref.iconName,
    links = _ref.links,
    globalSearch = _ref.globalSearch,
    searchFields = _ref.searchFields,
    searchParams = _ref.searchParams,
    onFilterChange = _ref.onFilterChange,
    pageSizeLimit = _ref.pageSizeLimit,
    totalRecords = _ref.totalRecords,
    currentPage = _ref.currentPage,
    onNextPage = _ref.onNextPage,
    onPrevPage = _ref.onPrevPage,
    onPageSizeChange = _ref.onPageSizeChange;
  var columns = React__default.useMemo(function () {
    return [{
      Header: t("EVENTS_MESSAGE_LABEL"),
      accessor: "name",
      Cell: function Cell(_ref2) {
        var row = _ref2.row;
        return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("span", {
          className: "link"
        }, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
          to: parentRoute + "/messages/inbox/details/" + row.original.id
        }, row.original["name"])));
      }
    }, {
      Header: t("EVENTS_POSTING_DATE_LABEL"),
      accessor: function accessor(row) {
        var _row$auditDetails, _row$auditDetails2;
        return row !== null && row !== void 0 && (_row$auditDetails = row.auditDetails) !== null && _row$auditDetails !== void 0 && _row$auditDetails.createdTime ? GetCell$1(format(new Date(row === null || row === void 0 ? void 0 : (_row$auditDetails2 = row.auditDetails) === null || _row$auditDetails2 === void 0 ? void 0 : _row$auditDetails2.createdTime), 'dd/MM/yyyy')) : "";
      }
    }, {
      Header: t("EVENTS_START_DATE_LABEL"),
      accessor: function accessor(row) {
        var _row$eventDetails, _row$eventDetails2;
        return row !== null && row !== void 0 && (_row$eventDetails = row.eventDetails) !== null && _row$eventDetails !== void 0 && _row$eventDetails.fromDate ? GetCell$1(format(new Date(row === null || row === void 0 ? void 0 : (_row$eventDetails2 = row.eventDetails) === null || _row$eventDetails2 === void 0 ? void 0 : _row$eventDetails2.fromDate), 'dd/MM/yyyy')) : "";
      }
    }, {
      Header: t("EVENTS_END_DATE_LABEL"),
      accessor: function accessor(row) {
        var _row$eventDetails3, _row$eventDetails4;
        return row !== null && row !== void 0 && (_row$eventDetails3 = row.eventDetails) !== null && _row$eventDetails3 !== void 0 && _row$eventDetails3.toDate ? GetCell$1(format(new Date(row === null || row === void 0 ? void 0 : (_row$eventDetails4 = row.eventDetails) === null || _row$eventDetails4 === void 0 ? void 0 : _row$eventDetails4.toDate), "dd/MM/yyyy")) : "";
      }
    }, {
      Header: t("EVENTS_POSTEDBY_LABEL"),
      accessor: function accessor(row) {
        var _row$user;
        return GetCell$1((row === null || row === void 0 ? void 0 : (_row$user = row.user) === null || _row$user === void 0 ? void 0 : _row$user.name) || "");
      }
    }, {
      Header: t("EVENTS_STATUS_LABEL"),
      accessor: function accessor(row) {
        return GetStatusCell$2(t(row === null || row === void 0 ? void 0 : row.status));
      }
    }];
  });
  var result;
  if (isLoading) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  } else if ((data === null || data === void 0 ? void 0 : data.length) > 0) {
    result = /*#__PURE__*/React__default.createElement(ApplicationTable$1, {
      t: t,
      data: data,
      columns: columns,
      globalSearch: globalSearch,
      onSearch: searchParams,
      pageSizeLimit: pageSizeLimit,
      totalRecords: totalRecords,
      currentPage: currentPage,
      onNextPage: onNextPage,
      onPrevPage: onPrevPage,
      onPageSizeChange: onPageSizeChange,
      getCellProps: function getCellProps(cellInfo) {
        return {
          style: {
            minWidth: cellInfo.column.Header === t("ES_INBOX_APPLICATION_NO") ? "240px" : "",
            padding: "20px 18px",
            fontSize: "16px"
          }
        };
      }
    });
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "inbox-container"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filters-container"
  }, /*#__PURE__*/React__default.createElement(EventLink$1, {
    title: title,
    icon: iconName,
    links: links
  }), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(Filter$1, {
    onFilterChange: onFilterChange,
    searchParams: searchParams
  }))), /*#__PURE__*/React__default.createElement("div", {
    style: {
      flex: 1
    }
  }, /*#__PURE__*/React__default.createElement(Search$1, {
    t: t,
    onSearch: onSearch,
    type: "desktop",
    searchFields: searchFields,
    isInboxPage: true,
    searchParams: searchParams
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "result",
    style: {
      marginLeft: "24px",
      flex: 1
    }
  }, result)));
};

var ApplicationCard$1 = function ApplicationCard(_ref) {
  var searchFields = _ref.searchFields,
    searchParams = _ref.searchParams,
    onFilterChange = _ref.onFilterChange,
    onSearch = _ref.onSearch,
    t = _ref.t,
    data = _ref.data,
    responseData = _ref.responseData;
  var _useState = React.useState(""),
    type = _useState[0],
    setType = _useState[1];
  var _useState2 = React.useState(false),
    popup = _useState2[0],
    setPopup = _useState2[1];
  var _useState3 = React.useState(searchParams),
    params = _useState3[0],
    setParams = _useState3[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var history = reactRouterDom.useHistory();
  React.useEffect(function () {
    if (type) setPopup(true);
  }, [type]);
  var handlePopupClose = function handlePopupClose() {
    setPopup(false);
    setParams(searchParams);
  };
  var redirectToDetailsPage = function redirectToDetailsPage(data) {
    var details = responseData === null || responseData === void 0 ? void 0 : responseData.find(function (item) {
      var _item$user;
      return areEqual(item === null || item === void 0 ? void 0 : (_item$user = item.user) === null || _item$user === void 0 ? void 0 : _item$user.name, data["Posted By"]) && areEqual(item.name, data["Title"]);
    });
    if (details) {
      history.push("/digit-ui/employee/engagement/messages/inbox/details/" + (details === null || details === void 0 ? void 0 : details.id));
    }
  };
  var result;
  if ((data === null || data === void 0 ? void 0 : data.length) === 0) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
      style: {
        marginTop: 20
      }
    }, t("ES_NO_PUBLIC_MESSAGES").split("\\n").map(function (text, index) {
      return /*#__PURE__*/React__default.createElement("p", {
        key: index,
        style: {
          textAlign: "center"
        }
      }, text);
    }));
  } else if (data && (data === null || data === void 0 ? void 0 : data.length) > 0) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.DetailsCard, {
      data: data,
      handleSelect: function handleSelect() {},
      handleDetailCardClick: redirectToDetailsPage
    });
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: "searchBox"
  }, onSearch && /*#__PURE__*/React__default.createElement(digitUiReactComponents.SearchAction, {
    text: "SEARCH",
    handleActionClick: function handleActionClick() {
      setType("SEARCH");
      setPopup(true);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.FilterAction, {
    text: "FILTER",
    handleActionClick: function handleActionClick() {
      setType("FILTER");
      setPopup(true);
    }
  })), result, popup && /*#__PURE__*/React__default.createElement(digitUiReactComponents.PopUp, null, type === "FILTER" && /*#__PURE__*/React__default.createElement("div", {
    className: "popup-module"
  }, /*#__PURE__*/React__default.createElement(Filter$1, {
    onFilterChange: onFilterChange,
    onClose: handlePopupClose,
    onSearch: onSearch,
    type: "mobile",
    searchParams: params
  })), type === "SEARCH" && /*#__PURE__*/React__default.createElement("div", {
    className: "popup-module"
  }, /*#__PURE__*/React__default.createElement(Search$1, {
    t: t,
    type: "mobile",
    onClose: handlePopupClose,
    onSearch: onSearch,
    searchParams: searchParams,
    searchFields: searchFields
  }))));
};

var GetStatusCell$3 = function GetStatusCell(value) {
  return value === "Active" ? /*#__PURE__*/React__default.createElement("span", {
    className: "sla-cell-success"
  }, value) : /*#__PURE__*/React__default.createElement("span", {
    className: "sla-cell-error"
  }, value);
};
var MobileInbox$1 = function MobileInbox(_ref) {
  var data = _ref.data,
    t = _ref.t,
    title = _ref.title,
    iconName = _ref.iconName,
    links = _ref.links,
    searchFields = _ref.searchFields,
    searchParams = _ref.searchParams,
    onFilterChange = _ref.onFilterChange,
    onSearch = _ref.onSearch,
    isLoading = _ref.isLoading;
  var getData = function getData() {
    return data === null || data === void 0 ? void 0 : data.filter(function (event) {
      var _searchParams$eventSt, _searchParams$eventSt2, _event$name, _searchParams$eventNa, _searchParams$ulb, _searchParams$ulb2, _searchParams$eventCa, _searchParams$range, _event$eventDetails, _searchParams$range2, _searchParams$range3, _event$eventDetails2, _searchParams$range4;
      return ((searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt = searchParams.eventStatus) === null || _searchParams$eventSt === void 0 ? void 0 : _searchParams$eventSt.length) > 0 ? searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt2 = searchParams.eventStatus) === null || _searchParams$eventSt2 === void 0 ? void 0 : _searchParams$eventSt2.includes(event.status) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.eventName ? (_event$name = event.name) === null || _event$name === void 0 ? void 0 : _event$name.toUpperCase().startsWith(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventNa = searchParams.eventName) === null || _searchParams$eventNa === void 0 ? void 0 : _searchParams$eventNa.toUpperCase()) : true) && (searchParams !== null && searchParams !== void 0 && (_searchParams$ulb = searchParams.ulb) !== null && _searchParams$ulb !== void 0 && _searchParams$ulb.code ? event.tenantId === (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$ulb2 = searchParams.ulb) === null || _searchParams$ulb2 === void 0 ? void 0 : _searchParams$ulb2.code) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.eventCategory ? event.eventCategory === (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventCa = searchParams.eventCategory) === null || _searchParams$eventCa === void 0 ? void 0 : _searchParams$eventCa.code) : true) && (isValid(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range = searchParams.range) === null || _searchParams$range === void 0 ? void 0 : _searchParams$range.startDate) ? ((_event$eventDetails = event.eventDetails) === null || _event$eventDetails === void 0 ? void 0 : _event$eventDetails.fromDate) >= new Date(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range2 = searchParams.range) === null || _searchParams$range2 === void 0 ? void 0 : _searchParams$range2.startDate).getTime() : true) && (isValid(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range3 = searchParams.range) === null || _searchParams$range3 === void 0 ? void 0 : _searchParams$range3.endDate) ? ((_event$eventDetails2 = event.eventDetails) === null || _event$eventDetails2 === void 0 ? void 0 : _event$eventDetails2.toDate) <= new Date(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range4 = searchParams.range) === null || _searchParams$range4 === void 0 ? void 0 : _searchParams$range4.endDate).getTime() : true);
    }).map(function (event) {
      var _event$auditDetails, _event$eventDetails3, _event$eventDetails4, _event$user, _ref2;
      return _ref2 = {}, _ref2[t("PUBLIC_BRDCST_TITLE_LABEL")] = event === null || event === void 0 ? void 0 : event.name, _ref2[t("EVENTS_POSTING_DATE_LABEL")] = format(new Date(event === null || event === void 0 ? void 0 : (_event$auditDetails = event.auditDetails) === null || _event$auditDetails === void 0 ? void 0 : _event$auditDetails.createdTime), 'dd/MM/yyyy'), _ref2[t("EVENTS_START_DATE_LABEL")] = format(new Date(event === null || event === void 0 ? void 0 : (_event$eventDetails3 = event.eventDetails) === null || _event$eventDetails3 === void 0 ? void 0 : _event$eventDetails3.fromDate), 'dd/MM/yyyy'), _ref2[t("EVENTS_END_DATE_LABEL")] = format(new Date(event === null || event === void 0 ? void 0 : (_event$eventDetails4 = event.eventDetails) === null || _event$eventDetails4 === void 0 ? void 0 : _event$eventDetails4.toDate), 'dd/MM/yyyy'), _ref2[t("EVENTS_POSTEDBY_LABEL")] = event === null || event === void 0 ? void 0 : (_event$user = event.user) === null || _event$user === void 0 ? void 0 : _event$user.name, _ref2[t("EVENTS_STATUS_LABEL")] = GetStatusCell$3(t(event === null || event === void 0 ? void 0 : event.status)), _ref2;
    });
  };
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      padding: 0
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "inbox-container"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filters-container"
  }, /*#__PURE__*/React__default.createElement(EventLink$1, {
    title: title,
    icon: iconName,
    links: links
  }), /*#__PURE__*/React__default.createElement(ApplicationCard$1, {
    t: t,
    data: getData(),
    onFilterChange: onFilterChange
    ,
    isLoading: isLoading
    ,
    onSearch: onSearch
    ,
    searchParams: searchParams,
    searchFields: searchFields,
    responseData: data
  }))));
};

var Inbox$1 = function Inbox(_ref) {
  var _searchParams$ulb, _React$createElement;
  var tenants = _ref.tenants,
    parentRoute = _ref.parentRoute;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  Digit.SessionStorage.set("ENGAGEMENT_TENANTS", tenants);
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useState = React.useState(10),
    pageSize = _useState[0],
    setPageSize = _useState[1];
  var _useState2 = React.useState(0),
    pageOffset = _useState2[0],
    setPageOffset = _useState2[1];
  var _useState3 = React.useState({
      eventStatus: [],
      name: '',
      range: {
        startDate: null,
        endDate: new Date(""),
        title: ""
      },
      ulb: tenants === null || tenants === void 0 ? void 0 : tenants.find(function (tenant) {
        return (tenant === null || tenant === void 0 ? void 0 : tenant.code) === tenantId;
      })
    }),
    searchParams = _useState3[0],
    setSearchParams = _useState3[1];
  var isMobile = window.Digit.Utils.browser.isMobile();
  var _Digit$Hooks$events$u = Digit.Hooks.events.useInbox(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$ulb = searchParams.ulb) === null || _searchParams$ulb === void 0 ? void 0 : _searchParams$ulb.code, {}, {
      status: "ACTIVE,INACTIVE",
      eventTypes: "BROADCAST",
      limit: pageSize,
      offset: pageOffset
    }, {
      select: function select(data) {
        return {
          events: data === null || data === void 0 ? void 0 : data.events,
          totalCount: data === null || data === void 0 ? void 0 : data.totalCount
        };
      }
    }),
    data = _Digit$Hooks$events$u.data,
    isLoading = _Digit$Hooks$events$u.isLoading;
  var onSearch = function onSearch(params) {
    var updatedParams = _extends({}, params);
    if (!(params !== null && params !== void 0 && params.ulb)) {
      updatedParams = _extends({}, params, {
        ulb: {
          code: tenantId
        }
      });
    }
    setSearchParams(function (prevParams) {
      return _extends({}, prevParams, updatedParams);
    });
  };
  var handleFilterChange = function handleFilterChange(data) {
    setSearchParams(function (prevParams) {
      return _extends({}, prevParams, data);
    });
  };
  var globalSearch = function globalSearch(rows, columnIds) {
    return rows === null || rows === void 0 ? void 0 : rows.filter(function (row) {
      var _searchParams$eventSt, _searchParams$eventSt2, _row$original, _row$original2, _row$original2$name, _searchParams$ulb2, _searchParams$ulb3, _searchParams$eventCa, _searchParams$range, _row$original$eventDe, _searchParams$range2, _searchParams$range3, _row$original$eventDe2, _searchParams$range4;
      return ((searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt = searchParams.eventStatus) === null || _searchParams$eventSt === void 0 ? void 0 : _searchParams$eventSt.length) > 0 ? searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventSt2 = searchParams.eventStatus) === null || _searchParams$eventSt2 === void 0 ? void 0 : _searchParams$eventSt2.includes((_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.status) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.name ? (_row$original2 = row.original) === null || _row$original2 === void 0 ? void 0 : (_row$original2$name = _row$original2.name) === null || _row$original2$name === void 0 ? void 0 : _row$original2$name.toUpperCase().startsWith(searchParams === null || searchParams === void 0 ? void 0 : searchParams.name.toUpperCase()) : true) && (searchParams !== null && searchParams !== void 0 && (_searchParams$ulb2 = searchParams.ulb) !== null && _searchParams$ulb2 !== void 0 && _searchParams$ulb2.code ? row.original.tenantId === (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$ulb3 = searchParams.ulb) === null || _searchParams$ulb3 === void 0 ? void 0 : _searchParams$ulb3.code) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.eventCategory ? row.original.eventCategory === (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$eventCa = searchParams.eventCategory) === null || _searchParams$eventCa === void 0 ? void 0 : _searchParams$eventCa.code) : true) && (isValid(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range = searchParams.range) === null || _searchParams$range === void 0 ? void 0 : _searchParams$range.startDate) ? ((_row$original$eventDe = row.original.eventDetails) === null || _row$original$eventDe === void 0 ? void 0 : _row$original$eventDe.fromDate) >= new Date(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range2 = searchParams.range) === null || _searchParams$range2 === void 0 ? void 0 : _searchParams$range2.startDate).getTime() : true) && (isValid(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range3 = searchParams.range) === null || _searchParams$range3 === void 0 ? void 0 : _searchParams$range3.endDate) ? ((_row$original$eventDe2 = row.original.eventDetails) === null || _row$original$eventDe2 === void 0 ? void 0 : _row$original$eventDe2.toDate) <= new Date(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$range4 = searchParams.range) === null || _searchParams$range4 === void 0 ? void 0 : _searchParams$range4.endDate).getTime() : true);
    });
  };
  var getSearchFields = function getSearchFields() {
    return [{
      label: t("EVENTS_ULB_LABEL"),
      name: "ulb",
      type: "ulb"
    },
    {
      label: t("EVENTS_MESSAGE_LABEL"),
      name: "name"
    }];
  };
  var links = [{
    text: t("NEW_PUBLIC_MESSAGE_BUTTON_LABEL"),
    link: "/digit-ui/employee/engagement/messages/inbox/create"
  }];
  var fetchNextPage = React.useCallback(function () {
    setPageOffset(function (prevPageOffSet) {
      return parseInt(prevPageOffSet) + parseInt(pageSize);
    });
  }, [pageSize]);
  var fetchPrevPage = React.useCallback(function () {
    setPageOffset(function (prevPageOffSet) {
      return parseInt(prevPageOffSet) - parseInt(pageSize);
    });
  }, [pageSize]);
  var handlePageSizeChange = function handlePageSizeChange(e) {
    setPageSize(function (prevPageSize) {
      return e.target.value;
    });
  };
  if (isMobile) {
    return /*#__PURE__*/React__default.createElement(MobileInbox$1, {
      data: data === null || data === void 0 ? void 0 : data.events,
      searchParams: searchParams,
      searchFields: getSearchFields(),
      t: t,
      onFilterChange: handleFilterChange,
      onSearch: onSearch,
      isLoading: isLoading,
      title: "EVENTS_PUBLIC_MESSAGE_NOTICE_HEADER",
      iconName: "calender",
      links: links
    });
  }
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("EVENTS_PUBLIC_MESSAGE_NOTICE_HEADER"), Number(data === null || data === void 0 ? void 0 : data.length) ? /*#__PURE__*/React__default.createElement("p", {
    className: "inbox-count"
  }, Number(data === null || data === void 0 ? void 0 : data.length)) : null), /*#__PURE__*/React__default.createElement(DesktopInbox$1, (_React$createElement = {
    t: t,
    data: data === null || data === void 0 ? void 0 : data.events,
    links: links,
    parentRoute: parentRoute,
    searchParams: searchParams,
    onSearch: onSearch,
    globalSearch: globalSearch,
    searchFields: getSearchFields(),
    onFilterChange: handleFilterChange,
    pageSizeLimit: pageSize,
    totalRecords: data === null || data === void 0 ? void 0 : data.totalCount,
    currentPage: parseInt(pageOffset / pageSize),
    onNextPage: fetchNextPage,
    onPrevPage: fetchPrevPage,
    onPageSizeChange: handlePageSizeChange,
    title: "EVENTS_PUBLIC_MESSAGE_NOTICE_HEADER"
  }, _React$createElement["links"] = links, _React$createElement.isLoading = isLoading, _React$createElement)));
};

var config$1 = [{
  head: "",
  body: [{
    type: "form",
    withoutLabel: true,
    component: "MessageForm",
    nextStep: "",
    route: "",
    key: "messageData"
  }
  ]
}];

var NewEvents$1 = function NewEvents() {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_MUTATION_HAPPENED", false),
    setMutationHappened = _Digit$Hooks$useSessi[1];
  var _Digit$Hooks$useSessi2 = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_ERROR_DATA", false),
    clearError = _Digit$Hooks$useSessi2[2];
  var _Digit$Hooks$useSessi3 = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_MUTATION_SUCCESS_DATA", false),
    clearSuccessData = _Digit$Hooks$useSessi3[2];
  React.useEffect(function () {
    setMutationHappened(false);
    clearSuccessData();
    clearError();
  }, []);
  var onSubmit = function onSubmit(data) {
    var _data$tenantId, _convertDateToMaximum, _convertDateToMaximum2;
    var fromDate = data.fromDate,
      toDate = data.toDate,
      description = data.description,
      name = data.name,
      documents = data.documents;
    var details = {
      events: [{
        recepient: null,
        source: "WEBAPP",
        eventType: "BROADCAST",
        tenantId: data === null || data === void 0 ? void 0 : (_data$tenantId = data.tenantId) === null || _data$tenantId === void 0 ? void 0 : _data$tenantId.code,
        description: description,
        name: name,
        eventDetails: {
          documents: documents,
          fromDate: (_convertDateToMaximum = convertDateToMaximumPossibleValue(new Date("" + fromDate))) === null || _convertDateToMaximum === void 0 ? void 0 : _convertDateToMaximum.getTime(),
          toDate: (_convertDateToMaximum2 = convertDateToMaximumPossibleValue(new Date("" + toDate))) === null || _convertDateToMaximum2 === void 0 ? void 0 : _convertDateToMaximum2.getTime()
        }
      }]
    };
    history.push("/digit-ui/employee/engagement/messages/response", details);
  };
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("ADD_NEW_PUBLIC_MESSAGE")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    config: config$1,
    onSubmit: onSubmit,
    label: t("ACTION_ADD_NEW_MESSAGE")
  }));
};

var BannerPicker$1 = function BannerPicker(props) {
  var _props$data, _props$data$events, _props$data$events$;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Banner, {
    message: t(props.message),
    applicationNumber: props === null || props === void 0 ? void 0 : (_props$data = props.data) === null || _props$data === void 0 ? void 0 : (_props$data$events = _props$data.events) === null || _props$data$events === void 0 ? void 0 : (_props$data$events$ = _props$data$events[0]) === null || _props$data$events$ === void 0 ? void 0 : _props$data$events$.name
    ,
    successful: props.isSuccess
  });
};
var Response$1 = function Response(props) {
  var queryClient = reactQuery.useQueryClient();
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var searchParams = Digit.Hooks.useQueryParams();
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var mutation = Digit.Hooks.events.useCreateEvent();
  var updateEventMutation = Digit.Hooks.events.useUpdateEvent();
  var state = props.location.state;
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_MUTATION_HAPPENED", false),
    mutationHappened = _Digit$Hooks$useSessi[0],
    setMutationHappened = _Digit$Hooks$useSessi[1];
  var _Digit$Hooks$useSessi2 = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_MUTATION_SUCCESS_DATA", false),
    successData = _Digit$Hooks$useSessi2[0],
    setsuccessData = _Digit$Hooks$useSessi2[1];
  var _Digit$Hooks$useSessi3 = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_ERROR_DATA", false),
    setErrorInfo = _Digit$Hooks$useSessi3[1];
  React.useEffect(function () {
    if (updateEventMutation.data) setsuccessData(updateEventMutation.data);
  }, [updateEventMutation.data]);
  React.useEffect(function () {
    if (mutation.data) setsuccessData(mutation.data);
  }, [mutation.data]);
  var onError = function onError(error, variables) {
    var _error$response, _error$response$data, _error$response$data$;
    setErrorInfo((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.Errors[0]) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.code) || 'ERROR');
    setMutationHappened(true);
  };
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      setMutationHappened(true);
      queryClient.clear();
    };
    if (!mutationHappened) {
      if (Boolean(searchParams === null || searchParams === void 0 ? void 0 : searchParams.delete) || Boolean(searchParams === null || searchParams === void 0 ? void 0 : searchParams.update)) {
        updateEventMutation.mutate(state, {
          onError: onError,
          onSuccess: onSuccess
        });
        return;
      }
      mutation.mutate(state, {
        onError: onError,
        onSuccess: onSuccess
      });
    }
  }, []);
  if (searchParams !== null && searchParams !== void 0 && searchParams.delete || searchParams !== null && searchParams !== void 0 && searchParams.update) {
    if (updateEventMutation.isLoading || updateEventMutation.isIdle && !mutationHappened) {
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
    }
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker$1, {
      t: t,
      message: searchParams !== null && searchParams !== void 0 && searchParams.update ? updateEventMutation.isSuccess || successData ? 'ENGAGEMENT_PUBLIC_BRDCST_UPDATED' : 'ENG_PUBLIC_BRDCST_UPDATION_FAILED' : updateEventMutation.isSuccess || successData ? 'ENGAGEMENT_PUBLIC_BRDCST_DELETED' : 'ENGAGEMENT_PUBLIC_BRDCST_DELETION_FAILED',
      data: updateEventMutation.data || successData,
      isSuccess: (updateEventMutation === null || updateEventMutation === void 0 ? void 0 : updateEventMutation.isSuccess) || successData,
      isLoading: updateEventMutation.isIdle && !mutationHappened || updateEventMutation.isLoading
    }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardText, null, searchParams !== null && searchParams !== void 0 && searchParams.update ? t("ENGAGEMENT_PUBLIC_BRDCST_MESSAGES") : t("ENGAGEMENT_PUBLIC_BRDCST_MESSAGES")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
      to: "/digit-ui/employee"
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
      label: t("CORE_COMMON_GO_TO_HOME")
    }))));
  }
  if (mutation.isLoading || mutation.isIdle && !mutationHappened) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker$1, {
    t: t,
    message: mutation.isSuccess || successData ? "ENGAGEMENT_BROADCAST_MESSAGE_CREATED" : "ENGAGEMENT_BROADCAST_MESSAGE_FAILED",
    data: mutation.data || successData,
    isSuccess: mutation.isSuccess || successData,
    isLoading: mutation.isIdle && !mutationHappened || mutation.isLoading
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
    to: "/digit-ui/employee"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CORE_COMMON_GO_TO_HOME")
  }))));
};

var EditMessage = function EditMessage() {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _useParams = reactRouterDom.useParams(),
    MessageId = _useParams.id;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _Digit$Hooks$events$u = Digit.Hooks.events.useInbox(tenantId, {}, {
      eventTypes: "BROADCAST",
      ids: MessageId
    }, {
      select: function select(data) {
        var _data$events;
        return data === null || data === void 0 ? void 0 : (_data$events = data.events) === null || _data$events === void 0 ? void 0 : _data$events[0];
      }
    }),
    isLoading = _Digit$Hooks$events$u.isLoading,
    data = _Digit$Hooks$events$u.data;
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_MUTATION_HAPPENED", false),
    setMutationHappened = _Digit$Hooks$useSessi[1];
  var _Digit$Hooks$useSessi2 = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_ERROR_DATA", false),
    clearError = _Digit$Hooks$useSessi2[2];
  var _Digit$Hooks$useSessi3 = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_MUTATION_SUCCESS_DATA", false),
    clearSuccessData = _Digit$Hooks$useSessi3[2];
  React.useEffect(function () {
    setMutationHappened(false);
    clearSuccessData();
    clearError();
  }, []);
  var onSubmit = function onSubmit(formData) {
    var _formData$tenantId;
    var fromDate = formData.fromDate,
      toDate = formData.toDate,
      description = formData.description,
      name = formData.name,
      documents = formData.documents;
    var finalDocuments = isNestedArray(documents) ? reduceDocsArray(documents) : documents;
    var details = {
      events: [_extends({}, data, {
        source: "WEBAPP",
        status: "ACTIVE",
        eventType: "BROADCAST",
        tenantId: formData === null || formData === void 0 ? void 0 : (_formData$tenantId = formData.tenantId) === null || _formData$tenantId === void 0 ? void 0 : _formData$tenantId.code,
        description: description,
        name: name,
        eventDetails: {
          documents: finalDocuments,
          fromDate: handleTodaysDate("" + fromDate),
          toDate: handleTodaysDate("" + toDate)
        }
      })]
    };
    history.push("/digit-ui/employee/engagement/messages/response?update=true", details);
  };
  var defaultValues = React.useMemo(function () {
    var _data$eventDetails, _data$eventDetails2, _data$eventDetails3;
    var documents = data === null || data === void 0 ? void 0 : (_data$eventDetails = data.eventDetails) === null || _data$eventDetails === void 0 ? void 0 : _data$eventDetails.documents;
    return {
      name: data === null || data === void 0 ? void 0 : data.name,
      description: data === null || data === void 0 ? void 0 : data.description,
      documents: documents === null || documents === void 0 ? void 0 : documents.map(function (e) {
        return [e.fileName, {
          file: {
            name: e.fileName,
            type: e.documentType
          },
          fileStoreId: {
            fileStoreId: e.fileStoreId,
            tenantId: tenantId
          }
        }];
      }),
      fromDate: data ? format(new Date(data === null || data === void 0 ? void 0 : (_data$eventDetails2 = data.eventDetails) === null || _data$eventDetails2 === void 0 ? void 0 : _data$eventDetails2.fromDate), 'yyyy-MM-dd') : null,
      toDate: data ? format(new Date(data === null || data === void 0 ? void 0 : (_data$eventDetails3 = data.eventDetails) === null || _data$eventDetails3 === void 0 ? void 0 : _data$eventDetails3.toDate), 'yyyy-MM-dd') : null
    };
  }, [data]);
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("EDIT_NEW_PUBLIC_MESSAGE")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    defaultValues: defaultValues,
    config: config$1,
    onSubmit: onSubmit,
    label: t("ACTION_EDIT_MESSAGE")
  }));
};

var configPTApproverApplication = function configPTApproverApplication(_ref) {
  var _action$assigneeRoles;
  var t = _ref.t,
    action = _ref.action,
    approvers = _ref.approvers,
    selectedApprover = _ref.selectedApprover,
    setSelectedApprover = _ref.setSelectedApprover,
    selectFile = _ref.selectFile,
    uploadedFile = _ref.uploadedFile,
    setUploadedFile = _ref.setUploadedFile,
    assigneeLabel = _ref.assigneeLabel,
    businessService = _ref.businessService;
  return {
    label: {
      heading: "WF_" + (action === null || action === void 0 ? void 0 : action.action) + "_APPLICATION",
      submit: "WF_" + businessService + "_" + (action === null || action === void 0 ? void 0 : action.action),
      cancel: "ES_PT_COMMON_CANCEL"
    },
    form: [{
      body: [{
        label: action.isTerminateState || (action === null || action === void 0 ? void 0 : action.action) === "SENDBACKTOCITIZEN" ? null : t(assigneeLabel || "WF_ROLE_" + ((_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : _action$assigneeRoles[0])),
        type: "dropdown",
        populators: action.isTerminateState || (action === null || action === void 0 ? void 0 : action.action) === "SENDBACKTOCITIZEN" ? null : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("ES_PT_ACTION_COMMENTS"),
        type: "textarea",
        populators: {
          name: "comments"
        }
      }, {
        label: "" + t("ES_PT_ATTACH_FILE") + (action.docUploadRequired ? " *" : ""),
        populators: /*#__PURE__*/React__default.createElement(digitUiReactComponents.UploadFile, {
          id: "workflow-doc",
          onUpload: selectFile,
          onDelete: function onDelete() {
            setUploadedFile(null);
          },
          showHint: true,
          hintText: t("PT_ATTACH_RESTRICTIONS_SIZE"),
          message: uploadedFile ? "1 " + t("ES_PT_ACTION_FILEUPLOADED") : t("ES_PT_ACTION_NO_FILEUPLOADED")
        })
      }]
    }]
  };
};

var configPTAssessProperty = function configPTAssessProperty(_ref) {
  var t = _ref.t,
    action = _ref.action,
    financialYears = _ref.financialYears,
    selectedFinancialYear = _ref.selectedFinancialYear,
    setSelectedFinancialYear = _ref.setSelectedFinancialYear;
  return {
    label: {
      heading: "WF_" + action.action + "_APPLICATION",
      submit: "WF_PT.CREATE_" + action.action,
      cancel: "ES_PT_COMMON_CANCEL"
    },
    form: [{
      body: [{
        label: t("ES_PT_FINANCIAL_YEARS"),
        isMandatory: true,
        type: "radio",
        populators: /*#__PURE__*/React__default.createElement(digitUiReactComponents.RadioButtons, {
          options: financialYears,
          optionsKey: "name",
          onSelect: setSelectedFinancialYear,
          selectedOption: selectedFinancialYear
        })
      }]
    }]
  };
};

var configTLApproverApplication = function configTLApproverApplication(_ref) {
  var t = _ref.t,
    action = _ref.action,
    approvers = _ref.approvers,
    selectedApprover = _ref.selectedApprover,
    setSelectedApprover = _ref.setSelectedApprover,
    selectFile = _ref.selectFile,
    uploadedFile = _ref.uploadedFile,
    setUploadedFile = _ref.setUploadedFile,
    businessService = _ref.businessService;
  var checkCondtions = true;
  if ((action === null || action === void 0 ? void 0 : action.action) == "SENDBACKTOCITIZEN" || (action === null || action === void 0 ? void 0 : action.action) == "APPROVE") checkCondtions = false;
  if (action.isTerminateState) checkCondtions = false;
  return {
    label: {
      heading: "WF_" + (action === null || action === void 0 ? void 0 : action.action) + "_APPLICATION",
      submit: "WF_" + (businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase()) + "_" + (action === null || action === void 0 ? void 0 : action.action),
      cancel: "WF_EMPLOYEE_NEWTL_CANCEL"
    },
    form: [{
      body: [{
        label: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_LABEL"),
        placeholder: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_PLACEHOLDER"),
        type: "dropdown",
        populators: !checkCondtions ? null : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        populators: {
          name: "comments"
        }
      }, {
        label: t("TL_APPROVAL_CHECKLIST_BUTTON_UP_FILE"),
        populators: /*#__PURE__*/React__default.createElement(digitUiReactComponents.UploadFile, {
          id: "workflow-doc"
          ,
          onUpload: selectFile,
          onDelete: function onDelete() {
            setUploadedFile(null);
          },
          message: uploadedFile ? "1 " + t("ES_PT_ACTION_FILEUPLOADED") : t("CS_ACTION_NO_FILEUPLOADED")
        })
      }
      ]
    }]
  };
};

var configBPAREGApproverApplication = function configBPAREGApproverApplication(_ref) {
  var t = _ref.t,
    action = _ref.action,
    approvers = _ref.approvers,
    selectedApprover = _ref.selectedApprover,
    setSelectedApprover = _ref.setSelectedApprover,
    selectFile = _ref.selectFile,
    uploadedFile = _ref.uploadedFile,
    setUploadedFile = _ref.setUploadedFile,
    businessService = _ref.businessService,
    error = _ref.error;
  var checkCondtions = true;
  if ((action === null || action === void 0 ? void 0 : action.action) == "SENDBACKTOCITIZEN") checkCondtions = false;
  if (action.isTerminateState) checkCondtions = false;
  return {
    label: {
      heading: "WF_" + (action === null || action === void 0 ? void 0 : action.action) + "_APPLICATION",
      submit: "WF_" + (businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase()) + "_" + (action === null || action === void 0 ? void 0 : action.action),
      cancel: "WF_EMPLOYEE_BPAREG_CANCEL"
    },
    form: [{
      body: [{
        label: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_LABEL"),
        placeholder: !checkCondtions ? null : t("WF_ASSIGNEE_NAME_PLACEHOLDER"),
        type: "dropdown",
        populators: !checkCondtions ? null : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        populators: {
          name: "comments"
        }
      }, {
        label: t("BPA_APPROVAL_CHECKLIST_BUTTON_UP_FILE"),
        populators: /*#__PURE__*/React__default.createElement(digitUiReactComponents.UploadFile, {
          id: "workflow-doc",
          onUpload: selectFile,
          onDelete: function onDelete() {
            setUploadedFile(null);
          },
          message: uploadedFile ? "1 " + t("ES_PT_ACTION_FILEUPLOADED") : t("CS_ACTION_NO_FILEUPLOADED"),
          accept: "image/*, .pdf, .png, .jpeg, .jpg",
          iserror: error
        })
      }]
    }]
  };
};

var configBPAApproverApplication = function configBPAApproverApplication(_ref) {
  var _action$assigneeRoles;
  var t = _ref.t,
    action = _ref.action,
    approvers = _ref.approvers,
    selectedApprover = _ref.selectedApprover,
    setSelectedApprover = _ref.setSelectedApprover,
    selectFile = _ref.selectFile,
    uploadedFile = _ref.uploadedFile,
    setUploadedFile = _ref.setUploadedFile,
    assigneeLabel = _ref.assigneeLabel,
    businessService = _ref.businessService,
    error = _ref.error;
  var isRejectOrRevocate = false;
  if ((action === null || action === void 0 ? void 0 : action.action) == "REVOCATE" || (action === null || action === void 0 ? void 0 : action.action) == "REJECT" || action.action == "SKIP_PAYMENT" || (action === null || action === void 0 ? void 0 : action.action) == "SEND_BACK_TO_CITIZEN" || (action === null || action === void 0 ? void 0 : action.action) == "APPROVE") {
    isRejectOrRevocate = true;
  }
  var isCommentRequired = false;
  if ((action === null || action === void 0 ? void 0 : action.action) == "REVOCATE" || (action === null || action === void 0 ? void 0 : action.action) == "REJECT") {
    isCommentRequired = true;
  }
  return {
    label: {
      heading: "WF_" + (action === null || action === void 0 ? void 0 : action.action) + "_APPLICATION",
      submit: "WF_" + businessService + "_" + (action === null || action === void 0 ? void 0 : action.action),
      cancel: "BPA_CITIZEN_CANCEL_BUTTON"
    },
    form: [{
      body: [{
        label: action.isTerminateState || isRejectOrRevocate ? null : t(assigneeLabel || "WF_ROLE_" + ((_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : _action$assigneeRoles[0])),
        type: "dropdown",
        populators: action.isTerminateState || isRejectOrRevocate ? null : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        isMandatory: isCommentRequired,
        populators: {
          name: "comments"
        }
      }, {
        label: "" + t("WF_APPROVAL_UPLOAD_HEAD"),
        populators: /*#__PURE__*/React__default.createElement(digitUiReactComponents.UploadFile, {
          id: "workflow-doc",
          onUpload: selectFile,
          onDelete: function onDelete() {
            setUploadedFile(null);
          },
          message: uploadedFile ? "1 " + t("ES_PT_ACTION_FILEUPLOADED") : t("CS_ACTION_NO_FILEUPLOADED"),
          accept: "image/*, .pdf, .png, .jpeg, .jpg",
          iserror: error
        })
      }]
    }]
  };
};

var configNOCApproverApplication = function configNOCApproverApplication(_ref) {
  var _action$assigneeRoles;
  var t = _ref.t,
    action = _ref.action,
    approvers = _ref.approvers,
    selectedApprover = _ref.selectedApprover,
    setSelectedApprover = _ref.setSelectedApprover,
    selectFile = _ref.selectFile,
    uploadedFile = _ref.uploadedFile,
    setUploadedFile = _ref.setUploadedFile,
    assigneeLabel = _ref.assigneeLabel,
    businessService = _ref.businessService,
    error = _ref.error;
  var isCommentRequired = false;
  if ((action === null || action === void 0 ? void 0 : action.action) == "REVOCATE" || (action === null || action === void 0 ? void 0 : action.action) == "REJECT") {
    isCommentRequired = true;
  }
  var isRejectOrRevocate = false;
  if ((action === null || action === void 0 ? void 0 : action.action) == "APPROVE" || (action === null || action === void 0 ? void 0 : action.action) == "REJECT" || action.action == "AUTO_APPROVE" || action.action == "AUTO_REJECT") {
    isRejectOrRevocate = true;
  }
  return {
    label: {
      heading: "WF_" + (action === null || action === void 0 ? void 0 : action.action) + "_APPLICATION",
      submit: "WF_" + businessService + "_" + (action === null || action === void 0 ? void 0 : action.action),
      cancel: "CORE_LOGOUTPOPUP_CANCEL"
    },
    form: [{
      body: [{
        label: action.isTerminateState || isRejectOrRevocate ? null : t(assigneeLabel || "WF_ROLE_" + ((_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : _action$assigneeRoles[0])),
        type: "dropdown",
        populators: action.isTerminateState || isRejectOrRevocate ? null : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
          option: approvers,
          autoComplete: "off",
          optionKey: "name",
          id: "fieldInspector",
          select: setSelectedApprover,
          selected: selectedApprover
        })
      }, {
        label: t("WF_COMMON_COMMENTS"),
        type: "textarea",
        isMandatory: isCommentRequired,
        populators: {
          name: "comments"
        }
      }, {
        label: "" + t("WF_APPROVAL_UPLOAD_HEAD"),
        populators: /*#__PURE__*/React__default.createElement(digitUiReactComponents.UploadFile, {
          id: "workflow-doc",
          onUpload: selectFile,
          onDelete: function onDelete() {
            setUploadedFile(null);
          },
          showHint: true,
          message: uploadedFile ? "1 " + t("ES_PT_ACTION_FILEUPLOADED") : t("CS_ACTION_NO_FILEUPLOADED"),
          accept: "image/*, .pdf, .png, .jpeg, .jpg",
          iserror: error
        })
      }]
    }]
  };
};

var Heading = function Heading(props) {
  return /*#__PURE__*/React__default.createElement("h1", {
    className: "heading-m"
  }, props.label);
};
var Close = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close, null));
};
var ActionModal = function ActionModal(_ref) {
  var _action$assigneeRoles, _action$assigneeRoles2;
  var t = _ref.t,
    action = _ref.action,
    tenantId = _ref.tenantId,
    closeModal = _ref.closeModal,
    submitAction = _ref.submitAction,
    applicationData = _ref.applicationData,
    businessService = _ref.businessService,
    moduleCode = _ref.moduleCode;
  var _Digit$Hooks$useEmplo = Digit.Hooks.useEmployeeSearch(tenantId, {
      roles: action === null || action === void 0 ? void 0 : (_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : (_action$assigneeRoles2 = _action$assigneeRoles.map) === null || _action$assigneeRoles2 === void 0 ? void 0 : _action$assigneeRoles2.call(_action$assigneeRoles, function (e) {
        return {
          code: e
        };
      }),
      isActive: true
    }, {
      enabled: !(action !== null && action !== void 0 && action.isTerminateState)
    }),
    approverData = _Digit$Hooks$useEmplo.data,
    PTALoading = _Digit$Hooks$useEmplo.isLoading;
  var _Digit$Hooks$pt$useMD = Digit.Hooks.pt.useMDMS(tenantId, businessService, "FINANCIAL_YEARLS", {}, {
      details: {
        tenantId: Digit.ULBService.getStateId(),
        moduleDetails: [{
          moduleName: "egf-master",
          masterDetails: [{
            name: "FinancialYear",
            filter: "[?(@.module == 'PT')]"
          }]
        }]
      }
    }),
    financialYearsLoading = _Digit$Hooks$pt$useMD.isLoading,
    financialYearsData = _Digit$Hooks$pt$useMD.data;
  var _useState = React.useState({}),
    config = _useState[0],
    setConfig = _useState[1];
  var _useState2 = React.useState({}),
    defaultValues = _useState2[0];
  var _useState3 = React.useState([]),
    approvers = _useState3[0],
    setApprovers = _useState3[1];
  var _useState4 = React.useState(null),
    selectedApprover = _useState4[0],
    setSelectedApprover = _useState4[1];
  var _useState5 = React.useState(null),
    file = _useState5[0],
    setFile = _useState5[1];
  var _useState6 = React.useState(null),
    uploadedFile = _useState6[0],
    setUploadedFile = _useState6[1];
  var _useState7 = React.useState(null),
    setError = _useState7[1];
  var _useState8 = React.useState([]),
    financialYears = _useState8[0],
    setFinancialYears = _useState8[1];
  var _useState9 = React.useState(null),
    selectedFinancialYear = _useState9[0],
    setSelectedFinancialYear = _useState9[1];
  var _useState10 = React.useState(false);
  React.useEffect(function () {
    if (financialYearsData && financialYearsData["egf-master"]) {
      var _financialYearsData$e;
      setFinancialYears((_financialYearsData$e = financialYearsData["egf-master"]) === null || _financialYearsData$e === void 0 ? void 0 : _financialYearsData$e["FinancialYear"]);
    }
  }, [financialYearsData]);
  React.useEffect(function () {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(function (employee) {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  React.useEffect(function () {
    (function () {
      try {
        setError(null);
        var _temp4 = function () {
          if (file) {
            var _temp5 = function () {
              if (file.size >= 5242880) {
                setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
              } else {
                var _temp6 = _catch(function () {
                  return Promise.resolve(Digit.UploadServices.Filestorage("PT", file, Digit.ULBService.getStateId())).then(function (response) {
                    var _response$data, _response$data$files;
                    if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
                      var _response$data2, _response$data2$files;
                      setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
                    } else {
                      setError(t("CS_FILE_UPLOAD_ERROR"));
                    }
                  });
                }, function () {
                  setError(t("CS_FILE_UPLOAD_ERROR"));
                });
                if (_temp6 && _temp6.then) return _temp6.then(function () {});
              }
            }();
            if (_temp5 && _temp5.then) return _temp5.then(function () {});
          }
        }();
        return _temp4 && _temp4.then ? _temp4.then(function () {}) : void 0;
      } catch (e) {
        Promise.reject(e);
      }
    })();
  }, [file]);
  function submit(data) {
    if (!(action !== null && action !== void 0 && action.showFinancialYearsModal)) {
      var workflow = {
        action: action === null || action === void 0 ? void 0 : action.action,
        comments: data === null || data === void 0 ? void 0 : data.comments,
        businessService: businessService,
        moduleName: moduleCode
      };
      workflow["assignes"] = action !== null && action !== void 0 && action.isTerminateState || !selectedApprover ? [] : [selectedApprover];
      if (uploadedFile) workflow["documents"] = [{
        documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
        fileName: file === null || file === void 0 ? void 0 : file.name,
        fileStoreId: uploadedFile
      }];
      submitAction({
        Property: _extends({}, applicationData, {
          workflow: workflow
        })
      });
    } else {
      submitAction({
        customFunctionToExecute: action === null || action === void 0 ? void 0 : action.customFunctionToExecute,
        Assessment: {
          financialYear: selectedFinancialYear === null || selectedFinancialYear === void 0 ? void 0 : selectedFinancialYear.name,
          propertyId: applicationData === null || applicationData === void 0 ? void 0 : applicationData.propertyId,
          tenantId: tenantId,
          source: applicationData === null || applicationData === void 0 ? void 0 : applicationData.source,
          channel: applicationData === null || applicationData === void 0 ? void 0 : applicationData.channel,
          assessmentDate: Date.now()
        }
      });
    }
  }
  React.useEffect(function () {
    if (action) {
      if (action !== null && action !== void 0 && action.showFinancialYearsModal) {
        setConfig(configPTAssessProperty({
          t: t,
          action: action,
          financialYears: financialYears,
          selectedFinancialYear: selectedFinancialYear,
          setSelectedFinancialYear: setSelectedFinancialYear
        }));
      } else {
        setConfig(configPTApproverApplication({
          t: t,
          action: action,
          approvers: approvers,
          selectedApprover: selectedApprover,
          setSelectedApprover: setSelectedApprover,
          selectFile: selectFile,
          uploadedFile: uploadedFile,
          setUploadedFile: setUploadedFile,
          businessService: businessService
        }));
      }
    }
  }, [action, approvers, financialYears, selectedFinancialYear, uploadedFile]);
  return action && config.form ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: function actionSaveOnSubmit() {},
    isDisabled: !action.showFinancialYearsModal ? PTALoading || (action === null || action === void 0 ? void 0 : action.docUploadRequired) && !uploadedFile : !selectedFinancialYear,
    formId: "modal-action"
  }, financialYearsLoading ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    config: config.form,
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
};

var Heading$1 = function Heading(props) {
  return /*#__PURE__*/React__default.createElement("h1", {
    className: "heading-m"
  }, props.label);
};
var Close$1 = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$1 = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$1, null));
};
var ActionModal$1 = function ActionModal(_ref) {
  var _action$assigneeRoles, _action$assigneeRoles2;
  var t = _ref.t,
    action = _ref.action,
    tenantId = _ref.tenantId,
    closeModal = _ref.closeModal,
    submitAction = _ref.submitAction,
    applicationData = _ref.applicationData,
    businessService = _ref.businessService;
  var _Digit$Hooks$useEmplo = Digit.Hooks.useEmployeeSearch(tenantId, {
      roles: action === null || action === void 0 ? void 0 : (_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : (_action$assigneeRoles2 = _action$assigneeRoles.map) === null || _action$assigneeRoles2 === void 0 ? void 0 : _action$assigneeRoles2.call(_action$assigneeRoles, function (e) {
        return {
          code: e
        };
      }),
      isActive: true
    }, {
      enabled: !(action !== null && action !== void 0 && action.isTerminateState)
    }),
    approverData = _Digit$Hooks$useEmplo.data;
  var _Digit$Hooks$pt$useMD = Digit.Hooks.pt.useMDMS(tenantId, businessService, "FINANCIAL_YEARLS", {}, {
      details: {
        tenantId: Digit.ULBService.getStateId(),
        moduleDetails: [{
          moduleName: "egf-master",
          masterDetails: [{
            name: "FinancialYear",
            filter: "[?(@.module == 'TL')]"
          }]
        }]
      }
    }),
    financialYearsLoading = _Digit$Hooks$pt$useMD.isLoading,
    financialYearsData = _Digit$Hooks$pt$useMD.data;
  var _useState = React.useState({}),
    config = _useState[0],
    setConfig = _useState[1];
  var _useState2 = React.useState({}),
    defaultValues = _useState2[0];
  var _useState3 = React.useState([]),
    approvers = _useState3[0],
    setApprovers = _useState3[1];
  var _useState4 = React.useState({}),
    selectedApprover = _useState4[0],
    setSelectedApprover = _useState4[1];
  var _useState5 = React.useState(null),
    file = _useState5[0],
    setFile = _useState5[1];
  var _useState6 = React.useState(null),
    uploadedFile = _useState6[0],
    setUploadedFile = _useState6[1];
  var _useState7 = React.useState(null),
    setError = _useState7[1];
  var _useState8 = React.useState([]),
    financialYears = _useState8[0],
    setFinancialYears = _useState8[1];
  var _useState9 = React.useState(null),
    selectedFinancialYear = _useState9[0];
  React.useEffect(function () {
    if (financialYearsData && financialYearsData["egf-master"]) {
      var _financialYearsData$e;
      setFinancialYears((_financialYearsData$e = financialYearsData["egf-master"]) === null || _financialYearsData$e === void 0 ? void 0 : _financialYearsData$e["FinancialYear"]);
    }
  }, [financialYearsData]);
  React.useEffect(function () {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(function (employee) {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  React.useEffect(function () {
    (function () {
      try {
        setError(null);
        var _temp4 = function () {
          if (file) {
            var _temp5 = function () {
              if (file.size >= 5242880) {
                setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
              } else {
                var _temp6 = _catch(function () {
                  return Promise.resolve(Digit.UploadServices.Filestorage("PT", file, Digit.ULBService.getStateId())).then(function (response) {
                    var _response$data, _response$data$files;
                    if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
                      var _response$data2, _response$data2$files;
                      setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
                    } else {
                      setError(t("CS_FILE_UPLOAD_ERROR"));
                    }
                  });
                }, function () {
                  setError(t("CS_FILE_UPLOAD_ERROR"));
                });
                if (_temp6 && _temp6.then) return _temp6.then(function () {});
              }
            }();
            if (_temp5 && _temp5.then) return _temp5.then(function () {});
          }
        }();
        return _temp4 && _temp4.then ? _temp4.then(function () {}) : void 0;
      } catch (e) {
        Promise.reject(e);
      }
    })();
  }, [file]);
  function submit(data) {
    applicationData = _extends({}, applicationData, {
      action: action === null || action === void 0 ? void 0 : action.action,
      comment: data === null || data === void 0 ? void 0 : data.comments,
      assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
      wfDocuments: uploadedFile ? [{
        documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
        fileName: file === null || file === void 0 ? void 0 : file.name,
        fileStoreId: uploadedFile
      }] : null
    });
    submitAction({
      Licenses: [applicationData]
    });
  }
  React.useEffect(function () {
    if (action) {
      setConfig(configTLApproverApplication({
        t: t,
        action: action,
        approvers: approvers,
        selectedApprover: selectedApprover,
        setSelectedApprover: setSelectedApprover,
        selectFile: selectFile,
        uploadedFile: uploadedFile,
        setUploadedFile: setUploadedFile,
        businessService: businessService
      }));
    }
  }, [action, approvers, financialYears, selectedFinancialYear, uploadedFile]);
  return action && config.form ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading$1, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$1, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: function actionSaveOnSubmit() {}
    ,
    formId: "modal-action"
  }, financialYearsLoading ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    config: config.form,
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
};

var Heading$2 = function Heading(props) {
  return /*#__PURE__*/React__default.createElement("h1", {
    style: {
      marginLeft: "22px"
    },
    className: "heading-m BPAheading-m"
  }, props.label);
};
var Close$2 = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$2 = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$2, null));
};
var ActionModal$2 = function ActionModal(_ref) {
  var _action$assigneeRoles, _action$assigneeRoles2;
  var t = _ref.t,
    action = _ref.action,
    tenantId = _ref.tenantId,
    closeModal = _ref.closeModal,
    submitAction = _ref.submitAction,
    applicationData = _ref.applicationData,
    businessService = _ref.businessService;
  var _Digit$Hooks$useEmplo = Digit.Hooks.useEmployeeSearch(tenantId, {
      roles: action === null || action === void 0 ? void 0 : (_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : (_action$assigneeRoles2 = _action$assigneeRoles.map) === null || _action$assigneeRoles2 === void 0 ? void 0 : _action$assigneeRoles2.call(_action$assigneeRoles, function (e) {
        return {
          code: e
        };
      }),
      isActive: true
    }, {
      enabled: !(action !== null && action !== void 0 && action.isTerminateState)
    }),
    approverData = _Digit$Hooks$useEmplo.data,
    PTALoading = _Digit$Hooks$useEmplo.isLoading;
  var _useState = React.useState({}),
    config = _useState[0],
    setConfig = _useState[1];
  var _useState2 = React.useState({}),
    defaultValues = _useState2[0];
  var _useState3 = React.useState([]),
    approvers = _useState3[0],
    setApprovers = _useState3[1];
  var _useState4 = React.useState({}),
    selectedApprover = _useState4[0],
    setSelectedApprover = _useState4[1];
  var _useState5 = React.useState(null),
    file = _useState5[0],
    setFile = _useState5[1];
  var _useState6 = React.useState(null),
    uploadedFile = _useState6[0],
    setUploadedFile = _useState6[1];
  var _useState7 = React.useState(null),
    error = _useState7[0],
    setError = _useState7[1];
  var mobileView = Digit.Utils.browser.isMobile() ? true : false;
  React.useEffect(function () {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(function (employee) {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  React.useEffect(function () {
    (function () {
      try {
        setError(null);
        var _temp5 = function () {
          if (file) {
            var allowedFileTypesRegex = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
            var _temp6 = function () {
              if (file.size >= 5242880) {
                setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
              } else {
                var _temp7 = function () {
                  if (file !== null && file !== void 0 && file.type && !allowedFileTypesRegex.test(file === null || file === void 0 ? void 0 : file.type)) {
                    setError(t("NOT_SUPPORTED_FILE_TYPE"));
                  } else {
                    var _temp8 = _catch(function () {
                      return Promise.resolve(Digit.UploadServices.Filestorage("OBPS", file, Digit.ULBService.getStateId() || (tenantId === null || tenantId === void 0 ? void 0 : tenantId.split(".")[0]))).then(function (response) {
                        var _response$data, _response$data$files;
                        if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
                          var _response$data2, _response$data2$files;
                          setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
                        } else {
                          setError(t("CS_FILE_UPLOAD_ERROR"));
                        }
                      });
                    }, function () {
                      setError(t("CS_FILE_UPLOAD_ERROR"));
                    });
                    if (_temp8 && _temp8.then) return _temp8.then(function () {});
                  }
                }();
                if (_temp7 && _temp7.then) return _temp7.then(function () {});
              }
            }();
            if (_temp6 && _temp6.then) return _temp6.then(function () {});
          }
        }();
        return _temp5 && _temp5.then ? _temp5.then(function () {}) : void 0;
      } catch (e) {
        Promise.reject(e);
      }
    })();
  }, [file]);
  function submit(data) {
    applicationData = _extends({}, applicationData, {
      action: action === null || action === void 0 ? void 0 : action.action,
      comment: data === null || data === void 0 ? void 0 : data.comments,
      assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
      wfDocuments: uploadedFile ? [{
        documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
        fileName: file === null || file === void 0 ? void 0 : file.name,
        fileStoreId: uploadedFile
      }] : null
    });
    submitAction({
      Licenses: [applicationData]
    }, false, {
      isStakeholder: true,
      bpa: false
    });
  }
  React.useEffect(function () {
    if (action) {
      setConfig(configBPAREGApproverApplication({
        t: t,
        action: action,
        approvers: approvers,
        selectedApprover: selectedApprover,
        setSelectedApprover: setSelectedApprover,
        selectFile: selectFile,
        uploadedFile: uploadedFile,
        setUploadedFile: setUploadedFile,
        businessService: businessService,
        error: error
      }));
    }
  }, [action, approvers, uploadedFile, error]);
  return action && config.form ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading$2, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$2, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: function actionSaveOnSubmit() {},
    formId: "modal-action",
    isOBPSFlow: true,
    popupStyles: mobileView ? {
      width: "720px"
    } : {},
    style: !mobileView ? {
      height: "45px",
      width: "107px",
      paddingLeft: "0px",
      paddingRight: "0px"
    } : {
      height: "45px",
      width: "44%"
    },
    popupModuleMianStyles: mobileView ? {
      paddingLeft: "5px"
    } : {}
  }, PTALoading ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    config: config.form,
    cardStyle: {
      marginLeft: "0px",
      marginRight: "0px",
      marginTop: "-25px"
    },
    className: "BPAemployeeCard",
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
};

var Heading$3 = function Heading(props) {
  return /*#__PURE__*/React__default.createElement("h1", {
    style: {
      marginLeft: "22px"
    },
    className: "heading-m BPAheading-m"
  }, props.label);
};
var Close$3 = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$3 = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$3, null));
};
var ActionModal$3 = function ActionModal(_ref) {
  var _applicationData, _applicationData$land, _applicationData$land2, _applicationData2, _applicationData2$lan, _applicationData2$lan2, _workflowDetails$data, _workflowDetails$data2, _workflowDetails$data3, _workflowDetails$data4, _workflowDetails$data5, _workflowDetails$data6;
  var t = _ref.t,
    action = _ref.action,
    tenantId = _ref.tenantId,
    closeModal = _ref.closeModal,
    submitAction = _ref.submitAction,
    applicationDetails = _ref.applicationDetails,
    applicationData = _ref.applicationData,
    businessService = _ref.businessService,
    workflowDetails = _ref.workflowDetails;
  var mutation1 = Digit.Hooks.obps.useObpsAPI((_applicationData = applicationData) !== null && _applicationData !== void 0 && (_applicationData$land = _applicationData.landInfo) !== null && _applicationData$land !== void 0 && (_applicationData$land2 = _applicationData$land.address) !== null && _applicationData$land2 !== void 0 && _applicationData$land2.city ? (_applicationData2 = applicationData) === null || _applicationData2 === void 0 ? void 0 : (_applicationData2$lan = _applicationData2.landInfo) === null || _applicationData2$lan === void 0 ? void 0 : (_applicationData2$lan2 = _applicationData2$lan.address) === null || _applicationData2$lan2 === void 0 ? void 0 : _applicationData2$lan2.city : tenantId, false);
  var _Digit$Hooks$useEmplo = Digit.Hooks.useEmployeeSearch(tenantId, {
      roles: workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data = workflowDetails.data) === null || _workflowDetails$data === void 0 ? void 0 : (_workflowDetails$data2 = _workflowDetails$data.initialActionState) === null || _workflowDetails$data2 === void 0 ? void 0 : (_workflowDetails$data3 = _workflowDetails$data2.nextActions) === null || _workflowDetails$data3 === void 0 ? void 0 : (_workflowDetails$data4 = _workflowDetails$data3.filter(function (ele) {
        return (ele === null || ele === void 0 ? void 0 : ele.action) == (action === null || action === void 0 ? void 0 : action.action);
      })) === null || _workflowDetails$data4 === void 0 ? void 0 : (_workflowDetails$data5 = _workflowDetails$data4[0]) === null || _workflowDetails$data5 === void 0 ? void 0 : (_workflowDetails$data6 = _workflowDetails$data5.assigneeRoles) === null || _workflowDetails$data6 === void 0 ? void 0 : _workflowDetails$data6.map(function (role) {
        return {
          code: role
        };
      }),
      isActive: true
    }, {
      enabled: !(action !== null && action !== void 0 && action.isTerminateState)
    }),
    approverData = _Digit$Hooks$useEmplo.data,
    PTALoading = _Digit$Hooks$useEmplo.isLoading;
  var queryClient = reactQuery.useQueryClient();
  var _useState = React.useState({}),
    config = _useState[0],
    setConfig = _useState[1];
  var _useState2 = React.useState({}),
    defaultValues = _useState2[0];
  var _useState3 = React.useState([]),
    approvers = _useState3[0],
    setApprovers = _useState3[1];
  var _useState4 = React.useState({}),
    selectedApprover = _useState4[0],
    setSelectedApprover = _useState4[1];
  var _useState5 = React.useState(null),
    file = _useState5[0],
    setFile = _useState5[1];
  var _useState6 = React.useState(null),
    uploadedFile = _useState6[0],
    setUploadedFile = _useState6[1];
  var _useState7 = React.useState(null),
    error = _useState7[0],
    setError = _useState7[1];
  var _useState8 = React.useState(null),
    selectedFinancialYear = _useState8[0];
  var mobileView = Digit.Utils.browser.isMobile() ? true : false;
  React.useEffect(function () {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(function (employee) {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  React.useEffect(function () {
    (function () {
      try {
        setError(null);
        var _temp5 = function () {
          if (file) {
            var allowedFileTypesRegex = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
            var _temp6 = function () {
              if (file.size >= 5242880) {
                setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
              } else {
                var _temp7 = function () {
                  if (file !== null && file !== void 0 && file.type && !allowedFileTypesRegex.test(file === null || file === void 0 ? void 0 : file.type)) {
                    setError(t("NOT_SUPPORTED_FILE_TYPE"));
                  } else {
                    var _temp8 = _catch(function () {
                      return Promise.resolve(Digit.UploadServices.Filestorage("OBPS", file, Digit.ULBService.getStateId() || (tenantId === null || tenantId === void 0 ? void 0 : tenantId.split(".")[0]))).then(function (response) {
                        var _response$data, _response$data$files;
                        if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
                          var _response$data2, _response$data2$files;
                          setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
                        } else {
                          setError(t("CS_FILE_UPLOAD_ERROR"));
                        }
                      });
                    }, function () {
                      setError(t("CS_FILE_UPLOAD_ERROR"));
                    });
                    if (_temp8 && _temp8.then) return _temp8.then(function () {});
                  }
                }();
                if (_temp7 && _temp7.then) return _temp7.then(function () {});
              }
            }();
            if (_temp6 && _temp6.then) return _temp6.then(function () {});
          }
        }();
        return _temp5 && _temp5.then ? _temp5.then(function () {}) : void 0;
      } catch (e) {
        Promise.reject(e);
      }
    })();
  }, [file]);
  var getInspectionDocs = function getInspectionDocs(docs) {
    var refinedDocs = [];
    docs && docs.map(function (doc, ind) {
      refinedDocs.push({
        "documentType": (doc.documentType + "_" + doc.documentType.split("_")[1]).replaceAll("_", "."),
        "fileStoreId": doc.fileStoreId,
        "fileStore": doc.fileStoreId,
        "fileName": "",
        "dropDownValues": {
          "value": (doc.documentType + "_" + doc.documentType.split("_")[1]).replaceAll("_", ".")
        }
      });
    });
    return refinedDocs;
  };
  var getQuestion = function getQuestion(data) {
    var refinedQues = [];
    var i;
    for (i = 0; i < (data === null || data === void 0 ? void 0 : data.questionLength); i++) {
      var _data;
      refinedQues.push({
        "remarks": data["Remarks_" + i],
        "question": data === null || data === void 0 ? void 0 : data.questionList[i].question,
        "value": data === null || data === void 0 ? void 0 : (_data = data["question_" + i]) === null || _data === void 0 ? void 0 : _data.code
      });
    }
    return refinedQues;
  };
  var getfeildInspection = function getfeildInspection(data) {
    var _data$additionalDetai, _data$additionalDetai2;
    var formdata = [],
      inspectionOb = [];
    if ((data === null || data === void 0 ? void 0 : (_data$additionalDetai = data.additionalDetails) === null || _data$additionalDetai === void 0 ? void 0 : (_data$additionalDetai2 = _data$additionalDetai.fieldinspection_pending) === null || _data$additionalDetai2 === void 0 ? void 0 : _data$additionalDetai2.length) > 0) {
      var _data$additionalDetai3;
      inspectionOb = data === null || data === void 0 ? void 0 : (_data$additionalDetai3 = data.additionalDetails) === null || _data$additionalDetai3 === void 0 ? void 0 : _data$additionalDetai3.fieldinspection_pending;
    }
    if (data.status == "FIELDINSPECTION_INPROGRESS") {
      var _formdata;
      formdata = JSON.parse(sessionStorage.getItem("INSPECTION_DATA"));
      ((_formdata = formdata) === null || _formdata === void 0 ? void 0 : _formdata.length) > 0 && formdata.map(function (ob, ind) {
        inspectionOb.push({
          docs: getInspectionDocs(ob.Documents),
          date: ob.InspectionDate,
          questions: getQuestion(ob),
          time: ob === null || ob === void 0 ? void 0 : ob.InspectionTime
        });
      });
      inspectionOb = inspectionOb.filter(function (ob) {
        return ob.docs && ob.docs.length > 0;
      });
    } else {
      sessionStorage.removeItem("INSPECTION_DATA");
    }
    var fieldinspection_pending = [].concat(inspectionOb);
    return fieldinspection_pending;
  };
  var getDocuments = function getDocuments(applicationData) {
    var documentsformdata = JSON.parse(sessionStorage.getItem("BPA_DOCUMENTS"));
    var documentList = [];
    documentsformdata.map(function (doc) {
      var _doc$uploadedDocument, _doc$uploadedDocument2, _doc$uploadedDocument3, _doc$uploadedDocument4, _doc$uploadedDocument5, _doc$newUploadedDocs;
      if ((doc === null || doc === void 0 ? void 0 : (_doc$uploadedDocument = doc.uploadedDocuments) === null || _doc$uploadedDocument === void 0 ? void 0 : (_doc$uploadedDocument2 = _doc$uploadedDocument[0]) === null || _doc$uploadedDocument2 === void 0 ? void 0 : (_doc$uploadedDocument3 = _doc$uploadedDocument2.values) === null || _doc$uploadedDocument3 === void 0 ? void 0 : _doc$uploadedDocument3.length) > 0) documentList = [].concat(documentList, doc === null || doc === void 0 ? void 0 : (_doc$uploadedDocument4 = doc.uploadedDocuments) === null || _doc$uploadedDocument4 === void 0 ? void 0 : (_doc$uploadedDocument5 = _doc$uploadedDocument4[0]) === null || _doc$uploadedDocument5 === void 0 ? void 0 : _doc$uploadedDocument5.values);
      if ((doc === null || doc === void 0 ? void 0 : (_doc$newUploadedDocs = doc.newUploadedDocs) === null || _doc$newUploadedDocs === void 0 ? void 0 : _doc$newUploadedDocs.length) > 0) documentList = [].concat(documentList, doc === null || doc === void 0 ? void 0 : doc.newUploadedDocs);
    });
    return documentList;
  };
  var getPendingApprovals = function getPendingApprovals() {
    var _result;
    var approvals = Digit.SessionStorage.get("OBPS_APPROVAL_CHECKS");
    var newApprovals = Digit.SessionStorage.get("OBPS_NEW_APPROVALS");
    var result = approvals === null || approvals === void 0 ? void 0 : approvals.reduce(function (acc, approval) {
      return approval !== null && approval !== void 0 && approval.checked ? acc.push(approval === null || approval === void 0 ? void 0 : approval.label) && acc : acc;
    }, []);
    result = (_result = result) === null || _result === void 0 ? void 0 : _result.concat(newApprovals !== null ? newApprovals.filter(function (ob) {
      return ob.label !== "";
    }).map(function (approval) {
      return approval === null || approval === void 0 ? void 0 : approval.label;
    }) : []);
    return result;
  };
  function submit(data) {
    var _applicationData3, _data$comments, _data$comments2, _applicationDetails$n;
    applicationData = _extends({}, applicationData, {
      documents: getDocuments(),
      additionalDetails: _extends({}, (_applicationData3 = applicationData) === null || _applicationData3 === void 0 ? void 0 : _applicationData3.additionalDetails, {
        fieldinspection_pending: getfeildInspection(applicationData),
        pendingapproval: getPendingApprovals()
      }),
      workflow: {
        action: action === null || action === void 0 ? void 0 : action.action,
        comment: (data === null || data === void 0 ? void 0 : (_data$comments = data.comments) === null || _data$comments === void 0 ? void 0 : _data$comments.length) > 0 ? data === null || data === void 0 ? void 0 : data.comments : null,
        comments: (data === null || data === void 0 ? void 0 : (_data$comments2 = data.comments) === null || _data$comments2 === void 0 ? void 0 : _data$comments2.length) > 0 ? data === null || data === void 0 ? void 0 : data.comments : null,
        assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
        assignes: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
        varificationDocuments: uploadedFile ? [{
          documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
          fileName: file === null || file === void 0 ? void 0 : file.name,
          fileStoreId: uploadedFile
        }] : null
      },
      action: action === null || action === void 0 ? void 0 : action.action,
      comment: data === null || data === void 0 ? void 0 : data.comments,
      assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
      wfDocuments: uploadedFile ? [{
        documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
        fileName: file === null || file === void 0 ? void 0 : file.name,
        fileStoreId: uploadedFile
      }] : null
    });
    var nocDetails = applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$n = applicationDetails.nocData) === null || _applicationDetails$n === void 0 ? void 0 : _applicationDetails$n.map(function (noc) {
      var uploadedDocuments = Digit.SessionStorage.get(noc === null || noc === void 0 ? void 0 : noc.nocType) || [];
      return {
        Noc: _extends({}, noc, {
          documents: [].concat(noc !== null && noc !== void 0 && noc.documents ? noc === null || noc === void 0 ? void 0 : noc.documents : [], uploadedDocuments ? uploadedDocuments : [])
        })
      };
    });
    var nocData = [];
    if (nocDetails) {
      nocDetails.map(function (noc) {
        var _noc$Noc, _noc$Noc$applicationS, _noc$Noc2, _noc$Noc2$application, _noc$Noc3, _noc$Noc3$application, _noc$Noc4, _noc$Noc4$application, _noc$Noc5, _noc$Noc5$application;
        if ((noc === null || noc === void 0 ? void 0 : (_noc$Noc = noc.Noc) === null || _noc$Noc === void 0 ? void 0 : (_noc$Noc$applicationS = _noc$Noc.applicationStatus) === null || _noc$Noc$applicationS === void 0 ? void 0 : _noc$Noc$applicationS.toUpperCase()) != "APPROVED" && (noc === null || noc === void 0 ? void 0 : (_noc$Noc2 = noc.Noc) === null || _noc$Noc2 === void 0 ? void 0 : (_noc$Noc2$application = _noc$Noc2.applicationStatus) === null || _noc$Noc2$application === void 0 ? void 0 : _noc$Noc2$application.toUpperCase()) != "AUTO_APPROVED" && (noc === null || noc === void 0 ? void 0 : (_noc$Noc3 = noc.Noc) === null || _noc$Noc3 === void 0 ? void 0 : (_noc$Noc3$application = _noc$Noc3.applicationStatus) === null || _noc$Noc3$application === void 0 ? void 0 : _noc$Noc3$application.toUpperCase()) != "REJECTED" && (noc === null || noc === void 0 ? void 0 : (_noc$Noc4 = noc.Noc) === null || _noc$Noc4 === void 0 ? void 0 : (_noc$Noc4$application = _noc$Noc4.applicationStatus) === null || _noc$Noc4$application === void 0 ? void 0 : _noc$Noc4$application.toUpperCase()) != "AUTO_REJECTED" && (noc === null || noc === void 0 ? void 0 : (_noc$Noc5 = noc.Noc) === null || _noc$Noc5 === void 0 ? void 0 : (_noc$Noc5$application = _noc$Noc5.applicationStatus) === null || _noc$Noc5$application === void 0 ? void 0 : _noc$Noc5$application.toUpperCase()) != "VOIDED") {
          nocData.push(noc);
        }
      });
    }
    submitAction({
      BPA: applicationData
    }, (nocData === null || nocData === void 0 ? void 0 : nocData.length) > 0 ? nocData : false, {
      isStakeholder: false,
      bpa: true
    });
  }
  React.useEffect(function () {
    if (action) {
      setConfig(configBPAApproverApplication({
        t: t,
        action: action,
        approvers: approvers,
        selectedApprover: selectedApprover,
        setSelectedApprover: setSelectedApprover,
        selectFile: selectFile,
        uploadedFile: uploadedFile,
        setUploadedFile: setUploadedFile,
        businessService: businessService,
        assigneeLabel: "WF_ASSIGNEE_NAME_LABEL",
        error: error
      }));
    }
  }, [action, approvers, selectedFinancialYear, uploadedFile, error]);
  return action && config.form ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading$3, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$3, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: function actionSaveOnSubmit() {},
    formId: "modal-action",
    isOBPSFlow: true,
    popupStyles: mobileView ? {
      width: "720px"
    } : {},
    style: !mobileView ? {
      minHeight: "45px",
      height: "auto",
      width: "107px",
      paddingLeft: "0px",
      paddingRight: "0px"
    } : {
      minHeight: "45px",
      height: "auto",
      width: "44%"
    },
    popupModuleMianStyles: mobileView ? {
      paddingLeft: "5px"
    } : {}
  }, PTALoading ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    config: config.form,
    cardStyle: {
      marginLeft: "0px",
      marginRight: "0px",
      marginTop: "-25px"
    },
    className: "BPAemployeeCard",
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
};

var Heading$4 = function Heading(props) {
  return /*#__PURE__*/React__default.createElement("h1", {
    style: {
      marginLeft: "22px"
    },
    className: "heading-m BPAheading-m"
  }, props.label);
};
var Close$4 = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$4 = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$4, null));
};
var ActionModal$4 = function ActionModal(_ref) {
  var _action$assigneeRoles, _action$assigneeRoles2;
  var t = _ref.t,
    action = _ref.action,
    tenantId = _ref.tenantId,
    closeModal = _ref.closeModal,
    submitAction = _ref.submitAction,
    applicationData = _ref.applicationData,
    businessService = _ref.businessService;
  var _Digit$Hooks$useEmplo = Digit.Hooks.useEmployeeSearch(tenantId, {
      roles: action === null || action === void 0 ? void 0 : (_action$assigneeRoles = action.assigneeRoles) === null || _action$assigneeRoles === void 0 ? void 0 : (_action$assigneeRoles2 = _action$assigneeRoles.map) === null || _action$assigneeRoles2 === void 0 ? void 0 : _action$assigneeRoles2.call(_action$assigneeRoles, function (e) {
        return {
          code: e
        };
      }),
      isActive: true
    }, {
      enabled: !(action !== null && action !== void 0 && action.isTerminateState)
    }),
    approverData = _Digit$Hooks$useEmplo.data,
    PTALoading = _Digit$Hooks$useEmplo.isLoading;
  var queryClient = reactQuery.useQueryClient();
  var _useState = React.useState({}),
    config = _useState[0],
    setConfig = _useState[1];
  var _useState2 = React.useState({}),
    defaultValues = _useState2[0];
  var _useState3 = React.useState([]),
    approvers = _useState3[0],
    setApprovers = _useState3[1];
  var _useState4 = React.useState({}),
    selectedApprover = _useState4[0],
    setSelectedApprover = _useState4[1];
  var _useState5 = React.useState(null),
    file = _useState5[0],
    setFile = _useState5[1];
  var _useState6 = React.useState(null),
    uploadedFile = _useState6[0],
    setUploadedFile = _useState6[1];
  var _useState7 = React.useState(null),
    error = _useState7[0],
    setError = _useState7[1];
  var mobileView = Digit.Utils.browser.isMobile() ? true : false;
  var history = reactRouterDom.useHistory();
  React.useEffect(function () {
    var _approverData$Employe;
    setApprovers(approverData === null || approverData === void 0 ? void 0 : (_approverData$Employe = approverData.Employees) === null || _approverData$Employe === void 0 ? void 0 : _approverData$Employe.map(function (employee) {
      var _employee$user;
      return {
        uuid: employee === null || employee === void 0 ? void 0 : employee.uuid,
        name: employee === null || employee === void 0 ? void 0 : (_employee$user = employee.user) === null || _employee$user === void 0 ? void 0 : _employee$user.name
      };
    }));
  }, [approverData]);
  function selectFile(e) {
    setFile(e.target.files[0]);
  }
  React.useEffect(function () {
    (function () {
      try {
        setError(null);
        var _temp5 = function () {
          if (file) {
            var allowedFileTypesRegex = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
            var _temp6 = function () {
              if (file.size >= 5242880) {
                setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
              } else {
                var _temp7 = function () {
                  if (file !== null && file !== void 0 && file.type && !allowedFileTypesRegex.test(file === null || file === void 0 ? void 0 : file.type)) {
                    setError(t("NOT_SUPPORTED_FILE_TYPE"));
                  } else {
                    var _temp8 = _catch(function () {
                      return Promise.resolve(Digit.UploadServices.Filestorage("NOC", file, Digit.ULBService.getStateId() || (tenantId === null || tenantId === void 0 ? void 0 : tenantId.split(".")[0]))).then(function (response) {
                        var _response$data, _response$data$files;
                        if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
                          var _response$data2, _response$data2$files;
                          setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
                        } else {
                          setError(t("CS_FILE_UPLOAD_ERROR"));
                        }
                      });
                    }, function () {
                      setError(t("CS_FILE_UPLOAD_ERROR"));
                    });
                    if (_temp8 && _temp8.then) return _temp8.then(function () {});
                  }
                }();
                if (_temp7 && _temp7.then) return _temp7.then(function () {});
              }
            }();
            if (_temp6 && _temp6.then) return _temp6.then(function () {});
          }
        }();
        return _temp5 && _temp5.then ? _temp5.then(function () {}) : void 0;
      } catch (e) {
        Promise.reject(e);
      }
    })();
  }, [file]);
  function submit(data) {
    var _applicationData, _applicationData$docu, _applicationData2;
    var enteredDocs = JSON.parse(sessionStorage.getItem("NewNOCDocs"));
    var newDocs = ((_applicationData = applicationData) === null || _applicationData === void 0 ? void 0 : (_applicationData$docu = _applicationData.documents) === null || _applicationData$docu === void 0 ? void 0 : _applicationData$docu.length) > 0 ? [].concat((_applicationData2 = applicationData) === null || _applicationData2 === void 0 ? void 0 : _applicationData2.documents) : [];
    enteredDocs.map(function (d, index) {
      newDocs.push(d);
    });
    applicationData = _extends({}, applicationData, {
      workflow: {
        action: action === null || action === void 0 ? void 0 : action.action,
        comment: data !== null && data !== void 0 && data.comments ? data === null || data === void 0 ? void 0 : data.comments : null,
        assignee: !(selectedApprover !== null && selectedApprover !== void 0 && selectedApprover.uuid) ? null : [selectedApprover === null || selectedApprover === void 0 ? void 0 : selectedApprover.uuid],
        documents: uploadedFile ? [{
          documentType: (action === null || action === void 0 ? void 0 : action.action) + " DOC",
          fileName: file === null || file === void 0 ? void 0 : file.name,
          fileStoreId: uploadedFile
        }] : null
      },
      documents: newDocs
    });
    submitAction({
      Noc: applicationData
    }, false, {
      isNoc: true
    });
  }
  React.useEffect(function () {
    if (action) {
      setConfig(configNOCApproverApplication({
        t: t,
        action: action,
        approvers: approvers,
        selectedApprover: selectedApprover,
        setSelectedApprover: setSelectedApprover,
        selectFile: selectFile,
        uploadedFile: uploadedFile,
        setUploadedFile: setUploadedFile,
        businessService: businessService,
        assigneeLabel: "WF_ASSIGNEE_NAME_LABEL",
        error: error
      }));
    }
  }, [action, approvers, uploadedFile, error]);
  return action && config.form ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading$4, {
      label: t(config.label.heading)
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$4, {
      onClick: closeModal
    }),
    actionCancelLabel: t(config.label.cancel),
    actionCancelOnSubmit: closeModal,
    actionSaveLabel: t(config.label.submit),
    actionSaveOnSubmit: function actionSaveOnSubmit() {},
    formId: "modal-action",
    isOBPSFlow: true,
    popupStyles: mobileView ? {
      width: "720px"
    } : {},
    style: !mobileView ? {
      height: "45px",
      width: "107px",
      paddingLeft: "0px",
      paddingRight: "0px"
    } : {
      height: "45px",
      width: "44%"
    },
    popupModuleMianStyles: mobileView ? {
      paddingLeft: "5px"
    } : {}
  }, PTALoading ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    config: config.form,
    cardStyle: {
      marginLeft: "0px",
      marginRight: "0px",
      marginTop: "-25px"
    },
    className: "BPAemployeeCard",
    noBoxShadow: true,
    inline: true,
    childrenAtTheBottom: true,
    onSubmit: submit,
    defaultValues: defaultValues,
    formId: "modal-action"
  })) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
};

var ActionModal$5 = function ActionModal$5(props) {
  if (props !== null && props !== void 0 && props.businessService.includes("PT")) {
    return /*#__PURE__*/React__default.createElement(ActionModal, props);
  }
  if (props !== null && props !== void 0 && props.businessService.includes("NewTL") || props !== null && props !== void 0 && props.businessService.includes("TL") || props !== null && props !== void 0 && props.businessService.includes("EDITRENEWAL") || props !== null && props !== void 0 && props.businessService.includes("DIRECTRENEWAL")) {
    return /*#__PURE__*/React__default.createElement(ActionModal$1, props);
  }
  if (props !== null && props !== void 0 && props.moduleCode.includes("BPAREG")) {
    return /*#__PURE__*/React__default.createElement(ActionModal$2, props);
  }
  if (props !== null && props !== void 0 && props.moduleCode.includes("BPA")) {
    return /*#__PURE__*/React__default.createElement(ActionModal$3, props);
  }
  if (props !== null && props !== void 0 && props.moduleCode.includes("NOC")) {
    return /*#__PURE__*/React__default.createElement(ActionModal$4, props);
  }
};

function DocumentsPreview(_ref) {
  var documents = _ref.documents,
    _ref$svgStyles = _ref.svgStyles,
    svgStyles = _ref$svgStyles === void 0 ? {} : _ref$svgStyles,
    _ref$isSendBackFlow = _ref.isSendBackFlow,
    isSendBackFlow = _ref$isSendBackFlow === void 0 ? false : _ref$isSendBackFlow,
    _ref$isHrLine = _ref.isHrLine,
    isHrLine = _ref$isHrLine === void 0 ? false : _ref$isHrLine,
    titleStyles = _ref.titleStyles;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var isStakeholderApplication = window.location.href.includes("stakeholder");
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      marginTop: "19px"
    }
  }, !isStakeholderApplication && (documents === null || documents === void 0 ? void 0 : documents.map(function (document, index) {
    var _document$values;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: index
    }, document !== null && document !== void 0 && document.title ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: titleStyles ? titleStyles : {
        marginTop: "32px",
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(document === null || document === void 0 ? void 0 : document.title)) : null, /*#__PURE__*/React__default.createElement("div", {
      style: {
        display: "flex",
        flexWrap: "wrap",
        justifyContent: "flex-start"
      }
    }, document !== null && document !== void 0 && document.values && (document === null || document === void 0 ? void 0 : document.values.length) > 0 ? document === null || document === void 0 ? void 0 : (_document$values = document.values) === null || _document$values === void 0 ? void 0 : _document$values.map(function (value, index) {
      var _ref2, _value$documentType;
      return /*#__PURE__*/React__default.createElement("a", {
        target: "_",
        href: value === null || value === void 0 ? void 0 : value.url,
        style: (_ref2 = {
          minWidth: "80px",
          marginRight: "10px",
          maxWidth: "100px",
          height: "auto"
        }, _ref2["minWidth"] = "100px", _ref2),
        key: index
      }, /*#__PURE__*/React__default.createElement("div", {
        style: {
          display: "flex",
          justifyContent: "center"
        }
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.PDFSvg, null)), /*#__PURE__*/React__default.createElement("p", {
        style: {
          marginTop: "8px",
          fontWeight: "bold",
          textAlign: "center",
          color: "#505A5F"
        }
      }, t(value === null || value === void 0 ? void 0 : value.title)), isSendBackFlow ? value !== null && value !== void 0 && (_value$documentType = value.documentType) !== null && _value$documentType !== void 0 && _value$documentType.includes("NOC") ? /*#__PURE__*/React__default.createElement("p", {
        style: {
          textAlign: "center"
        }
      }, t(value === null || value === void 0 ? void 0 : value.documentType.split(".")[1])) : /*#__PURE__*/React__default.createElement("p", {
        style: {
          textAlign: "center"
        }
      }, t(value === null || value === void 0 ? void 0 : value.documentType)) : "");
    }) : !window.location.href.includes("citizen") && /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("p", null, t("BPA_NO_DOCUMENTS_UPLOADED_LABEL")))), isHrLine && (documents === null || documents === void 0 ? void 0 : documents.length) != index + 1 ? /*#__PURE__*/React__default.createElement("hr", {
      style: {
        color: "#D6D5D4",
        backgroundColor: "#D6D5D4",
        height: "2px",
        marginTop: "20px",
        marginBottom: "20px"
      }
    }) : null);
  })), isStakeholderApplication && (documents === null || documents === void 0 ? void 0 : documents.map(function (document, index) {
    var _document$values2;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: index
    }, document !== null && document !== void 0 && document.title ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: {
        marginTop: "32px",
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(document === null || document === void 0 ? void 0 : document.title)) : null, /*#__PURE__*/React__default.createElement("div", null, document !== null && document !== void 0 && document.values && (document === null || document === void 0 ? void 0 : document.values.length) > 0 ? document === null || document === void 0 ? void 0 : (_document$values2 = document.values) === null || _document$values2 === void 0 ? void 0 : _document$values2.map(function (value, index) {
      var _ref3;
      return /*#__PURE__*/React__default.createElement("a", {
        target: "_",
        href: value === null || value === void 0 ? void 0 : value.url,
        style: {
          minWidth: svgStyles !== null && svgStyles !== void 0 && svgStyles.minWidth ? svgStyles === null || svgStyles === void 0 ? void 0 : svgStyles.minWidth : "160px",
          marginRight: "20px"
        },
        key: index
      }, /*#__PURE__*/React__default.createElement("div", {
        style: {
          maxWidth: "940px",
          padding: "8px",
          borderRadius: "4px",
          border: "1px solid #D6D5D4",
          background: "#FAFAFA"
        }
      }, /*#__PURE__*/React__default.createElement("p", {
        style: {
          marginTop: "8px",
          fontWeight: "bold",
          marginBottom: "10px"
        }
      }, t(value === null || value === void 0 ? void 0 : value.title)), value !== null && value !== void 0 && value.docInfo ? /*#__PURE__*/React__default.createElement("div", {
        style: {
          fontSize: "12px",
          color: "#505A5F",
          fontWeight: 400,
          lineHeight: "15px",
          marginBottom: "10px"
        }
      }, "" + t(value === null || value === void 0 ? void 0 : value.docInfo)) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.PDFSvg, null), /*#__PURE__*/React__default.createElement("p", {
        style: (_ref3 = {
          marginTop: "8px",
          fontSize: "16px",
          lineHeight: "19px",
          color: "#505A5F",
          fontWeight: "400",
          textAlign: "center"
        }, _ref3["color"] = "#505A5F", _ref3)
      }, "" + t(value === null || value === void 0 ? void 0 : value.title))));
    }) : !window.location.href.includes("citizen") && /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("p", null, t("BPA_NO_DOCUMENTS_UPLOADED_LABEL")))));
  })));
}

var BPADocuments = function BPADocuments(_ref) {
  var _bpaActionsDetails$da, _formData$documents;
  var t = _ref.t,
    formData = _ref.formData,
    applicationData = _ref.applicationData,
    docs = _ref.docs,
    bpaActionsDetails = _ref.bpaActionsDetails;
  var applicationStatus = (applicationData === null || applicationData === void 0 ? void 0 : applicationData.status) || "";
  var actions = (bpaActionsDetails === null || bpaActionsDetails === void 0 ? void 0 : (_bpaActionsDetails$da = bpaActionsDetails.data) === null || _bpaActionsDetails$da === void 0 ? void 0 : _bpaActionsDetails$da.nextActions) || [];
  var stateId = Digit.ULBService.getStateId();
  var _useState = React.useState((formData === null || formData === void 0 ? void 0 : (_formData$documents = formData.documents) === null || _formData$documents === void 0 ? void 0 : _formData$documents.documents) || []),
    documents = _useState[0],
    setDocuments = _useState[1];
  var _useState2 = React.useState(null),
    error = _useState2[0],
    setError = _useState2[1];
  var _useState3 = React.useState([]),
    bpaTaxDocuments = _useState3[0],
    setBpaTaxDocuments = _useState3[1];
  var _useState4 = React.useState(true),
    setEnableSubmit = _useState4[1];
  var _useState5 = React.useState(false),
    checkRequiredFields = _useState5[0],
    setCheckRequiredFields = _useState5[1];
  var _useState6 = React.useState(false),
    checkEnablingDocs = _useState6[0],
    setCheckEnablingDocs = _useState6[1];
  var _Digit$Hooks$obps$use = Digit.Hooks.obps.useMDMS(stateId, "BPA", ["DocTypeMapping"]),
    bpaDocsLoading = _Digit$Hooks$obps$use.isLoading,
    bpaDocs = _Digit$Hooks$obps$use.data;
  var _Digit$Hooks$obps$use2 = Digit.Hooks.obps.useMDMS(stateId, "common-masters", ["DocumentType"]),
    commonDocsLoading = _Digit$Hooks$obps$use2.isLoading,
    commonDocs = _Digit$Hooks$obps$use2.data;
  React.useEffect(function () {
    var _bpaDocs$BPA, _filtredBpaDocs, _filtredBpaDocs$, _filtredBpaDocs$$docT;
    var filtredBpaDocs = [];
    if (bpaDocs !== null && bpaDocs !== void 0 && (_bpaDocs$BPA = bpaDocs.BPA) !== null && _bpaDocs$BPA !== void 0 && _bpaDocs$BPA.DocTypeMapping) {
      var _bpaDocs$BPA2, _bpaDocs$BPA2$DocType;
      filtredBpaDocs = bpaDocs === null || bpaDocs === void 0 ? void 0 : (_bpaDocs$BPA2 = bpaDocs.BPA) === null || _bpaDocs$BPA2 === void 0 ? void 0 : (_bpaDocs$BPA2$DocType = _bpaDocs$BPA2.DocTypeMapping) === null || _bpaDocs$BPA2$DocType === void 0 ? void 0 : _bpaDocs$BPA2$DocType.filter(function (data) {
        var _applicationData$addi, _applicationData$addi2;
        return data.WFState == (applicationData === null || applicationData === void 0 ? void 0 : applicationData.status) ? applicationData === null || applicationData === void 0 ? void 0 : applicationData.status :  data.RiskType == (applicationData === null || applicationData === void 0 ? void 0 : applicationData.riskType) && data.ServiceType == (applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$addi = applicationData.additionalDetails) === null || _applicationData$addi === void 0 ? void 0 : _applicationData$addi.serviceType) && data.applicationType == (applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$addi2 = applicationData.additionalDetails) === null || _applicationData$addi2 === void 0 ? void 0 : _applicationData$addi2.applicationType);
      });
    }
    var documentsList = [];
    (_filtredBpaDocs = filtredBpaDocs) === null || _filtredBpaDocs === void 0 ? void 0 : (_filtredBpaDocs$ = _filtredBpaDocs[0]) === null || _filtredBpaDocs$ === void 0 ? void 0 : (_filtredBpaDocs$$docT = _filtredBpaDocs$.docTypes) === null || _filtredBpaDocs$$docT === void 0 ? void 0 : _filtredBpaDocs$$docT.forEach(function (doc) {
      var _commonDocs$commonMa, _commonDocs$commonMa$, _docs$, _docs$$values;
      var code = doc.code;
      doc.dropdownData = [];
      doc.uploadedDocuments = [];
      commonDocs === null || commonDocs === void 0 ? void 0 : (_commonDocs$commonMa = commonDocs["common-masters"]) === null || _commonDocs$commonMa === void 0 ? void 0 : (_commonDocs$commonMa$ = _commonDocs$commonMa.DocumentType) === null || _commonDocs$commonMa$ === void 0 ? void 0 : _commonDocs$commonMa$.forEach(function (value) {
        var values = value.code.slice(0, code.length);
        if (code === values) {
          doc.hasDropdown = true;
          value.i18nKey = value.code;
          doc.dropdownData.push(value);
        }
      });
      doc.uploadedDocuments[0] = {};
      doc.uploadedDocuments[0].values = [];
      docs === null || docs === void 0 ? void 0 : (_docs$ = docs[0]) === null || _docs$ === void 0 ? void 0 : (_docs$$values = _docs$.values) === null || _docs$$values === void 0 ? void 0 : _docs$$values.map(function (upDocs) {
        var _upDocs$documentType, _upDocs$documentType2;
        if (code === (upDocs === null || upDocs === void 0 ? void 0 : (_upDocs$documentType = upDocs.documentType) === null || _upDocs$documentType === void 0 ? void 0 : _upDocs$documentType.split('.')[0]) + "." + (upDocs === null || upDocs === void 0 ? void 0 : (_upDocs$documentType2 = upDocs.documentType) === null || _upDocs$documentType2 === void 0 ? void 0 : _upDocs$documentType2.split('.')[1])) {
          doc.uploadedDocuments[0].values.push(upDocs);
        }
      });
      documentsList.push(doc);
    });
    sessionStorage.setItem("BPA_DOCUMENTS", JSON.stringify(documentsList));
    setBpaTaxDocuments(documentsList);
  }, [!bpaDocsLoading, !commonDocsLoading]);
  React.useEffect(function () {
    var count = 0;
    bpaTaxDocuments.map(function (doc) {
      var isRequired = false;
      documents.map(function (data) {
        if (doc.required && doc.code == data.documentType.split('.')[0] + "." + data.documentType.split('.')[1]) {
          isRequired = true;
        }
      });
      if (!isRequired && doc.required) {
        count = count + 1;
      }
    });
    if ((count == "0" || count == 0) && documents.length > 0) setEnableSubmit(false);else setEnableSubmit(true);
  }, [documents, checkRequiredFields]);
  React.useEffect(function () {
    if (applicationStatus === "DOC_VERIFICATION_INPROGRESS" && (actions === null || actions === void 0 ? void 0 : actions.length) > 0) setCheckEnablingDocs(true);else setCheckEnablingDocs(false);
  }, [applicationData, bpaActionsDetails]);
  return /*#__PURE__*/React__default.createElement("div", null, bpaTaxDocuments === null || bpaTaxDocuments === void 0 ? void 0 : bpaTaxDocuments.map(function (document, index) {
    return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(SelectDocument, {
      key: index,
      index: index,
      document: document,
      t: t,
      error: error,
      setError: setError,
      setDocuments: setDocuments,
      documents: documents,
      setCheckRequiredFields: setCheckRequiredFields,
      applicationStatus: applicationStatus,
      actions: actions,
      bpaTaxDocuments: bpaTaxDocuments,
      checkEnablingDocs: checkEnablingDocs
    }));
  }));
};
function SelectDocument(_ref2) {
  var _doc$dropdownData, _doc$uploadedDocument;
  var t = _ref2.t,
    doc = _ref2.document,
    setDocuments = _ref2.setDocuments,
    documents = _ref2.documents,
    index = _ref2.index,
    bpaTaxDocuments = _ref2.bpaTaxDocuments,
    checkEnablingDocs = _ref2.checkEnablingDocs;
  var filteredDocument = documents === null || documents === void 0 ? void 0 : documents.filter(function (item) {
    var _item$documentType;
    return item === null || item === void 0 ? void 0 : (_item$documentType = item.documentType) === null || _item$documentType === void 0 ? void 0 : _item$documentType.includes(doc === null || doc === void 0 ? void 0 : doc.code);
  })[0];
  var tenantId = Digit.ULBService.getStateId();
  var _useState7 = React.useState(filteredDocument ? _extends({}, filteredDocument, {
      active: true,
      code: filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.documentType,
      i18nKey: filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.documentType
    }) : (doc === null || doc === void 0 ? void 0 : (_doc$dropdownData = doc.dropdownData) === null || _doc$dropdownData === void 0 ? void 0 : _doc$dropdownData.length) === 1 ? doc === null || doc === void 0 ? void 0 : doc.dropdownData[0] : {}),
    selectedDocument = _useState7[0],
    setSelectedDocument = _useState7[1];
  var _useState8 = React.useState(null),
    file = _useState8[0],
    setFile = _useState8[1];
  var _useState9 = React.useState(function () {
      return (filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.fileStoreId) || null;
    }),
    uploadedFile = _useState9[0];
  var _useState10 = React.useState([]),
    selectArrayFiles = _useState10[0],
    SetSelectArrayFiles = _useState10[1];
  var handleSelectDocument = function handleSelectDocument(value) {
    return setSelectedDocument(value);
  };
  var allowedFileTypes = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
  function selectfiles(e) {
    e && setFile(e.file);
  }
  React.useEffect(function () {
    if (selectedDocument !== null && selectedDocument !== void 0 && selectedDocument.code) {
      setDocuments(function (prev) {
        var _documents$find;
        var filteredDocumentsByDocumentType = prev === null || prev === void 0 ? void 0 : prev.filter(function (item) {
          return (item === null || item === void 0 ? void 0 : item.documentType) !== (selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code);
        });
        if ((uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.length) === 0 || uploadedFile === null) return filteredDocumentsByDocumentType;
        var filteredDocumentsByFileStoreId = filteredDocumentsByDocumentType === null || filteredDocumentsByDocumentType === void 0 ? void 0 : filteredDocumentsByDocumentType.filter(function (item) {
          return (item === null || item === void 0 ? void 0 : item.fileStoreId) !== uploadedFile;
        });
        return [].concat(filteredDocumentsByFileStoreId, [{
          documentType: selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code,
          fileStoreId: uploadedFile,
          documentUid: uploadedFile,
          fileName: (file === null || file === void 0 ? void 0 : file.name) || "",
          id: documents ? (_documents$find = documents.find(function (x) {
            return x.documentType === (selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code);
          })) === null || _documents$find === void 0 ? void 0 : _documents$find.id : undefined
        }]);
      });
    }
  }, [uploadedFile, selectedDocument]);
  React.useEffect(function () {
    try {
      if (selectArrayFiles.length > 0) {
        sessionStorage.removeItem("BPA_DOCUMENTS");
        doc.newUploadedDocs = [];
        selectArrayFiles.map(function (newDoc) {
          if (selectedDocument !== null && selectedDocument !== void 0 && selectedDocument.code) {
            var _newDoc$fileStoreId, _newDoc$fileStoreId2, _newDoc$fileStoreId3;
            doc.newUploadedDocs.push({
              documentType: selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code,
              fileStoreId: newDoc === null || newDoc === void 0 ? void 0 : (_newDoc$fileStoreId = newDoc.fileStoreId) === null || _newDoc$fileStoreId === void 0 ? void 0 : _newDoc$fileStoreId.fileStoreId,
              documentUid: newDoc === null || newDoc === void 0 ? void 0 : (_newDoc$fileStoreId2 = newDoc.fileStoreId) === null || _newDoc$fileStoreId2 === void 0 ? void 0 : _newDoc$fileStoreId2.fileStoreId,
              tenantId: newDoc === null || newDoc === void 0 ? void 0 : (_newDoc$fileStoreId3 = newDoc.fileStoreId) === null || _newDoc$fileStoreId3 === void 0 ? void 0 : _newDoc$fileStoreId3.tenantId
            });
          }
        });
        bpaTaxDocuments[index] = doc;
        sessionStorage.setItem("BPA_DOCUMENTS", JSON.stringify(bpaTaxDocuments));
      }
    } catch (e) {
      Promise.reject(e);
    }
  }, [selectArrayFiles, selectedDocument]);
  React.useEffect(function () {
  }, [file]);
  var getData = function getData(index, state) {
    var data = Object.fromEntries(state);
    var newArr = Object.values(data);
    if (Object.keys(data).length !== 0) SetSelectArrayFiles(newArr);
    selectfiles(newArr[newArr.length - 1]);
  };
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      marginBottom: "24px",
      maxWidth: "950px",
      minWidth: "280px",
      background: "#FAFAFA",
      borderRadius: "4px",
      border: "1px solid #D6D5D4",
      padding: "8px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
    style: {
      marginBottom: "8px",
      paddingBottom: "9px",
      color: "#0B0C0C",
      fontSize: "16px",
      lineHeight: "19px"
    }
  }, "" + t(doc === null || doc === void 0 ? void 0 : doc.code)), (doc === null || doc === void 0 ? void 0 : (_doc$uploadedDocument = doc.uploadedDocuments) === null || _doc$uploadedDocument === void 0 ? void 0 : _doc$uploadedDocument.length) && /*#__PURE__*/React__default.createElement(DocumentsPreview, {
    documents: doc === null || doc === void 0 ? void 0 : doc.uploadedDocuments,
    svgStyles: {
      width: "100px",
      height: "100px",
      viewBox: "0 0 25 25",
      minWidth: "100px"
    }
  }), checkEnablingDocs ? /*#__PURE__*/React__default.createElement("div", {
    style: {
      marginTop: "20px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, {
    style: {
      width: "100%"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    style: {
      marginTop: "-10px",
      width: "100%"
    }
  }, doc !== null && doc !== void 0 && doc.required ? t(doc === null || doc === void 0 ? void 0 : doc.code) + "* " : "" + t(doc === null || doc === void 0 ? void 0 : doc.code)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
    className: "form-field",
    t: t,
    isMandatory: false,
    option: doc === null || doc === void 0 ? void 0 : doc.dropdownData,
    selected: selectedDocument,
    optionKey: "i18nKey",
    select: handleSelectDocument,
    style: {
      width: "100%"
    }
  })), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, {
    style: {
      width: "100%"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller",
    style: {
      width: "100%"
    }
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "field",
    style: {
      width: "100%"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiUploadWrapper, {
    module: "BPA",
    tenantId: tenantId,
    getFormState: function getFormState(e) {
      return getData(index, e);
    },
    t: t,
    allowedFileTypesRegex: allowedFileTypes,
    allowedMaxSizeInMB: 5,
    acceptFiles: "image/*, .pdf, .png, .jpeg, .jpg"
  })))) : null);
}

var getDocuments = function getDocuments(fiDocuments) {
  var returnDocuments = [{
    title: "BPA_DOCUMENT_DETAILS_LABEL",
    values: fiDocuments === null || fiDocuments === void 0 ? void 0 : fiDocuments.map(function (doc) {
      var _doc$documentType;
      return {
        title: doc === null || doc === void 0 ? void 0 : (_doc$documentType = doc.documentType) === null || _doc$documentType === void 0 ? void 0 : _doc$documentType.replaceAll('.', '_'),
        documentType: doc === null || doc === void 0 ? void 0 : doc.documentType,
        documentUid: doc === null || doc === void 0 ? void 0 : doc.documentUid,
        fileStoreId: doc === null || doc === void 0 ? void 0 : doc.fileStoreId,
        id: doc === null || doc === void 0 ? void 0 : doc.id,
        url: doc === null || doc === void 0 ? void 0 : doc.url
      };
    })
  }];
  return returnDocuments;
};
function InspectionReport(_ref) {
  var fiReport = _ref.fiReport,
    _ref$isCitizen = _ref.isCitizen,
    isCitizen = _ref$isCitizen === void 0 ? false : _ref$isCitizen;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    style: {
      marginTop: "10px"
    }
  }, isCitizen ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardHeader, {
    style: {
      fontSize: "24px"
    }
  }, "" + t("BPA_FI_REPORT")) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, {
    style: {
      fontSize: "24px"
    }
  }, "" + t("BPA_FI_REPORT")), fiReport.map(function (fiData, index) {
    var _fiData$date, _fiData$date2, _fiData$date3, _fiData$questions, _fiData$questions2;
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        background: "#FAFAFA",
        border: "1px solid #D6D5D4",
        padding: "8px",
        borderRadius: "4px",
        maxWidth: "950px",
        minWidth: "280px",
        marginBottom: "24px"
      }
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, {
      style: {
        fontSize: "20px"
      }
    }, (fiReport === null || fiReport === void 0 ? void 0 : fiReport.length) == 1 ? "" + t("BPA_FI_REPORT") : t("BPA_FI_REPORT") + " - " + (index + 1)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
      className: "border-none",
      label: "" + t("BPA_FI_DATE_LABEL"),
      text: fiData !== null && fiData !== void 0 && fiData.date ? fiData.date.includes("-") ? ((_fiData$date = fiData.date) === null || _fiData$date === void 0 ? void 0 : _fiData$date.split("-")[2]) + "/" + ((_fiData$date2 = fiData.date) === null || _fiData$date2 === void 0 ? void 0 : _fiData$date2.split("-")[1]) + "/" + ((_fiData$date3 = fiData.date) === null || _fiData$date3 === void 0 ? void 0 : _fiData$date3.split("-")[0]) : fiData === null || fiData === void 0 ? void 0 : fiData.date : "NA"
    }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
      className: "border-none",
      label: "" + t("BPA_FI_TIME_LABEL"),
      text: fiData !== null && fiData !== void 0 && fiData.time ? fiData === null || fiData === void 0 ? void 0 : fiData.time : "NA"
    }), (fiData === null || fiData === void 0 ? void 0 : (_fiData$questions = fiData.questions) === null || _fiData$questions === void 0 ? void 0 : _fiData$questions.length) && (fiData === null || fiData === void 0 ? void 0 : (_fiData$questions2 = fiData.questions) === null || _fiData$questions2 === void 0 ? void 0 : _fiData$questions2.map(function (qstn) {
      return /*#__PURE__*/React__default.createElement("div", {
        style: {
          background: "white",
          border: "1px solid #D6D5D4",
          padding: "8px",
          borderRadius: "4px",
          marginTop: "10px"
        }
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
        className: "border-none",
        label: "" + t("" + qstn.question),
        text: qstn !== null && qstn !== void 0 && qstn.value ? qstn === null || qstn === void 0 ? void 0 : qstn.value : "NA"
      }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
        className: "border-none",
        label: "" + t("BPA_ENTER_REMARKS"),
        text: qstn.remarks ? qstn.remarks : "NA"
      }));
    })), /*#__PURE__*/React__default.createElement(DocumentsPreview, {
      documents: getDocuments(fiData === null || fiData === void 0 ? void 0 : fiData.docs),
      svgStyles: {
        width: "100px",
        height: "100px",
        viewBox: "0 0 25 25",
        minWidth: "100px"
      }
    })));
  })));
}

function SelectDocument$1(_ref) {
  var t = _ref.t,
    doc = _ref.document,
    setNocDocuments = _ref.setNocDocuments,
    setError = _ref.setError,
    nocDocuments = _ref.nocDocuments;
  var filteredDocument = nocDocuments === null || nocDocuments === void 0 ? void 0 : nocDocuments.filter(function (item) {
    var _item$documentType;
    return item === null || item === void 0 ? void 0 : (_item$documentType = item.documentType) === null || _item$documentType === void 0 ? void 0 : _item$documentType.includes(doc === null || doc === void 0 ? void 0 : doc.code);
  })[0];
  var tenantId = Digit.ULBService.getStateId();
  var _useState = React.useState();
  var _useState2 = React.useState(null),
    file = _useState2[0],
    setFile = _useState2[1];
  var _useState3 = React.useState(function () {
      return (filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.fileStoreId) || null;
    }),
    uploadedFile = _useState3[0],
    setUploadedFile = _useState3[1];
  var allowedFileTypes = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
  function selectfile(e) {
    e && setFile(e.file);
  }
  React.useEffect(function () {
    var _doc$dropdownData, _doc$dropdownData$;
    if (doc !== null && doc !== void 0 && (_doc$dropdownData = doc.dropdownData) !== null && _doc$dropdownData !== void 0 && (_doc$dropdownData$ = _doc$dropdownData[0]) !== null && _doc$dropdownData$ !== void 0 && _doc$dropdownData$.code) {
      setNocDocuments(function (prev) {
        var _doc$dropdownData3;
        var filteredDocumentsByDocumentType = prev === null || prev === void 0 ? void 0 : prev.filter(function (item) {
          var _doc$dropdownData2, _doc$dropdownData2$;
          return (item === null || item === void 0 ? void 0 : item.documentType) !== (doc === null || doc === void 0 ? void 0 : (_doc$dropdownData2 = doc.dropdownData) === null || _doc$dropdownData2 === void 0 ? void 0 : (_doc$dropdownData2$ = _doc$dropdownData2[0]) === null || _doc$dropdownData2$ === void 0 ? void 0 : _doc$dropdownData2$.code);
        });
        if ((uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.length) === 0 || uploadedFile === null) {
          return filteredDocumentsByDocumentType;
        }
        var filteredDocumentsByFileStoreId = filteredDocumentsByDocumentType === null || filteredDocumentsByDocumentType === void 0 ? void 0 : filteredDocumentsByDocumentType.filter(function (item) {
          return (item === null || item === void 0 ? void 0 : item.fileStoreId) !== uploadedFile;
        });
        return [].concat(filteredDocumentsByFileStoreId, [{
          documentType: doc === null || doc === void 0 ? void 0 : (_doc$dropdownData3 = doc.dropdownData) === null || _doc$dropdownData3 === void 0 ? void 0 : _doc$dropdownData3[0].code,
          fileStoreId: uploadedFile,
          documentUid: uploadedFile,
          fileName: (file === null || file === void 0 ? void 0 : file.name) || ""
        }]);
      });
    }
  }, [uploadedFile]);
  React.useEffect(function () {
    (function () {
      try {
        setError(null);
        var _temp5 = function () {
          if (file) {
            var allowedFileTypesRegex = /(.*?)(jpg|jpeg|png|image|pdf)$/i;
            var _temp6 = function () {
              if (file.size >= 5242880) {
                setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
              } else {
                var _temp7 = function () {
                  if (file !== null && file !== void 0 && file.type && !allowedFileTypesRegex.test(file === null || file === void 0 ? void 0 : file.type)) {
                    setError(t("NOT_SUPPORTED_FILE_TYPE"));
                  } else {
                    var _temp8 = _catch(function () {
                      setUploadedFile(null);
                      return Promise.resolve(Digit.UploadServices.Filestorage("PT", file, Digit.ULBService.getStateId())).then(function (response) {
                        var _response$data, _response$data$files;
                        if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
                          var _response$data2, _response$data2$files;
                          setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
                        } else {
                          setError(t("CS_FILE_UPLOAD_ERROR"));
                        }
                      });
                    }, function () {
                      setError(t("CS_FILE_UPLOAD_ERROR"));
                    });
                    if (_temp8 && _temp8.then) return _temp8.then(function () {});
                  }
                }();
                if (_temp7 && _temp7.then) return _temp7.then(function () {});
              }
            }();
            if (_temp6 && _temp6.then) return _temp6.then(function () {});
          }
        }();
        return _temp5 && _temp5.then ? _temp5.then(function () {}) : void 0;
      } catch (e) {
        Promise.reject(e);
      }
    })();
  }, [file]);
  var getData = function getData(state) {
    var data = Object.fromEntries(state);
    var newArr = Object.values(data);
    selectfile(newArr[newArr.length - 1]);
  };
  return /*#__PURE__*/React__default.createElement("div", {
    style: {}
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, {
    style: {
      width: "98%",
      marginRight: "10px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    style: {
      width: "100%"
    }
  }, doc !== null && doc !== void 0 && doc.required ? t("TL_BUTTON_UPLOAD FILE") + "*" : "" + t("TL_BUTTON_UPLOAD FILE")), /*#__PURE__*/React__default.createElement("div", {
    className: "field",
    style: {
      width: "100%"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiUploadWrapper, {
    module: "NOC",
    tenantId: tenantId,
    getFormState: function getFormState(e) {
      return getData(e);
    },
    t: t,
    allowedFileTypesRegex: allowedFileTypes,
    allowedMaxSizeInMB: 5,
    acceptFiles: "image/*, .pdf, .png, .jpeg, .jpg"
  }))));
}
var NOCDocuments = function NOCDocuments(_ref2) {
  var _bpaActionsDetails$da;
  var t = _ref2.t,
    noc = _ref2.noc,
    docs = _ref2.docs,
    isNoc = _ref2.isNoc,
    applicationData = _ref2.applicationData,
    NOCdata = _ref2.NOCdata,
    bpaActionsDetails = _ref2.bpaActionsDetails;
  var tenantId = Digit.ULBService.getStateId();
  var stateId = Digit.ULBService.getStateId();
  var bpaApplicationStatus = (applicationData === null || applicationData === void 0 ? void 0 : applicationData.status) || "";
  var actions = (bpaActionsDetails === null || bpaActionsDetails === void 0 ? void 0 : (_bpaActionsDetails$da = bpaActionsDetails.data) === null || _bpaActionsDetails$da === void 0 ? void 0 : _bpaActionsDetails$da.nextActions) || [];
  var _Digit$Hooks$obps$use = Digit.Hooks.obps.useMDMS(stateId, "NOC", ["DocumentTypeMapping"], {
      enabled: isNoc
    }),
    nocDocs = _Digit$Hooks$obps$use.data;
  var _Digit$Hooks$obps$use2 = Digit.Hooks.obps.useMDMS(stateId, "BPA", ["DocTypeMapping"], {
      enabled: !isNoc
    }),
    bpaDocs = _Digit$Hooks$obps$use2.data;
  var _Digit$Hooks$obps$use3 = Digit.Hooks.obps.useMDMS(stateId, "common-masters", ["DocumentType"]),
    commonDocs = _Digit$Hooks$obps$use3.data;
  var _useState4 = React.useState([]),
    commonDocMaping = _useState4[0],
    setCommonDocMaping = _useState4[1];
  var _useState5 = React.useState([]),
    nocTaxDocuments = _useState5[0],
    setNocTaxDocuments = _useState5[1];
  var _useState6 = React.useState(false),
    checkEnablingDocs = _useState6[0],
    setCheckEnablingDocs = _useState6[1];
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage(noc === null || noc === void 0 ? void 0 : noc.nocType, []),
    nocDocuments = _Digit$Hooks$useSessi[0],
    setNocDocuments = _Digit$Hooks$useSessi[1];
  var _useState7 = React.useState(null),
    error = _useState7[0],
    setError = _useState7[1];
  var isEmployee = window.location.href.includes("/employee/");
  React.useEffect(function () {
    var _commonDocs$commonMa;
    setCommonDocMaping(commonDocs === null || commonDocs === void 0 ? void 0 : (_commonDocs$commonMa = commonDocs["common-masters"]) === null || _commonDocs$commonMa === void 0 ? void 0 : _commonDocs$commonMa.DocumentType);
  }, [commonDocs]);
  React.useEffect(function () {
    var _filteredData, _filteredData$, _filteredData$$docTyp;
    var documents = [];
    var filteredData;
    if (isNoc) {
      var _nocDocs$NOC, _nocDocs$NOC$Document;
      filteredData = nocDocs === null || nocDocs === void 0 ? void 0 : (_nocDocs$NOC = nocDocs.NOC) === null || _nocDocs$NOC === void 0 ? void 0 : (_nocDocs$NOC$Document = _nocDocs$NOC.DocumentTypeMapping) === null || _nocDocs$NOC$Document === void 0 ? void 0 : _nocDocs$NOC$Document.filter(function (data) {
        return (data === null || data === void 0 ? void 0 : data.applicationType) === (noc === null || noc === void 0 ? void 0 : noc.applicationType) && (data === null || data === void 0 ? void 0 : data.nocType) === (noc === null || noc === void 0 ? void 0 : noc.nocType);
      });
    } else {
      var _bpaDocs$BPA, _bpaDocs$BPA$DocTypeM;
      filteredData = bpaDocs === null || bpaDocs === void 0 ? void 0 : (_bpaDocs$BPA = bpaDocs.BPA) === null || _bpaDocs$BPA === void 0 ? void 0 : (_bpaDocs$BPA$DocTypeM = _bpaDocs$BPA.DocTypeMapping) === null || _bpaDocs$BPA$DocTypeM === void 0 ? void 0 : _bpaDocs$BPA$DocTypeM.filter(function (data) {
        var _applicationData$addi, _applicationData$addi2;
        return data.WFState == (applicationData === null || applicationData === void 0 ? void 0 : applicationData.status) && data.RiskType == (applicationData === null || applicationData === void 0 ? void 0 : applicationData.riskType) && data.ServiceType == (applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$addi = applicationData.additionalDetails) === null || _applicationData$addi === void 0 ? void 0 : _applicationData$addi.serviceType) && data.applicationType == (applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$addi2 = applicationData.additionalDetails) === null || _applicationData$addi2 === void 0 ? void 0 : _applicationData$addi2.applicationType);
      });
    }
    if ((_filteredData = filteredData) !== null && _filteredData !== void 0 && (_filteredData$ = _filteredData[0]) !== null && _filteredData$ !== void 0 && (_filteredData$$docTyp = _filteredData$.docTypes) !== null && _filteredData$$docTyp !== void 0 && _filteredData$$docTyp[0]) {
      filteredData[0].docTypes[0].nocType = filteredData[0].nocType;
      filteredData[0].docTypes[0].additionalDetails = {
        submissionDetails: noc === null || noc === void 0 ? void 0 : noc.additionalDetails,
        applicationStatus: noc === null || noc === void 0 ? void 0 : noc.applicationStatus,
        appNumberLink: noc === null || noc === void 0 ? void 0 : noc.applicationNo,
        nocNo: noc === null || noc === void 0 ? void 0 : noc.nocNo
      };
      documents.push(filteredData[0].docTypes[0]);
    }
    var documentsList = [];
    if (documents && documents.length > 0) {
      documents.map(function (doc) {
        var code = doc.documentType;
        doc.dropdownData = [];
        commonDocMaping === null || commonDocMaping === void 0 ? void 0 : commonDocMaping.forEach(function (value) {
          var values = value.code.slice(0, code === null || code === void 0 ? void 0 : code.length);
          if (code === values) {
            doc.hasDropdown = true;
            doc.dropdownData.push(value);
          }
        });
        documentsList.push(doc);
      });
      setNocTaxDocuments(documentsList);
    }
  }, [nocDocs, commonDocMaping]);
  React.useEffect(function () {
    if (bpaApplicationStatus === 'NOC_VERIFICATION_INPROGRESS' && (actions === null || actions === void 0 ? void 0 : actions.length) > 0) setCheckEnablingDocs(true);else setCheckEnablingDocs(false);
  }, [applicationData, bpaActionsDetails]);
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      border: "1px solid #D6D5D4",
      padding: "16px 0px 16px 8px",
      background: "#FAFAFA",
      borderRadius: "5px",
      marginBottom: "24px",
      maxWidth: "950px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
    label: isEmployee ? "" + t("BPA_" + (noc === null || noc === void 0 ? void 0 : noc.nocType) + "_HEADER") : t("BPA_" + (noc === null || noc === void 0 ? void 0 : noc.nocType) + "_HEADER"),
    labelStyle: {
      fontSize: "20px",
      width: "150%"
    }
  }), NOCdata && NOCdata.map(function (noc, index) {
    if (noc !== null && noc !== void 0 && noc.value) {
      if ((noc === null || noc === void 0 ? void 0 : noc.field) == "STATUS") {
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
          className: "border-none",
          label: isEmployee ? "" + t(noc === null || noc === void 0 ? void 0 : noc.title) : t(noc === null || noc === void 0 ? void 0 : noc.title),
          text: noc !== null && noc !== void 0 && noc.value ? t(noc === null || noc === void 0 ? void 0 : noc.value) : t("CS_NA"),
          textStyle: (noc === null || noc === void 0 ? void 0 : noc.value) == "APPROVED" || (noc === null || noc === void 0 ? void 0 : noc.value) == "AUTO_APPROVED" ? {
            color: "#00703C"
          } : {
            color: "#D4351C"
          }
        });
      } else {
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
          className: "border-none",
          label: isEmployee ? "" + t(noc === null || noc === void 0 ? void 0 : noc.title) : t(noc === null || noc === void 0 ? void 0 : noc.title),
          text: noc !== null && noc !== void 0 && noc.value ? t(noc === null || noc === void 0 ? void 0 : noc.value) : t("CS_NA")
        });
      }
    }
  })), /*#__PURE__*/React__default.createElement(DocumentsPreview, {
    documents: docs,
    svgStyles: {
      width: "80px",
      height: "100px",
      viewBox: "0 0 25 25",
      minWidth: "80px"
    }
  }), checkEnablingDocs && (nocTaxDocuments === null || nocTaxDocuments === void 0 ? void 0 : nocTaxDocuments.map(function (document, index) {
    return /*#__PURE__*/React__default.createElement(SelectDocument$1, {
      key: index,
      document: document,
      t: t,
      error: error,
      setError: setError,
      setNocDocuments: setNocDocuments,
      nocDocuments: nocDocuments,
      checkEnablingDocs: checkEnablingDocs
    });
  })));
};

var PermissionCheck = function PermissionCheck(_ref) {
  var permissions = _ref.permissions,
    t = _ref.t;
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage("OBPS_APPROVAL_CHECKS", permissions === null || permissions === void 0 ? void 0 : permissions.map(function (permission) {
      return {
        label: permission,
        checked: false
      };
    })),
    approvalChecks = _Digit$Hooks$useSessi[0],
    setApprovalChecks = _Digit$Hooks$useSessi[1];
  var _Digit$Hooks$useSessi2 = Digit.Hooks.useSessionStorage('OBPS_NEW_APPROVALS', []),
    newApprovals = _Digit$Hooks$useSessi2[0],
    setNewApprovals = _Digit$Hooks$useSessi2[1];
  React.useEffect(function () {
    return function () {
      Digit.SessionStorage.del("OBPS_NEW_APPROVALS");
      Digit.SessionStorage.del("OBPS_APPROVAL_CHECKS");
    };
  }, []);
  var handleAdd = function handleAdd() {
    setNewApprovals([].concat(newApprovals, [{
      label: ''
    }]));
  };
  var handleRemove = function handleRemove(index) {
    var values = [].concat(newApprovals);
    values.splice(index, 1);
    setNewApprovals([].concat(values));
  };
  var handleChange = function handleChange(event, index) {
    setNewApprovals(function () {
      return newApprovals === null || newApprovals === void 0 ? void 0 : newApprovals.map(function (approval, id) {
        if (index === id) {
          var _event$target;
          return {
            label: event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value
          };
        }
        return approval;
      });
    });
  };
  var handleCheck = function handleCheck(event, label, index) {
    var isChecked = event.target.checked;
    setApprovalChecks(function () {
      return approvalChecks === null || approvalChecks === void 0 ? void 0 : approvalChecks.map(function (approval, id) {
        if (index === id) {
          return _extends({}, approval, {
            checked: isChecked
          });
        }
        return approval;
      });
    });
  };
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
    style: {
      marginBottom: "16px",
      fontSize: "24px"
    }
  }, t("BPA_PERMIT_CONDITIONS")), approvalChecks === null || approvalChecks === void 0 ? void 0 : approvalChecks.map(function (permission, index) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.CheckBox, {
      key: index,
      styles: {
        margin: "20px 0 40px",
        maxWidth: "70%"
      },
      label: permission === null || permission === void 0 ? void 0 : permission.label,
      checked: permission === null || permission === void 0 ? void 0 : permission.checked,
      onChange: function onChange(event) {
        return handleCheck(event, permission === null || permission === void 0 ? void 0 : permission.label, index);
      },
      isLabelFirst: true,
      index: index
    });
  }), newApprovals === null || newApprovals === void 0 ? void 0 : newApprovals.map(function (approval, index) {
    return /*#__PURE__*/React__default.createElement("div", null, " ", /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
      key: index,
      value: approval === null || approval === void 0 ? void 0 : approval.label,
      onChange: function onChange(event) {
        return handleChange(event, index);
      },
      textInputStyle: {
        maxWidth: "830px",
        width: "830px"
      },
      placeholder: "Enter permit conditions.........."
    }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LinkButton, {
      label: /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("span", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Close, {
        style: {
          float: "right",
          position: "relative",
          bottom: "32px",
          marginTop: "-21px",
          marginRight: "35%"
        }
      }))),
      style: {},
      onClick: function onClick(e) {
        return handleRemove(index);
      }
    }));
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LinkButton, {
    style: {
      color: "#f47738",
      maxWidth: "10%",
      marginRight: "3%"
    },
    label: t("BPA_ADD_MORE"),
    onClick: handleAdd
  }));
};

function PropertyDocuments(_ref) {
  var documents = _ref.documents,
    _ref$svgStyles = _ref.svgStyles,
    svgStyles = _ref$svgStyles === void 0 ? {} : _ref$svgStyles,
    _ref$isSendBackFlow = _ref.isSendBackFlow,
    isSendBackFlow = _ref$isSendBackFlow === void 0 ? false : _ref$isSendBackFlow;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useState = React.useState(function () {
      return [];
    }),
    filesArray = _useState[0],
    setFilesArray = _useState[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useState2 = React.useState({}),
    pdfFiles = _useState2[0],
    setPdfFiles = _useState2[1];
  React.useEffect(function () {
    var _acc;
    var acc = [];
    documents === null || documents === void 0 ? void 0 : documents.forEach(function (element, index, array) {
      acc = [].concat(acc, element.values ? element.values : []);
    });
    setFilesArray((_acc = acc) === null || _acc === void 0 ? void 0 : _acc.map(function (value) {
      return value === null || value === void 0 ? void 0 : value.fileStoreId;
    }));
  }, [documents]);
  React.useEffect(function () {
    if (filesArray !== null && filesArray !== void 0 && filesArray.length) {
      Digit.UploadServices.Filefetch(filesArray, Digit.ULBService.getStateId()).then(function (res) {
        setPdfFiles(res === null || res === void 0 ? void 0 : res.data);
      });
    }
  }, [filesArray]);
  var checkLocation = window.location.href.includes("employee/tl") || window.location.href.includes("/obps");
  var isStakeholderApplication = window.location.href.includes("stakeholder");
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      marginTop: "19px"
    }
  }, !isStakeholderApplication && (documents === null || documents === void 0 ? void 0 : documents.map(function (document, index) {
    var _document$values;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: index
    }, document !== null && document !== void 0 && document.title ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: checkLocation ? {
        marginTop: "32px",
        marginBottom: "18px",
        color: "#0B0C0C, 100%",
        fontSize: "24px",
        lineHeight: "30px"
      } : {
        marginTop: "32px",
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(document === null || document === void 0 ? void 0 : document.title)) : null, /*#__PURE__*/React__default.createElement("div", {
      style: {
        display: "flex",
        flexWrap: "wrap",
        justifyContent: "flex-start"
      }
    }, document !== null && document !== void 0 && document.values && (document === null || document === void 0 ? void 0 : document.values.length) > 0 ? document === null || document === void 0 ? void 0 : (_document$values = document.values) === null || _document$values === void 0 ? void 0 : _document$values.map(function (value, index) {
      var _pdfFiles$value$fileS, _value$documentType;
      return /*#__PURE__*/React__default.createElement("a", {
        target: "_",
        href: (_pdfFiles$value$fileS = pdfFiles[value.fileStoreId]) === null || _pdfFiles$value$fileS === void 0 ? void 0 : _pdfFiles$value$fileS.split(",")[0],
        style: {
          minWidth: "80px",
          marginRight: "10px",
          maxWidth: "100px",
          height: "auto"
        },
        key: index
      }, /*#__PURE__*/React__default.createElement("div", {
        style: {
          display: "flex",
          justifyContent: "center"
        }
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.PDFSvg, null)), /*#__PURE__*/React__default.createElement("p", {
        style: checkLocation ? {
          marginTop: "8px",
          fontWeight: "bold",
          fontSize: "16px",
          lineHeight: "19px",
          color: "#505A5F",
          textAlign: "center"
        } : {
          marginTop: "8px",
          fontWeight: "bold"
        }
      }, t(value === null || value === void 0 ? void 0 : value.title)), isSendBackFlow ? value !== null && value !== void 0 && (_value$documentType = value.documentType) !== null && _value$documentType !== void 0 && _value$documentType.includes("NOC") ? /*#__PURE__*/React__default.createElement("p", {
        style: {
          textAlign: "center"
        }
      }, t(value === null || value === void 0 ? void 0 : value.documentType.split(".")[1])) : /*#__PURE__*/React__default.createElement("p", {
        style: {
          textAlign: "center"
        }
      }, t(value === null || value === void 0 ? void 0 : value.documentType)) : "");
    }) : !window.location.href.includes("citizen") && /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("p", null, t("BPA_NO_DOCUMENTS_UPLOADED_LABEL")))));
  })), isStakeholderApplication && (documents === null || documents === void 0 ? void 0 : documents.map(function (document, index) {
    var _document$values2;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: index
    }, document !== null && document !== void 0 && document.title ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: {
        marginTop: "32px",
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(document === null || document === void 0 ? void 0 : document.title)) : null, /*#__PURE__*/React__default.createElement("div", null, document !== null && document !== void 0 && document.values && (document === null || document === void 0 ? void 0 : document.values.length) > 0 ? document === null || document === void 0 ? void 0 : (_document$values2 = document.values) === null || _document$values2 === void 0 ? void 0 : _document$values2.map(function (value, index) {
      var _pdfFiles$value$fileS2;
      return /*#__PURE__*/React__default.createElement("a", {
        target: "_",
        href: (_pdfFiles$value$fileS2 = pdfFiles[value.fileStoreId]) === null || _pdfFiles$value$fileS2 === void 0 ? void 0 : _pdfFiles$value$fileS2.split(",")[0],
        style: {
          minWidth: svgStyles !== null && svgStyles !== void 0 && svgStyles.minWidth ? svgStyles === null || svgStyles === void 0 ? void 0 : svgStyles.minWidth : "160px",
          marginRight: "20px"
        },
        key: index
      }, /*#__PURE__*/React__default.createElement("div", {
        style: {
          maxWidth: "940px",
          padding: "8px",
          borderRadius: "4px",
          border: "1px solid #D6D5D4",
          background: "#FAFAFA"
        }
      }, /*#__PURE__*/React__default.createElement("p", {
        style: {
          marginTop: "8px",
          fontWeight: "bold",
          marginBottom: "10px"
        }
      }, t(value === null || value === void 0 ? void 0 : value.title)), value !== null && value !== void 0 && value.docInfo ? /*#__PURE__*/React__default.createElement("div", {
        style: {
          fontSize: "12px",
          color: "#505A5F",
          fontWeight: 400,
          lineHeight: "15px",
          marginBottom: "10px"
        }
      }, "" + t(value === null || value === void 0 ? void 0 : value.docInfo)) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.PDFSvg, null), /*#__PURE__*/React__default.createElement("p", {
        style: {
          marginTop: "8px",
          fontSize: "16px",
          lineHeight: "19px",
          color: "#505A5F",
          fontWeight: "400"
        }
      }, "" + t(value === null || value === void 0 ? void 0 : value.title))));
    }) : !window.location.href.includes("citizen") && /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("p", null, t("BPA_NO_DOCUMENTS_UPLOADED_LABEL")))));
  })));
}

function PropertyEstimates(_ref) {
  var taxHeadEstimatesCalculation = _ref.taxHeadEstimatesCalculation;
  var taxHeadEstimates = taxHeadEstimatesCalculation.taxHeadEstimates;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      marginTop: "40px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
    label: t("ES_PT_TITLE_TAX_HEADS"),
    text: t("ES_PT_TITLE_AMOUNT"),
    className: "border-none",
    textStyle: {
      fontWeight: "bold"
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.BreakLine, {
    style: {
      margin: "16px 0",
      width: "40%"
    }
  }), taxHeadEstimates === null || taxHeadEstimates === void 0 ? void 0 : taxHeadEstimates.map(function (estimate, index) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
      key: t(estimate.taxHeadCode),
      label: t(estimate.taxHeadCode),
      text: "\u20B9 " + estimate.estimateAmount || "N/A",
      last: index === (taxHeadEstimates === null || taxHeadEstimates === void 0 ? void 0 : taxHeadEstimates.length) - 1,
      className: "border-none",
      textStyle: {
        color: "#505A5F"
      },
      labelStyle: {
        color: "#505A5F"
      }
    });
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.BreakLine, {
    style: {
      margin: "16px 0",
      width: "40%"
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
    label: t("ES_PT_TITLE_TOTAL_DUE_AMOUNT"),
    text: "\u20B9 " + (taxHeadEstimatesCalculation === null || taxHeadEstimatesCalculation === void 0 ? void 0 : taxHeadEstimatesCalculation.totalAmount) || "N/A",
    className: "border-none",
    textStyle: {
      fontSize: "24px",
      fontWeight: "bold"
    }
  })));
}

function PropertyFloors(_ref) {
  var floors = _ref.floors;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, floors.map(function (floor) {
    var _floor$values;
    return /*#__PURE__*/React__default.createElement("div", {
      key: t(floor === null || floor === void 0 ? void 0 : floor.title),
      style: {
        marginTop: "19px"
      }
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: {
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    }, t(floor === null || floor === void 0 ? void 0 : floor.title)), floor === null || floor === void 0 ? void 0 : (_floor$values = floor.values) === null || _floor$values === void 0 ? void 0 : _floor$values.map(function (value, index) {
      var _value$values;
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
        key: index
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, {
        style: {
          marginBottom: "16px",
          color: "#505A5F",
          fontSize: "16px",
          marginTop: index !== 0 ? "16px" : "revert"
        }
      }, t(value.title)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, {
        style: {
          position: "relative",
          padding: "8px"
        }
      }, /*#__PURE__*/React__default.createElement("div", {
        style: {
          border: "1px solid #D6D5D4",
          padding: "16px",
          marginTop: "8px",
          borderRadius: "4px",
          background: "#FAFAFA",
          maxWidth: "100%"
        }
      }, value === null || value === void 0 ? void 0 : (_value$values = value.values) === null || _value$values === void 0 ? void 0 : _value$values.map(function (value, index) {
        var _value$values2;
        if (value.map === true && value.value !== "N/A") {
          return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
            key: t(value.title),
            label: t(value.title),
            text: /*#__PURE__*/React__default.createElement("img", {
              src: t(value.value),
              alt: ""
            })
          });
        }
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
          key: t(value.title),
          label: t(value.title),
          text: t(value.value) || "N/A",
          last: index === (value === null || value === void 0 ? void 0 : (_value$values2 = value.values) === null || _value$values2 === void 0 ? void 0 : _value$values2.length) - 1,
          caption: value.caption,
          className: "border-none"
        });
      }))));
    }));
  }));
}

function PropertyOwners(_ref) {
  var owners = _ref.owners;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var checkOwnerLength = (owners === null || owners === void 0 ? void 0 : owners.length) || 1;
  var cardStyles = {
    marginTop: "19px"
  };
  var statusTableStyles = {
    position: "relative",
    padding: "8px"
  };
  var rowContainerStyle = {
    justifyContent: "space-between",
    fontSize: "16px",
    lineHeight: "19px",
    color: "#0B0C0C"
  };
  if ( Number(checkOwnerLength) > 1) {
    cardStyles = {
      marginTop: "19px",
      background: "#FAFAFA",
      border: "1px solid #D6D5D4",
      borderRadius: "4px",
      padding: "8px",
      lineHeight: "19px",
      maxWidth: "600px",
      minWidth: "280px"
    };
  } else if ( !(Number(checkOwnerLength) > 1)) {
    cardStyles = {
      marginTop: "19px",
      lineHeight: "19px",
      maxWidth: "600px",
      minWidth: "280px"
    };
    statusTableStyles = {
      position: "relative",
      marginTop: "19px"
    };
  }
  if (window.location.href.includes("obps")) {
    cardStyles = _extends({}, cardStyles, {
      maxWidth: "950px"
    });
    cardStyles = _extends({}, cardStyles, {
      maxWidth: "950px"
    });
    rowContainerStyle = {};
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, owners.map(function (owner, index) {
    var _owner$values;
    return /*#__PURE__*/React__default.createElement("div", {
      key: t(owner === null || owner === void 0 ? void 0 : owner.title),
      style: cardStyles
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style:  Number(checkOwnerLength) > 1 ? {
        marginBottom: "8px",
        paddingBottom: "9px",
        color: "#0B0C0C",
        fontSize: "16px",
        lineHeight: "19px"
      } : {
        marginBottom: "8px",
        color: "#505A5F",
        fontSize: "24px"
      }
    },  Number(checkOwnerLength) > 1 ? t(owner === null || owner === void 0 ? void 0 : owner.title) + " " + (index + 1) : t(owner === null || owner === void 0 ? void 0 : owner.title)), /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: index
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, {
      style: statusTableStyles
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        maxWidth: "640px",
        top: 0,
        left: 0,
        bottom: 0,
        right: 0,
        width: "auto"
      }
    }), owner === null || owner === void 0 ? void 0 : (_owner$values = owner.values) === null || _owner$values === void 0 ? void 0 : _owner$values.map(function (value, index) {
      var _value$values;
      if (value.map === true && value.value !== "N/A") {
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
          key: t(value.title),
          label: t(value.title),
          text: /*#__PURE__*/React__default.createElement("img", {
            src: t(value.value),
            alt: ""
          })
        });
      }
      return /*#__PURE__*/React__default.createElement("span", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
        key: t(value.title),
        label:  "" + t(value.title),
        text: t(value.value) || "N/A",
        last: index === (value === null || value === void 0 ? void 0 : (_value$values = value.values) === null || _value$values === void 0 ? void 0 : _value$values.length) - 1,
        caption: value.caption,
        className: "border-none",
        textStyle: value.textStyle
        ,
        rowContainerStyle: rowContainerStyle
      }));
    }))));
  }));
}

var ScruntinyDetails = function ScruntinyDetails(_ref) {
  var _scrutinyDetails$valu, _scrutinyDetails$perm, _scrutinyDetails$scru;
  var scrutinyDetails = _ref.scrutinyDetails;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var getTextValues = function getTextValues(data) {
    if (data !== null && data !== void 0 && data.value && data !== null && data !== void 0 && data.isTransLate) return /*#__PURE__*/React__default.createElement("span", {
      style: {
        color: "#00703C"
      }
    }, t(data === null || data === void 0 ? void 0 : data.value));else if (data !== null && data !== void 0 && data.value && data !== null && data !== void 0 && data.isTransLate) return t(data === null || data === void 0 ? void 0 : data.value);else if (data !== null && data !== void 0 && data.value) return data === null || data === void 0 ? void 0 : data.value;else t("NA");
  };
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, !(scrutinyDetails !== null && scrutinyDetails !== void 0 && scrutinyDetails.isChecklist) && /*#__PURE__*/React__default.createElement("div", {
    style: {
      background: "#FAFAFA",
      border: "1px solid #D6D5D4",
      padding: "8px",
      borderRadius: "4px",
      maxWidth: "950px",
      minWidth: "280px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, null, /*#__PURE__*/React__default.createElement("div", null, scrutinyDetails === null || scrutinyDetails === void 0 ? void 0 : (_scrutinyDetails$valu = scrutinyDetails.values) === null || _scrutinyDetails$valu === void 0 ? void 0 : _scrutinyDetails$valu.map(function (value, index) {
    if (value !== null && value !== void 0 && value.isUnit) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
      className: "border-none",
      textStyle: (value === null || value === void 0 ? void 0 : value.value) === "Paid" ? {
        color: "darkgreen"
      } : (value === null || value === void 0 ? void 0 : value.value) === "Unpaid" ? {
        color: "red"
      } : {},
      key: "" + value.title,
      label: "" + t("" + value.title),
      text: value !== null && value !== void 0 && value.value ? getTextValues(value) + " " + t(value === null || value === void 0 ? void 0 : value.isUnit) : t("NA"),
      labelStyle: value !== null && value !== void 0 && value.isHeader ? {
        fontSize: "20px"
      } : {}
    });else if (value !== null && value !== void 0 && value.isHeader && !(value !== null && value !== void 0 && value.isUnit)) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: {
        fontSize: "20px",
        paddingBottom: "10px"
      }
    }, t(value === null || value === void 0 ? void 0 : value.title));else if (value !== null && value !== void 0 && value.isSubTitle && !(value !== null && value !== void 0 && value.isUnit)) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: {
        fontSize: "20px",
        paddingBottom: "10px",
        margin: "0px"
      }
    }, t(value === null || value === void 0 ? void 0 : value.title));else return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
      className: "border-none",
      textStyle: (value === null || value === void 0 ? void 0 : value.value) === "Paid" ? {
        color: "darkgreen"
      } : (value === null || value === void 0 ? void 0 : value.value) === "Unpaid" ? {
        color: "red"
      } : {},
      key: "" + value.title,
      label: "" + t("" + value.title),
      text: getTextValues(value),
      labelStyle: value !== null && value !== void 0 && value.isHeader ? {
        fontSize: "20px"
      } : {}
    });
  }), scrutinyDetails === null || scrutinyDetails === void 0 ? void 0 : (_scrutinyDetails$perm = scrutinyDetails.permit) === null || _scrutinyDetails$perm === void 0 ? void 0 : _scrutinyDetails$perm.map(function (value, ind) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
      style: {
        fontWeight: "400"
      }
    }, value === null || value === void 0 ? void 0 : value.title);
  })), /*#__PURE__*/React__default.createElement("div", null, scrutinyDetails === null || scrutinyDetails === void 0 ? void 0 : (_scrutinyDetails$scru = scrutinyDetails.scruntinyDetails) === null || _scrutinyDetails$scru === void 0 ? void 0 : _scrutinyDetails$scru.map(function (report, index) {
    return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
      className: "border-none",
      label: "" + t(report === null || report === void 0 ? void 0 : report.title),
      labelStyle: {
        width: "150%"
      }
    }), /*#__PURE__*/React__default.createElement("a", {
      href: report === null || report === void 0 ? void 0 : report.value
    }, " ", /*#__PURE__*/React__default.createElement(digitUiReactComponents.PDFSvg, null), " "), /*#__PURE__*/React__default.createElement("p", {
      style: {
        margin: "8px 0px",
        fontWeight: "bold",
        fontSize: "16px",
        lineHeight: "19px",
        color: "#505A5F"
      }
    }, t(report === null || report === void 0 ? void 0 : report.text)));
  })))));
};

var SubOccupancyTable = function SubOccupancyTable(_ref) {
  var _edcrDetails$values, _edcrDetails$subOccup, _edcrDetails$subOccup2, _edcrDetails$subOccup3, _edcrDetails$subOccup4;
  var edcrDetails = _ref.edcrDetails,
    applicationData = _ref.applicationData;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var isMobile = window.Digit.Utils.browser.isMobile();
  var tableHeader = [{
    name: "BPA_TABLE_COL_FLOOR",
    id: "Floor"
  }, {
    name: "BPA_TABLE_COL_LEVEL",
    id: "Level"
  }, {
    name: "BPA_TABLE_COL_OCCUPANCY",
    id: "Occupancy"
  }, {
    name: "BPA_TABLE_COL_BUILDUPAREA",
    id: "BuildupArea"
  }, {
    name: "BPA_TABLE_COL_FLOORAREA",
    id: "FloorArea"
  }, {
    name: "BPA_TABLE_COL_CARPETAREA",
    id: "CarpetArea"
  }];
  var accessData = function accessData(plot) {
    var name = plot;
    return function (originalRow, rowIndex, columns) {
      return originalRow[name];
    };
  };
  var tableColumns = React.useMemo(function () {
    return tableHeader.map(function (ob) {
      return {
        Header: t("" + ob.name),
        accessor: accessData(ob.id),
        id: ob.id
      };
    });
  });
  function getFloorData(block) {
    var _block$building;
    var floors = [];
    block === null || block === void 0 ? void 0 : (_block$building = block.building) === null || _block$building === void 0 ? void 0 : _block$building.floors.map(function (ob) {
      var _ob$occupancies, _ob$occupancies$, _ob$occupancies2, _ob$occupancies2$, _ob$occupancies3, _ob$occupancies3$, _ob$occupancies4, _ob$occupancies4$;
      floors.push({
        Floor: t("BPA_FLOOR_NAME_" + ob.number),
        Level: ob.number,
        Occupancy: t("" + ((_ob$occupancies = ob.occupancies) === null || _ob$occupancies === void 0 ? void 0 : (_ob$occupancies$ = _ob$occupancies[0]) === null || _ob$occupancies$ === void 0 ? void 0 : _ob$occupancies$.type)),
        BuildupArea: (_ob$occupancies2 = ob.occupancies) === null || _ob$occupancies2 === void 0 ? void 0 : (_ob$occupancies2$ = _ob$occupancies2[0]) === null || _ob$occupancies2$ === void 0 ? void 0 : _ob$occupancies2$.builtUpArea,
        FloorArea: ((_ob$occupancies3 = ob.occupancies) === null || _ob$occupancies3 === void 0 ? void 0 : (_ob$occupancies3$ = _ob$occupancies3[0]) === null || _ob$occupancies3$ === void 0 ? void 0 : _ob$occupancies3$.floorArea) || 0,
        CarpetArea: ((_ob$occupancies4 = ob.occupancies) === null || _ob$occupancies4 === void 0 ? void 0 : (_ob$occupancies4$ = _ob$occupancies4[0]) === null || _ob$occupancies4$ === void 0 ? void 0 : _ob$occupancies4$.CarpetArea) || 0,
        key: t("BPA_FLOOR_NAME_" + ob.number)
      });
    });
    return floors;
  }
  var stringReplaceAll = function stringReplaceAll(str, searcher, replaceWith) {
    if (str === void 0) {
      str = "";
    }
    if (searcher === void 0) {
      searcher = "";
    }
    if (replaceWith === void 0) {
      replaceWith = "";
    }
    if (searcher == "") return str;
    while (str.includes(searcher)) {
      str = str.replace(searcher, replaceWith);
    }
    return str;
  };
  function getSubOccupancyValues(index) {
    var _applicationData$land;
    var values = applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$land = applicationData.landInfo) === null || _applicationData$land === void 0 ? void 0 : _applicationData$land.unit;
    var returnValue = "";
    if ((values === null || values === void 0 ? void 0 : values.length) > 0) {
      var _values$index, _values$index$usageCa;
      var splitArray = (_values$index = values[index]) === null || _values$index === void 0 ? void 0 : (_values$index$usageCa = _values$index.usageCategory) === null || _values$index$usageCa === void 0 ? void 0 : _values$index$usageCa.split(',');
      if (splitArray !== null && splitArray !== void 0 && splitArray.length) {
        var returnValueArray = splitArray.map(function (data) {
          return data ? "" + t("BPA_SUBOCCUPANCYTYPE_" + stringReplaceAll(data === null || data === void 0 ? void 0 : data.toUpperCase(), "-", "_")) : "NA";
        });
        returnValue = returnValueArray.join(', ');
      }
    }
    return returnValue ? returnValue : "NA";
  }
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    style: {
      background: "#FAFAFA",
      border: "1px solid #D6D5D4",
      padding: "8px",
      borderRadius: "4px",
      maxWidth: "950px",
      minWidth: "280px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, null, edcrDetails === null || edcrDetails === void 0 ? void 0 : (_edcrDetails$values = edcrDetails.values) === null || _edcrDetails$values === void 0 ? void 0 : _edcrDetails$values.map(function (value, index) {
    if (value !== null && value !== void 0 && value.isHeader) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: {
        fontSize: "20px",
        paddingBottom: "10px"
      }
    }, t(value === null || value === void 0 ? void 0 : value.title));else return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
      className: "border-none",
      labelStyle: {
        width: "100%",
        fontSize: "20px"
      },
      key: "" + value.title,
      label: "" + t("" + value.title),
      text: value !== null && value !== void 0 && value.value ? value === null || value === void 0 ? void 0 : value.value : ""
    });
  })), edcrDetails === null || edcrDetails === void 0 ? void 0 : (_edcrDetails$subOccup = edcrDetails.subOccupancyTableDetails) === null || _edcrDetails$subOccup === void 0 ? void 0 : (_edcrDetails$subOccup2 = _edcrDetails$subOccup[0]) === null || _edcrDetails$subOccup2 === void 0 ? void 0 : (_edcrDetails$subOccup3 = _edcrDetails$subOccup2.value) === null || _edcrDetails$subOccup3 === void 0 ? void 0 : (_edcrDetails$subOccup4 = _edcrDetails$subOccup3.planDetail) === null || _edcrDetails$subOccup4 === void 0 ? void 0 : _edcrDetails$subOccup4.blocks.map(function (block, index) {
    var _edcrDetails$subOccup5, _edcrDetails$subOccup6, _edcrDetails$subOccup7, _edcrDetails$subOccup8, _edcrDetails$subOccup9;
    return /*#__PURE__*/React__default.createElement("div", {
      key: index,
      style: (edcrDetails === null || edcrDetails === void 0 ? void 0 : (_edcrDetails$subOccup5 = edcrDetails.subOccupancyTableDetails) === null || _edcrDetails$subOccup5 === void 0 ? void 0 : (_edcrDetails$subOccup6 = _edcrDetails$subOccup5[0]) === null || _edcrDetails$subOccup6 === void 0 ? void 0 : (_edcrDetails$subOccup7 = _edcrDetails$subOccup6.value) === null || _edcrDetails$subOccup7 === void 0 ? void 0 : (_edcrDetails$subOccup8 = _edcrDetails$subOccup7.planDetail) === null || _edcrDetails$subOccup8 === void 0 ? void 0 : (_edcrDetails$subOccup9 = _edcrDetails$subOccup8.blocks) === null || _edcrDetails$subOccup9 === void 0 ? void 0 : _edcrDetails$subOccup9.length) > 0 ? {
        marginBottom: "30px",
        background: "#FAFAFA",
        border: "1px solid #D6D5D4",
        padding: "8px",
        borderRadius: "4px",
        maxWidth: "950px",
        minWidth: "280px"
      } : {
        marginBottom: "30px"
      }
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: {
        marginBottom: "8px",
        paddingBottom: "9px",
        color: "#0B0C0C",
        fontSize: "18px",
        lineHeight: "19px"
      }
    }, t("BPA_BLOCK_SUBHEADER"), " ", index + 1), /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
      className: "border-none",
      textStyle: {
        wordBreak: "break-word"
      },
      label: "" + t("BPA_SUB_OCCUPANCY_LABEL"),
      text: getSubOccupancyValues(index)
    })), /*#__PURE__*/React__default.createElement("div", {
      style: window.location.href.includes("citizen") || isMobile ? {
        overflow: "scroll"
      } : {
        maxWidth: "950px",
        maxHeight: "280px"
      }
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Table, {
      className: "customTable table-fixed-first-column table-border-style",
      t: t,
      disableSort: false,
      autoSort: true,
      manualPagination: false,
      isPaginationRequired: false,
      initSortId: "S N ",
      data: getFloorData(block),
      columns: tableColumns,
      getCellProps: function getCellProps(cellInfo) {
        return {
          style: {}
        };
      }
    })));
  })));
};

var Reason = function Reason(_ref) {
  var headComment = _ref.headComment,
    otherComment = _ref.otherComment;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "checkpoint-comments-wrap"
  }, /*#__PURE__*/React__default.createElement("h4", null, headComment), /*#__PURE__*/React__default.createElement("p", null, otherComment));
};

var TLCaption = function TLCaption(_ref) {
  var _data$wfComment, _data$thumbnailsToSho, _data$thumbnailsToSho2;
  var data = _ref.data,
    OpenImage = _ref.OpenImage;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement("div", null, data.date && /*#__PURE__*/React__default.createElement("p", null, data.date), /*#__PURE__*/React__default.createElement("p", null, data.name), data.mobileNumber && /*#__PURE__*/React__default.createElement(digitUiReactComponents.TelePhone, {
    mobile: data.mobileNumber
  }), data.source && /*#__PURE__*/React__default.createElement("p", null, t("ES_APPLICATION_DETAILS_APPLICATION_CHANNEL_" + data.source.toUpperCase())), data.comment && /*#__PURE__*/React__default.createElement(Reason, {
    otherComment: data === null || data === void 0 ? void 0 : data.otherComment,
    headComment: data === null || data === void 0 ? void 0 : data.comment
  }), data !== null && data !== void 0 && data.wfComment ? /*#__PURE__*/React__default.createElement("div", null, data === null || data === void 0 ? void 0 : (_data$wfComment = data.wfComment) === null || _data$wfComment === void 0 ? void 0 : _data$wfComment.map(function (e) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "TLComments"
    }, /*#__PURE__*/React__default.createElement("h3", null, t("WF_COMMON_COMMENTS")), /*#__PURE__*/React__default.createElement("p", null, e));
  })) : null, (data === null || data === void 0 ? void 0 : (_data$thumbnailsToSho = data.thumbnailsToShow) === null || _data$thumbnailsToSho === void 0 ? void 0 : (_data$thumbnailsToSho2 = _data$thumbnailsToSho.thumbs) === null || _data$thumbnailsToSho2 === void 0 ? void 0 : _data$thumbnailsToSho2.length) > 0 ? /*#__PURE__*/React__default.createElement("div", {
    className: "TLComments"
  }, /*#__PURE__*/React__default.createElement("h3", null, t("CS_COMMON_ATTACHMENTS")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.DisplayPhotos, {
    srcs: data === null || data === void 0 ? void 0 : data.thumbnailsToShow.thumbs,
    onClick: function onClick(src, index) {
      OpenImage(src, index, data === null || data === void 0 ? void 0 : data.thumbnailsToShow);
    }
  })) : null);
};

function TLTradeAccessories(_ref) {
  var units = _ref.units;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, units.map(function (unit, index) {
    var _unit$values;
    return (
      /*#__PURE__*/
      React__default.createElement("div", {
        key: t(unit === null || unit === void 0 ? void 0 : unit.title),
        style: {
          marginTop: "19px",
          background: "#FAFAFA",
          border: "1px solid #D6D5D4",
          borderRadius: "4px",
          padding: "8px",
          lineHeight: "19px",
          maxWidth: "600px",
          minWidth: "280px"
        }
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
        style: {
          marginBottom: "8px",
          paddingBottom: "9px",
          color: "#0B0C0C",
          fontSize: "16px",
          lineHeight: "19px"
        }
      }, t(unit === null || unit === void 0 ? void 0 : unit.title) + " " + (index + 1)), /*#__PURE__*/React__default.createElement(React__default.Fragment, {
        key: index
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, {
        style: {
          position: "relative",
          marginTop: "19px"
        }
      }, /*#__PURE__*/React__default.createElement("div", {
        style: {
          position: "absolute",
          maxWidth: "640px",
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          width: "auto"
        }
      }), unit === null || unit === void 0 ? void 0 : (_unit$values = unit.values) === null || _unit$values === void 0 ? void 0 : _unit$values.map(function (value, index) {
        var _value$values;
        if (value.map === true && value.value !== "N/A") {
          return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
            key: t(value.title),
            label: t(value.title),
            text: /*#__PURE__*/React__default.createElement("img", {
              src: t(value.value),
              alt: ""
            })
          });
        }
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
          key: t(value.title),
          label: t(value.title) + ":",
          text: t(value.value) || "N/A",
          last: index === (value === null || value === void 0 ? void 0 : (_value$values = value.values) === null || _value$values === void 0 ? void 0 : _value$values.length) - 1,
          caption: value.caption,
          className: "border-none"
          ,
          rowContainerStyle: {
            justifyContent: "space-between",
            fontSize: "16px",
            lineHeight: "19px",
            color: "#0B0C0C"
          }
        });
      }))))
    );
  }));
}

function TLTradeUnits(_ref) {
  var units = _ref.units;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, units.map(function (unit, index) {
    var _unit$values;
    return (
      /*#__PURE__*/
      React__default.createElement("div", {
        key: t(unit === null || unit === void 0 ? void 0 : unit.title),
        style: {
          marginTop: "19px",
          background: "#FAFAFA",
          border: "1px solid #D6D5D4",
          borderRadius: "4px",
          padding: "8px",
          lineHeight: "19px",
          maxWidth: "600px",
          minWidth: "280px"
        }
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
        style: {
          marginBottom: "9px",
          paddingBottom: "9px",
          color: "#0B0C0C",
          fontSize: "16px",
          lineHeight: "19px"
        }
      }, t(unit === null || unit === void 0 ? void 0 : unit.title) + " " + (index + 1)), /*#__PURE__*/React__default.createElement(React__default.Fragment, {
        key: index
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, {
        style: {
          position: "relative",
          marginTop: "19px"
        }
      }, /*#__PURE__*/React__default.createElement("div", {
        style: {
          position: "absolute",
          maxWidth: "640px",
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          width: "auto"
        }
      }), unit === null || unit === void 0 ? void 0 : (_unit$values = unit.values) === null || _unit$values === void 0 ? void 0 : _unit$values.map(function (value, index) {
        var _value$values;
        if (value.map === true && value.value !== "N/A") {
          return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
            key: t(value.title),
            label: t(value.title),
            text: /*#__PURE__*/React__default.createElement("img", {
              src: t(value.value),
              alt: ""
            })
          });
        }
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
          key: t(value.title),
          label: t(value.title) + ":",
          text: t(value.value) || "NA",
          last: index === (value === null || value === void 0 ? void 0 : (_value$values = value.values) === null || _value$values === void 0 ? void 0 : _value$values.length) - 1,
          caption: value.caption,
          className: "border-none"
          ,
          rowContainerStyle: {
            justifyContent: "space-between",
            fontSize: "16px",
            lineHeight: "19px",
            color: "#0B0C0C"
          }
        });
      }))))
    );
  }));
}

function ApplicationDetailsContent(_ref) {
  var _applicationDetails$a, _workflowDetails$data3, _workflowDetails$data4, _workflowDetails$data5, _workflowDetails$data6, _workflowDetails$data7, _workflowDetails$data8, _workflowDetails$data9, _workflowDetails$data10, _workflowDetails$data11, _workflowDetails$data12;
  var applicationDetails = _ref.applicationDetails,
    workflowDetails = _ref.workflowDetails,
    isDataLoading = _ref.isDataLoading,
    applicationData = _ref.applicationData,
    timelineStatusPrefix = _ref.timelineStatusPrefix,
    _ref$showTimeLine = _ref.showTimeLine,
    showTimeLine = _ref$showTimeLine === void 0 ? true : _ref$showTimeLine,
    _ref$statusAttribute = _ref.statusAttribute,
    statusAttribute = _ref$statusAttribute === void 0 ? "status" : _ref$statusAttribute,
    paymentsList = _ref.paymentsList;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  function OpenImage(imageSource, index, thumbnailsToShow) {
    var _thumbnailsToShow$ful;
    window.open(thumbnailsToShow === null || thumbnailsToShow === void 0 ? void 0 : (_thumbnailsToShow$ful = thumbnailsToShow.fullImage) === null || _thumbnailsToShow$ful === void 0 ? void 0 : _thumbnailsToShow$ful[0], "_blank");
  }
  var getTimelineCaptions = function getTimelineCaptions(checkpoint) {
    if (checkpoint.state === "OPEN" || checkpoint.status === "INITIATED" && !window.location.href.includes("/obps/")) {
      var _applicationData$audi;
      var caption = {
        date: Digit.DateUtils.ConvertTimestampToDate(applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$audi = applicationData.auditDetails) === null || _applicationData$audi === void 0 ? void 0 : _applicationData$audi.createdTime),
        source: (applicationData === null || applicationData === void 0 ? void 0 : applicationData.channel) || ""
      };
      return /*#__PURE__*/React__default.createElement(TLCaption, {
        data: caption
      });
    } else if (window.location.href.includes("/obps/") || window.location.href.includes("/noc/")) {
      var _checkpoint$auditDeta, _checkpoint$assignes, _checkpoint$assignes$, _checkpoint$assignes2, _checkpoint$assignes3;
      var _caption = {
        date: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$auditDeta = checkpoint.auditDetails) === null || _checkpoint$auditDeta === void 0 ? void 0 : _checkpoint$auditDeta.lastModified,
        name: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes = checkpoint.assignes) === null || _checkpoint$assignes === void 0 ? void 0 : (_checkpoint$assignes$ = _checkpoint$assignes[0]) === null || _checkpoint$assignes$ === void 0 ? void 0 : _checkpoint$assignes$.name,
        mobileNumber: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes2 = checkpoint.assignes) === null || _checkpoint$assignes2 === void 0 ? void 0 : (_checkpoint$assignes3 = _checkpoint$assignes2[0]) === null || _checkpoint$assignes3 === void 0 ? void 0 : _checkpoint$assignes3.mobileNumber,
        comment: t(checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.comment),
        wfComment: checkpoint.wfComment,
        thumbnailsToShow: checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.thumbnailsToShow
      };
      return /*#__PURE__*/React__default.createElement(TLCaption, {
        data: _caption,
        OpenImage: OpenImage
      });
    } else {
      var _Digit$DateUtils, _applicationData$audi2, _checkpoint$assignes4, _checkpoint$assignes5, _checkpoint$assignes6, _checkpoint$assignes7;
      var _caption2 = {
        date: (_Digit$DateUtils = Digit.DateUtils) === null || _Digit$DateUtils === void 0 ? void 0 : _Digit$DateUtils.ConvertTimestampToDate(applicationData === null || applicationData === void 0 ? void 0 : (_applicationData$audi2 = applicationData.auditDetails) === null || _applicationData$audi2 === void 0 ? void 0 : _applicationData$audi2.lastModifiedTime),
        name: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes4 = checkpoint.assignes) === null || _checkpoint$assignes4 === void 0 ? void 0 : (_checkpoint$assignes5 = _checkpoint$assignes4[0]) === null || _checkpoint$assignes5 === void 0 ? void 0 : _checkpoint$assignes5.name,
        wfComment: checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.wfComment,
        mobileNumber: checkpoint === null || checkpoint === void 0 ? void 0 : (_checkpoint$assignes6 = checkpoint.assignes) === null || _checkpoint$assignes6 === void 0 ? void 0 : (_checkpoint$assignes7 = _checkpoint$assignes6[0]) === null || _checkpoint$assignes7 === void 0 ? void 0 : _checkpoint$assignes7.mobileNumber
      };
      return /*#__PURE__*/React__default.createElement(TLCaption, {
        data: _caption2
      });
    }
  };
  var getTranslatedValues = function getTranslatedValues(dataValue, isNotTranslated) {
    if (dataValue) {
      return !isNotTranslated ? t(dataValue) : dataValue;
    } else {
      return t("NA");
    }
  };
  var checkLocation = window.location.href.includes("employee/tl") || window.location.href.includes("employee/obps") || window.location.href.includes("employee/noc");
  var isNocLocation = window.location.href.includes("employee/noc");
  var isBPALocation = window.location.href.includes("employee/obps");
  var getRowStyles = function getRowStyles() {
    if (window.location.href.includes("employee/obps") || window.location.href.includes("employee/noc")) {
      return {
        justifyContent: "space-between",
        fontSize: "16px",
        lineHeight: "19px",
        color: "#0B0C0C"
      };
    } else if (checkLocation) {
      return {
        justifyContent: "space-between",
        fontSize: "16px",
        lineHeight: "19px",
        color: "#0B0C0C"
      };
    } else {
      return {};
    }
  };
  var getTableStyles = function getTableStyles() {
    if (window.location.href.includes("employee/obps") || window.location.href.includes("employee/noc")) {
      return {
        position: "relative",
        marginTop: "19px"
      };
    } else if (checkLocation) {
      return {
        position: "relative",
        marginTop: "19px"
      };
    } else {
      return {};
    }
  };
  var getMainDivStyles = function getMainDivStyles() {
    if (window.location.href.includes("employee/obps") || window.location.href.includes("employee/noc")) {
      return {
        lineHeight: "19px",
        maxWidth: "950px",
        minWidth: "280px"
      };
    } else if (checkLocation) {
      return {
        lineHeight: "19px",
        maxWidth: "600px",
        minWidth: "280px"
      };
    } else {
      return {};
    }
  };
  var getTextValue = function getTextValue(value) {
    if (value !== null && value !== void 0 && value.skip) return value.value;else if (value !== null && value !== void 0 && value.isUnit) return value !== null && value !== void 0 && value.value ? getTranslatedValues(value === null || value === void 0 ? void 0 : value.value, value === null || value === void 0 ? void 0 : value.isNotTranslated) + " " + t(value === null || value === void 0 ? void 0 : value.isUnit) : t("N/A");else return value !== null && value !== void 0 && value.value ? getTranslatedValues(value === null || value === void 0 ? void 0 : value.value, value === null || value === void 0 ? void 0 : value.isNotTranslated) : t("N/A");
  };
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
    style: {
      position: "relative"
    },
    className: "employeeCard-override"
  }, applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a = applicationDetails.applicationDetails) === null || _applicationDetails$a === void 0 ? void 0 : _applicationDetails$a.map(function (detail, index) {
    var _detail$values, _detail$additionalDet, _applicationDetails$a2, _applicationDetails$a3, _applicationDetails$a4, _detail$additionalDet2, _applicationDetails$a5, _applicationDetails$a6, _detail$additionalDet3, _detail$additionalDet4, _detail$additionalDet5, _detail$additionalDet6, _detail$additionalDet7, _detail$additionalDet8, _detail$additionalDet9, _detail$additionalDet10, _detail$additionalDet11, _workflowDetails$data, _workflowDetails$data2, _detail$additionalDet12, _detail$additionalDet13, _detail$additionalDet14, _detail$additionalDet15, _detail$additionalDet16, _detail$additionalDet17, _detail$additionalDet18, _detail$additionalDet19, _detail$additionalDet20, _detail$additionalDet21, _detail$additionalDet22, _detail$additionalDet23, _detail$additionalDet24;
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: index
    }, /*#__PURE__*/React__default.createElement("div", {
      style: getMainDivStyles()
    }, index === 0 && !detail.asSectionHeader ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSubHeader, {
      style: {
        marginBottom: "16px",
        fontSize: "24px"
      }
    }, t(detail.title)) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, {
      style: index == 0 && checkLocation ? {
        marginBottom: "16px",
        fontSize: "24px"
      } : {
        marginBottom: "16px",
        marginTop: "32px",
        fontSize: "24px"
      }
    }, isNocLocation ? "" + t(detail.title) : t(detail.title), detail !== null && detail !== void 0 && detail.Component ? /*#__PURE__*/React__default.createElement(detail.Component, null) : null)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.StatusTable, {
      style: getTableStyles()
    }, (detail === null || detail === void 0 ? void 0 : detail.title) && !(detail !== null && detail !== void 0 && detail.title.includes("NOC")) && (detail === null || detail === void 0 ? void 0 : (_detail$values = detail.values) === null || _detail$values === void 0 ? void 0 : _detail$values.map(function (value, index) {
      var _detail$values3;
      if (value.map === true && value.value !== "N/A") {
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
          key: t(value.title),
          label: t(value.title),
          text: /*#__PURE__*/React__default.createElement("img", {
            src: t(value.value),
            alt: ""
          })
        });
      }
      if ((value === null || value === void 0 ? void 0 : value.isLink) == true) {
        var _detail$values2;
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
          key: t(value.title),
          label: window.location.href.includes("tl") ? /*#__PURE__*/React__default.createElement("div", {
            style: {
              width: "200%"
            }
          }, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
            to: value === null || value === void 0 ? void 0 : value.to
          }, /*#__PURE__*/React__default.createElement("span", {
            className: "link",
            style: {
              color: "#F47738"
            }
          }, t(value === null || value === void 0 ? void 0 : value.title)))) : isNocLocation || isBPALocation ? "" + t(value.title) : t(value.title),
          text: /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
            to: value === null || value === void 0 ? void 0 : value.to
          }, /*#__PURE__*/React__default.createElement("span", {
            className: "link",
            style: {
              color: "#F47738"
            }
          }, value === null || value === void 0 ? void 0 : value.value))),
          last: index === (detail === null || detail === void 0 ? void 0 : (_detail$values2 = detail.values) === null || _detail$values2 === void 0 ? void 0 : _detail$values2.length) - 1,
          caption: value.caption,
          className: "border-none",
          rowContainerStyle: getRowStyles()
        });
      }
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
        key: t(value.title),
        label: isNocLocation || isBPALocation ? "" + t(value.title) : t(value.title),
        text: getTextValue(value),
        last: index === (detail === null || detail === void 0 ? void 0 : (_detail$values3 = detail.values) === null || _detail$values3 === void 0 ? void 0 : _detail$values3.length) - 1,
        caption: value.caption,
        className: "border-none"
        ,
        rowContainerStyle: getRowStyles()
      });
    })))), (detail === null || detail === void 0 ? void 0 : detail.belowComponent) && /*#__PURE__*/React__default.createElement(detail.belowComponent, null), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet = detail.additionalDetails) === null || _detail$additionalDet === void 0 ? void 0 : _detail$additionalDet.inspectionReport) && /*#__PURE__*/React__default.createElement(ScruntinyDetails, {
      scrutinyDetails: detail === null || detail === void 0 ? void 0 : detail.additionalDetails,
      paymentsList: paymentsList
    }), (applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a2 = applicationDetails.applicationData) === null || _applicationDetails$a2 === void 0 ? void 0 : (_applicationDetails$a3 = _applicationDetails$a2.additionalDetails) === null || _applicationDetails$a3 === void 0 ? void 0 : (_applicationDetails$a4 = _applicationDetails$a3.fieldinspection_pending) === null || _applicationDetails$a4 === void 0 ? void 0 : _applicationDetails$a4.length) > 0 && (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet2 = detail.additionalDetails) === null || _detail$additionalDet2 === void 0 ? void 0 : _detail$additionalDet2.fiReport) && /*#__PURE__*/React__default.createElement(InspectionReport, {
      fiReport: applicationDetails === null || applicationDetails === void 0 ? void 0 : (_applicationDetails$a5 = applicationDetails.applicationData) === null || _applicationDetails$a5 === void 0 ? void 0 : (_applicationDetails$a6 = _applicationDetails$a5.additionalDetails) === null || _applicationDetails$a6 === void 0 ? void 0 : _applicationDetails$a6.fieldinspection_pending
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet3 = detail.additionalDetails) === null || _detail$additionalDet3 === void 0 ? void 0 : _detail$additionalDet3.floors) && /*#__PURE__*/React__default.createElement(PropertyFloors, {
      floors: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet4 = detail.additionalDetails) === null || _detail$additionalDet4 === void 0 ? void 0 : _detail$additionalDet4.floors
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet5 = detail.additionalDetails) === null || _detail$additionalDet5 === void 0 ? void 0 : _detail$additionalDet5.owners) && /*#__PURE__*/React__default.createElement(PropertyOwners, {
      owners: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet6 = detail.additionalDetails) === null || _detail$additionalDet6 === void 0 ? void 0 : _detail$additionalDet6.owners
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet7 = detail.additionalDetails) === null || _detail$additionalDet7 === void 0 ? void 0 : _detail$additionalDet7.units) && /*#__PURE__*/React__default.createElement(TLTradeUnits, {
      units: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet8 = detail.additionalDetails) === null || _detail$additionalDet8 === void 0 ? void 0 : _detail$additionalDet8.units
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet9 = detail.additionalDetails) === null || _detail$additionalDet9 === void 0 ? void 0 : _detail$additionalDet9.accessories) && /*#__PURE__*/React__default.createElement(TLTradeAccessories, {
      units: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet10 = detail.additionalDetails) === null || _detail$additionalDet10 === void 0 ? void 0 : _detail$additionalDet10.accessories
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet11 = detail.additionalDetails) === null || _detail$additionalDet11 === void 0 ? void 0 : _detail$additionalDet11.permissions) && (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data = workflowDetails.data) === null || _workflowDetails$data === void 0 ? void 0 : (_workflowDetails$data2 = _workflowDetails$data.nextActions) === null || _workflowDetails$data2 === void 0 ? void 0 : _workflowDetails$data2.length) > 0 && /*#__PURE__*/React__default.createElement(PermissionCheck, {
      applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
      t: t,
      permissions: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet12 = detail.additionalDetails) === null || _detail$additionalDet12 === void 0 ? void 0 : _detail$additionalDet12.permissions
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet13 = detail.additionalDetails) === null || _detail$additionalDet13 === void 0 ? void 0 : _detail$additionalDet13.obpsDocuments) && /*#__PURE__*/React__default.createElement(BPADocuments, {
      t: t,
      applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
      docs: detail.additionalDetails.obpsDocuments,
      bpaActionsDetails: workflowDetails
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet14 = detail.additionalDetails) === null || _detail$additionalDet14 === void 0 ? void 0 : _detail$additionalDet14.noc) && /*#__PURE__*/React__default.createElement(NOCDocuments, {
      t: t,
      isNoc: true,
      NOCdata: detail.values,
      applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
      docs: detail.additionalDetails.noc,
      noc: (_detail$additionalDet15 = detail.additionalDetails) === null || _detail$additionalDet15 === void 0 ? void 0 : _detail$additionalDet15.data,
      bpaActionsDetails: workflowDetails
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet16 = detail.additionalDetails) === null || _detail$additionalDet16 === void 0 ? void 0 : _detail$additionalDet16.scruntinyDetails) && /*#__PURE__*/React__default.createElement(ScruntinyDetails, {
      scrutinyDetails: detail === null || detail === void 0 ? void 0 : detail.additionalDetails
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet17 = detail.additionalDetails) === null || _detail$additionalDet17 === void 0 ? void 0 : _detail$additionalDet17.buildingExtractionDetails) && /*#__PURE__*/React__default.createElement(ScruntinyDetails, {
      scrutinyDetails: detail === null || detail === void 0 ? void 0 : detail.additionalDetails
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet18 = detail.additionalDetails) === null || _detail$additionalDet18 === void 0 ? void 0 : _detail$additionalDet18.subOccupancyTableDetails) && /*#__PURE__*/React__default.createElement(SubOccupancyTable, {
      edcrDetails: detail === null || detail === void 0 ? void 0 : detail.additionalDetails,
      applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet19 = detail.additionalDetails) === null || _detail$additionalDet19 === void 0 ? void 0 : _detail$additionalDet19.documentsWithUrl) && /*#__PURE__*/React__default.createElement(DocumentsPreview, {
      documents: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet20 = detail.additionalDetails) === null || _detail$additionalDet20 === void 0 ? void 0 : _detail$additionalDet20.documentsWithUrl
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet21 = detail.additionalDetails) === null || _detail$additionalDet21 === void 0 ? void 0 : _detail$additionalDet21.documents) && /*#__PURE__*/React__default.createElement(PropertyDocuments, {
      documents: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet22 = detail.additionalDetails) === null || _detail$additionalDet22 === void 0 ? void 0 : _detail$additionalDet22.documents
    }), (detail === null || detail === void 0 ? void 0 : (_detail$additionalDet23 = detail.additionalDetails) === null || _detail$additionalDet23 === void 0 ? void 0 : _detail$additionalDet23.taxHeadEstimatesCalculation) && /*#__PURE__*/React__default.createElement(PropertyEstimates, {
      taxHeadEstimatesCalculation: detail === null || detail === void 0 ? void 0 : (_detail$additionalDet24 = detail.additionalDetails) === null || _detail$additionalDet24 === void 0 ? void 0 : _detail$additionalDet24.taxHeadEstimatesCalculation
    }));
  }), showTimeLine && (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data3 = workflowDetails.data) === null || _workflowDetails$data3 === void 0 ? void 0 : (_workflowDetails$data4 = _workflowDetails$data3.timeline) === null || _workflowDetails$data4 === void 0 ? void 0 : _workflowDetails$data4.length) > 0 && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.BreakLine, null), ((workflowDetails === null || workflowDetails === void 0 ? void 0 : workflowDetails.isLoading) || isDataLoading) && /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null), !(workflowDetails !== null && workflowDetails !== void 0 && workflowDetails.isLoading) && !isDataLoading && /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, {
    style: {
      marginBottom: "16px",
      marginTop: "32px"
    }
  }, t("ES_APPLICATION_DETAILS_APPLICATION_TIMELINE")), workflowDetails !== null && workflowDetails !== void 0 && (_workflowDetails$data5 = workflowDetails.data) !== null && _workflowDetails$data5 !== void 0 && _workflowDetails$data5.timeline && (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data6 = workflowDetails.data) === null || _workflowDetails$data6 === void 0 ? void 0 : (_workflowDetails$data7 = _workflowDetails$data6.timeline) === null || _workflowDetails$data7 === void 0 ? void 0 : _workflowDetails$data7.length) === 1 ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.CheckPoint, {
    isCompleted: true,
    label: t("" + timelineStatusPrefix + (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data8 = workflowDetails.data) === null || _workflowDetails$data8 === void 0 ? void 0 : (_workflowDetails$data9 = _workflowDetails$data8.timeline[0]) === null || _workflowDetails$data9 === void 0 ? void 0 : _workflowDetails$data9.state)),
    customChild: getTimelineCaptions(workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data10 = workflowDetails.data) === null || _workflowDetails$data10 === void 0 ? void 0 : _workflowDetails$data10.timeline[0])
  }) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.ConnectingCheckPoints, null, (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data11 = workflowDetails.data) === null || _workflowDetails$data11 === void 0 ? void 0 : _workflowDetails$data11.timeline) && (workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data12 = workflowDetails.data) === null || _workflowDetails$data12 === void 0 ? void 0 : _workflowDetails$data12.timeline.map(function (checkpoint, index, arr) {
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: index
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CheckPoint, {
      keyValue: index,
      isCompleted: index === 0,
      info: checkpoint.comment,
      label: t("" + timelineStatusPrefix + ((checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.performedAction) === "REOPEN" ? checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint.performedAction : checkpoint === null || checkpoint === void 0 ? void 0 : checkpoint[statusAttribute])),
      customChild: getTimelineCaptions(checkpoint)
    }));
  }))))));
}

function ApplicationDetailsToast(_ref) {
  var _showToast$action, _showToast$error, _showToast$error2, _showToast$error3, _showToast$error4, _showToast$error5, _showToast$error6, _showToast$error7, _showToast$error8, _showToast$action2, _showToast$action3, _showToast$error9, _showToast$error10, _showToast$error11, _showToast$error12, _showToast$error13, _showToast$error14, _showToast$error15, _showToast$error16, _showToast$action4;
  var t = _ref.t,
    showToast = _ref.showToast,
    closeToast = _ref.closeToast,
    businessService = _ref.businessService;
  if (businessService !== null && businessService !== void 0 && businessService.includes("NewTL") || businessService !== null && businessService !== void 0 && businessService.includes("TL") || businessService !== null && businessService !== void 0 && businessService.includes("EDITRENEWAL")) {
    var label = "";
    switch (showToast === null || showToast === void 0 ? void 0 : (_showToast$action = showToast.action) === null || _showToast$action === void 0 ? void 0 : _showToast$action.action) {
      case "SENDBACK":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error = showToast.error) === null || _showToast$error === void 0 ? void 0 : _showToast$error.message : t("TL_SENDBACK_CHECKLIST_MESSAGE_HEAD");
        break;
      case "FORWARD":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error2 = showToast.error) === null || _showToast$error2 === void 0 ? void 0 : _showToast$error2.message : t("TL_FORWARD_SUCCESS_MESSAGE_MAIN");
        break;
      case "APPROVE":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error3 = showToast.error) === null || _showToast$error3 === void 0 ? void 0 : _showToast$error3.message : t("TL_APPROVAL_CHECKLIST_MESSAGE_HEAD");
        break;
      case "SENDBACKTOCITIZEN":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error4 = showToast.error) === null || _showToast$error4 === void 0 ? void 0 : _showToast$error4.message : t("TL_SENDBACK_TOCITIZEN_CHECKLIST_MESSAGE_HEAD");
        break;
      case "REJECT":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error5 = showToast.error) === null || _showToast$error5 === void 0 ? void 0 : _showToast$error5.message : t("TL_APPROVAL_REJ_MESSAGE_HEAD");
        break;
      case "RESUBMIT":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error6 = showToast.error) === null || _showToast$error6 === void 0 ? void 0 : _showToast$error6.message : t("TL_APPLICATION_RESUBMIT_SUCCESS_MESSAGE_MAIN");
        break;
      case "CANCEL":
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error7 = showToast.error) === null || _showToast$error7 === void 0 ? void 0 : _showToast$error7.message : t("TL_TL_CANCELLED_MESSAGE_HEAD");
        break;
      default:
        label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error8 = showToast.error) === null || _showToast$error8 === void 0 ? void 0 : _showToast$error8.message : t("ES_" + businessService + "_" + (showToast === null || showToast === void 0 ? void 0 : (_showToast$action2 = showToast.action) === null || _showToast$action2 === void 0 ? void 0 : _showToast$action2.action) + "_UPDATE_SUCCESS");
    }
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, showToast && /*#__PURE__*/React__default.createElement(digitUiReactComponents.Toast, {
      error: showToast.key === "error",
      label: label,
      onClose: closeToast
    }));
  } else if (businessService !== null && businessService !== void 0 && businessService.includes("BPA") || businessService !== null && businessService !== void 0 && businessService.includes("BPA_LOW") || businessService !== null && businessService !== void 0 && businessService.includes("BPA_OC")) {
    var getMessage = function getMessage(messages) {
      var _messages;
      if (messages === void 0) {
        messages = [];
      }
      var returnValue = messages[0];
      if (((_messages = messages) === null || _messages === void 0 ? void 0 : _messages.length) == 2) returnValue = businessService !== null && businessService !== void 0 && businessService.includes("BPA_OC") ? t(messages[1]) : t(messages[0]);else returnValue = t(messages[0]);
      return returnValue;
    };
    var _label = "";
    switch (showToast === null || showToast === void 0 ? void 0 : (_showToast$action3 = showToast.action) === null || _showToast$action3 === void 0 ? void 0 : _showToast$action3.action) {
      case "REVOCATE":
        _label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error9 = showToast.error) === null || _showToast$error9 === void 0 ? void 0 : _showToast$error9.message : getMessage(["BPA_APPROVAL_REVOCATED_MESSAGE_HEAD", "BPA_APPROVAL_OC_REVOCATED_MESSAGE_HEAD"]);
        break;
      case "VERIFY_AND_FORWARD":
        _label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error10 = showToast.error) === null || _showToast$error10 === void 0 ? void 0 : _showToast$error10.message : getMessage(["BPA_FORWARD_SUCCESS_MESSAGE_MAIN"]);
        break;
      case "SEND_BACK_TO_CITIZEN":
        _label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error11 = showToast.error) === null || _showToast$error11 === void 0 ? void 0 : _showToast$error11.message : getMessage(["BPA_SENDBACK_SUCCESS_MESSAGE_MAIN"]);
        break;
      case "APPROVE":
        _label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error12 = showToast.error) === null || _showToast$error12 === void 0 ? void 0 : _showToast$error12.message : getMessage(["BPA_APPROVAL_CHECKLIST_MESSAGE_HEAD"]);
        break;
      case "REJECT":
        _label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error13 = showToast.error) === null || _showToast$error13 === void 0 ? void 0 : _showToast$error13.message : getMessage(["BPA_APPROVAL_REJECTED_MESSAGE_HEAD", "BPA_OC_APPROVAL_REJECTED_MESSAGE_HEAD"]);
        break;
      case "FORWARD":
        _label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error14 = showToast.error) === null || _showToast$error14 === void 0 ? void 0 : _showToast$error14.message : getMessage(["BPA_FORWARD_SUCCESS_MESSAGE_MAIN"]);
        break;
      case "SEND_BACK_FOR_DOCUMENT_VERIFICATION":
      case "SEND_BACK_FOR_FIELD_INSPECTION":
        _label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error15 = showToast.error) === null || _showToast$error15 === void 0 ? void 0 : _showToast$error15.message : getMessage(["BPA_SENDBACK_SUCCESS_MESSAGE_MAIN"]);
        break;
      default:
        _label = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error16 = showToast.error) === null || _showToast$error16 === void 0 ? void 0 : _showToast$error16.message : t("ES_" + businessService + "_" + (showToast === null || showToast === void 0 ? void 0 : (_showToast$action4 = showToast.action) === null || _showToast$action4 === void 0 ? void 0 : _showToast$action4.action) + "_UPDATE_SUCCESS");
    }
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, showToast && /*#__PURE__*/React__default.createElement(digitUiReactComponents.Toast, {
      error: showToast.key === "error",
      label: _label,
      onClose: closeToast
    }));
  } else {
    var _showToast$error17, _showToast$action5;
    var _label2 = (showToast === null || showToast === void 0 ? void 0 : showToast.key) === "error" ? showToast === null || showToast === void 0 ? void 0 : (_showToast$error17 = showToast.error) === null || _showToast$error17 === void 0 ? void 0 : _showToast$error17.message : "ES_" + businessService + "_" + (showToast === null || showToast === void 0 ? void 0 : (_showToast$action5 = showToast.action) === null || _showToast$action5 === void 0 ? void 0 : _showToast$action5.action) + "_UPDATE_SUCCESS";
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, showToast && /*#__PURE__*/React__default.createElement(digitUiReactComponents.Toast, {
      error: showToast.key === "error",
      label: t(_label2),
      onClose: closeToast
    }));
  }
}

function ApplicationDetailsActionBar(_ref) {
  var _user, _user$info, _user$info$roles, _workflowDetails$data, _workflowDetails$data2, _workflowDetails$data3, _actions$, _actions$$redirection, _workflowDetails$data4, _workflowDetails$data5, _actions$2, _actions$3, _actions$4;
  var workflowDetails = _ref.workflowDetails,
    displayMenu = _ref.displayMenu,
    onActionSelect = _ref.onActionSelect,
    setDisplayMenu = _ref.setDisplayMenu,
    businessService = _ref.businessService,
    forcedActionPrefix = _ref.forcedActionPrefix,
    _ref$ActionBarStyle = _ref.ActionBarStyle,
    ActionBarStyle = _ref$ActionBarStyle === void 0 ? {} : _ref$ActionBarStyle,
    _ref$MenuStyle = _ref.MenuStyle,
    MenuStyle = _ref$MenuStyle === void 0 ? {} : _ref$MenuStyle;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var user = Digit.UserService.getUser();
  if (window.location.href.includes("/obps") || window.location.href.includes("/noc")) {
    var userInfos = sessionStorage.getItem("Digit.citizen.userRequestObject");
    var userInfo = userInfos ? JSON.parse(userInfos) : {};
    user = userInfo === null || userInfo === void 0 ? void 0 : userInfo.value;
  }
  var userRoles = (_user = user) === null || _user === void 0 ? void 0 : (_user$info = _user.info) === null || _user$info === void 0 ? void 0 : (_user$info$roles = _user$info.roles) === null || _user$info$roles === void 0 ? void 0 : _user$info$roles.map(function (e) {
    return e.code;
  });
  var isSingleButton = false;
  var isMenuBotton = false;
  var actions = workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data = workflowDetails.data) === null || _workflowDetails$data === void 0 ? void 0 : (_workflowDetails$data2 = _workflowDetails$data.actionState) === null || _workflowDetails$data2 === void 0 ? void 0 : (_workflowDetails$data3 = _workflowDetails$data2.nextActions) === null || _workflowDetails$data3 === void 0 ? void 0 : _workflowDetails$data3.filter(function (e) {
    return userRoles.some(function (role) {
      var _e$roles;
      return (_e$roles = e.roles) === null || _e$roles === void 0 ? void 0 : _e$roles.includes(role);
    }) || !e.roles;
  });
  if ((window.location.href.includes("/obps") || window.location.href.includes("/noc")) && (actions === null || actions === void 0 ? void 0 : actions.length) == 1 || actions !== null && actions !== void 0 && (_actions$ = actions[0]) !== null && _actions$ !== void 0 && (_actions$$redirection = _actions$.redirectionUrl) !== null && _actions$$redirection !== void 0 && _actions$$redirection.pathname.includes("/pt/property-details/") && (actions === null || actions === void 0 ? void 0 : actions.length) == 1) {
    isMenuBotton = false;
    isSingleButton = true;
  } else if ((actions === null || actions === void 0 ? void 0 : actions.length) > 0) {
    isMenuBotton = true;
    isSingleButton = false;
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, !(workflowDetails !== null && workflowDetails !== void 0 && workflowDetails.isLoading) && isMenuBotton && !isSingleButton && /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, {
    style: _extends({}, ActionBarStyle)
  }, displayMenu && workflowDetails !== null && workflowDetails !== void 0 && (_workflowDetails$data4 = workflowDetails.data) !== null && _workflowDetails$data4 !== void 0 && (_workflowDetails$data5 = _workflowDetails$data4.actionState) !== null && _workflowDetails$data5 !== void 0 && _workflowDetails$data5.nextActions ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Menu, {
    localeKeyPrefix: forcedActionPrefix || "WF_EMPLOYEE_" + (businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase()),
    options: actions,
    optionKey: "action",
    t: t,
    onSelect: onActionSelect,
    style: MenuStyle
  }) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("WF_TAKE_ACTION"),
    onSubmit: function onSubmit() {
      return setDisplayMenu(!displayMenu);
    }
  })), !(workflowDetails !== null && workflowDetails !== void 0 && workflowDetails.isLoading) && !isMenuBotton && isSingleButton && /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, {
    style: _extends({}, ActionBarStyle)
  }, /*#__PURE__*/React__default.createElement("button", {
    style: {
      color: "#FFFFFF",
      fontSize: "19px"
    },
    className: "submit-bar",
    name: actions === null || actions === void 0 ? void 0 : (_actions$2 = actions[0]) === null || _actions$2 === void 0 ? void 0 : _actions$2.action,
    value: actions === null || actions === void 0 ? void 0 : (_actions$3 = actions[0]) === null || _actions$3 === void 0 ? void 0 : _actions$3.action,
    onClick: function onClick(e) {
      onActionSelect((actions === null || actions === void 0 ? void 0 : actions[0]) || {});
    }
  }, t((forcedActionPrefix || "WF_EMPLOYEE_" + (businessService === null || businessService === void 0 ? void 0 : businessService.toUpperCase())) + "_" + (actions === null || actions === void 0 ? void 0 : (_actions$4 = actions[0]) === null || _actions$4 === void 0 ? void 0 : _actions$4.action)))));
}

var Close$5 = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$5 = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$5, null));
};
function ApplicationDetailsWarningPopup(_ref) {
  var action = _ref.action,
    closeWarningPopup = _ref.closeWarningPopup;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var isMobile = window.Digit.Utils.browser.isMobile();
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement("h1", {
      className: "heading-m"
    }, t("PT_DUES_ARE_PENDING")),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$5, {
      onClick: function onClick() {
        closeWarningPopup();
      }
    }),
    hideSubmit: true,
    isDisabled: false,
    popupStyles: isMobile ? {} : {
      width: "29%",
      marginTop: "auto"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement("div", {
    style: {
      marginBottom: "30px"
    }
  }, /*#__PURE__*/React__default.createElement("h1", null, t("PT_YOU_HAVE"), " \u20B9", action === null || action === void 0 ? void 0 : action.AmountDueForPay, " ", t("PT_DUE_WARNING_MSG2"))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Row, {
    rowContainerStyle: {
      display: "flex"
    },
    labelStyle: {
      fontSize: "24px",
      fontWeight: "700",
      marginRight: "10%"
    },
    textStyle: {
      fontSize: "24px",
      fontWeight: "700",
      marginBottom: "20px"
    },
    label: "" + t("PT_AMOUNT_DUE"),
    text: "\u20B9" + t(action === null || action === void 0 ? void 0 : action.AmountDueForPay)
  }), /*#__PURE__*/React__default.createElement("div", {
    style: {
      width: "100%",
      display: "flex",
      justifyContent: "flex-end"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.ButtonSelector, {
    theme: "border",
    label: t('ES_PT_COMMON_CANCEL'),
    onSubmit: closeWarningPopup,
    style: {
      marginLeft: "10px"
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ButtonSelector, {
    label: t('PT_COLLECT'),
    onSubmit: function onSubmit() {
      var _action$redirectionUr;
      return window.location.assign("" + window.location.origin + (action === null || action === void 0 ? void 0 : (_action$redirectionUr = action.redirectionUrl) === null || _action$redirectionUr === void 0 ? void 0 : _action$redirectionUr.pathname));
    },
    style: {
      marginLeft: "10px"
    }
  })))), ")");
}

var ApplicationDetails = function ApplicationDetails(props) {
  var _workflowDetails$data;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var state = Digit.ULBService.getStateId();
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _useParams = reactRouterDom.useParams(),
    applicationNumber = _useParams.id;
  var _useState = React.useState(false),
    displayMenu = _useState[0],
    setDisplayMenu = _useState[1];
  var _useState2 = React.useState(null),
    selectedAction = _useState2[0],
    setSelectedAction = _useState2[1];
  var _useState3 = React.useState(false),
    showModal = _useState3[0],
    setShowModal = _useState3[1];
  var _useState4 = React.useState(false),
    isEnableLoader = _useState4[0],
    setIsEnableLoader = _useState4[1];
  var _useState5 = React.useState(false),
    isWarningPop = _useState5[0],
    setWarningPopUp = _useState5[1];
  var applicationDetails = props.applicationDetails,
    showToast = props.showToast,
    setShowToast = props.setShowToast,
    isLoading = props.isLoading,
    isDataLoading = props.isDataLoading,
    applicationData = props.applicationData,
    mutate = props.mutate,
    nocMutation = props.nocMutation,
    workflowDetails = props.workflowDetails,
    businessService = props.businessService,
    closeToast = props.closeToast,
    moduleCode = props.moduleCode,
    timelineStatusPrefix = props.timelineStatusPrefix,
    forcedActionPrefix = props.forcedActionPrefix,
    statusAttribute = props.statusAttribute,
    ActionBarStyle = props.ActionBarStyle,
    MenuStyle = props.MenuStyle,
    paymentsList = props.paymentsList,
    _props$showTimeLine = props.showTimeLine,
    showTimeLine = _props$showTimeLine === void 0 ? true : _props$showTimeLine;
  React.useEffect(function () {
    if (showToast) {
      workflowDetails.revalidate();
    }
  }, [showToast]);
  function onActionSelect(action) {
    if (action) {
      if (action !== null && action !== void 0 && action.isWarningPopUp) {
        setWarningPopUp(true);
      } else if (action !== null && action !== void 0 && action.redirectionUrll) {
        var _action$redirectionUr;
        window.location.assign(window.location.origin + "/digit-ui/employee/payment/collect/" + (action === null || action === void 0 ? void 0 : (_action$redirectionUr = action.redirectionUrll) === null || _action$redirectionUr === void 0 ? void 0 : _action$redirectionUr.pathname));
      } else if (!(action !== null && action !== void 0 && action.redirectionUrl)) {
        setShowModal(true);
      } else {
        var _action$redirectionUr2, _action$redirectionUr3;
        history.push({
          pathname: (_action$redirectionUr2 = action.redirectionUrl) === null || _action$redirectionUr2 === void 0 ? void 0 : _action$redirectionUr2.pathname,
          state: _extends({}, (_action$redirectionUr3 = action.redirectionUrl) === null || _action$redirectionUr3 === void 0 ? void 0 : _action$redirectionUr3.state)
        });
      }
    }
    setSelectedAction(action);
    setDisplayMenu(false);
  }
  var queryClient = reactQuery.useQueryClient();
  var closeModal = function closeModal() {
    setSelectedAction(null);
    setShowModal(false);
  };
  var closeWarningPopup = function closeWarningPopup() {
    setWarningPopUp(false);
  };
  var submitAction = function submitAction(data, nocData, isOBPS) {
    if (nocData === void 0) {
      nocData = false;
    }
    if (isOBPS === void 0) {
      isOBPS = {};
    }
    try {
      var _temp4 = function _temp4(_result2) {
        if (_exit2) return _result2;
        if (mutate) {
          setIsEnableLoader(true);
          mutate(data, {
            onError: function onError(error, variables) {
              setIsEnableLoader(false);
              setShowToast({
                key: "error",
                error: error
              });
              setTimeout(closeToast, 5000);
            },
            onSuccess: function onSuccess(data, variables) {
              setIsEnableLoader(false);
              if (isOBPS !== null && isOBPS !== void 0 && isOBPS.bpa) {
                data.selectedAction = selectedAction;
                history.replace("/digit-ui/employee/obps/response", {
                  data: data
                });
              }
              if (isOBPS !== null && isOBPS !== void 0 && isOBPS.isStakeholder) {
                data.selectedAction = selectedAction;
                history.push("/digit-ui/employee/obps/stakeholder-response", {
                  data: data
                });
              }
              if (isOBPS !== null && isOBPS !== void 0 && isOBPS.isNoc) {
                history.push("/digit-ui/employee/noc/response", {
                  data: data
                });
              }
              setShowToast({
                key: "success",
                action: selectedAction
              });
              setTimeout(closeToast, 5000);
              queryClient.clear();
              queryClient.refetchQueries("APPLICATION_SEARCH");
            }
          });
        }
        closeModal();
      };
      var _exit2 = false;
      setIsEnableLoader(true);
      if (typeof (data === null || data === void 0 ? void 0 : data.customFunctionToExecute) === "function") {
        data === null || data === void 0 ? void 0 : data.customFunctionToExecute(_extends({}, data));
      }
      var _temp5 = function () {
        if (nocData !== false && nocMutation) {
          var _nocData;
          var nocPrmomises = (_nocData = nocData) === null || _nocData === void 0 ? void 0 : _nocData.map(function (noc) {
            return nocMutation === null || nocMutation === void 0 ? void 0 : nocMutation.mutateAsync(noc);
          });
          var _temp6 = _catch(function () {
            setIsEnableLoader(true);
            return Promise.resolve(Promise.all(nocPrmomises)).then(function (values) {
              values && values.map(function (ob) {
                var _ob$Noc, _ob$Noc$;
                Digit.SessionStorage.del(ob === null || ob === void 0 ? void 0 : (_ob$Noc = ob.Noc) === null || _ob$Noc === void 0 ? void 0 : (_ob$Noc$ = _ob$Noc[0]) === null || _ob$Noc$ === void 0 ? void 0 : _ob$Noc$.nocType);
              });
            });
          }, function (err) {
            var _err$response, _err$response$data, _err$response$data$Er, _err$response$data$Er2, _err$response2, _err$response2$data, _err$response2$data$E, _err$response2$data$E2, _err$response3, _err$response3$data, _err$response3$data$E, _err$response3$data$E2;
            setIsEnableLoader(false);
            var errorValue = err !== null && err !== void 0 && (_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$data = _err$response.data) !== null && _err$response$data !== void 0 && (_err$response$data$Er = _err$response$data.Errors) !== null && _err$response$data$Er !== void 0 && (_err$response$data$Er2 = _err$response$data$Er[0]) !== null && _err$response$data$Er2 !== void 0 && _err$response$data$Er2.code ? t(err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : (_err$response2$data$E = _err$response2$data.Errors) === null || _err$response2$data$E === void 0 ? void 0 : (_err$response2$data$E2 = _err$response2$data$E[0]) === null || _err$response2$data$E2 === void 0 ? void 0 : _err$response2$data$E2.code) : (err === null || err === void 0 ? void 0 : (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : (_err$response3$data$E = _err$response3$data.Errors) === null || _err$response3$data$E === void 0 ? void 0 : (_err$response3$data$E2 = _err$response3$data$E[0]) === null || _err$response3$data$E2 === void 0 ? void 0 : _err$response3$data$E2.message) || err;
            closeModal();
            setShowToast({
              key: "error",
              error: {
                message: errorValue
              }
            });
            setTimeout(closeToast, 5000);
            _exit2 = true;
          });
          if (_temp6 && _temp6.then) return _temp6.then(function () {});
        }
      }();
      return Promise.resolve(_temp5 && _temp5.then ? _temp5.then(_temp4) : _temp4(_temp5));
    } catch (e) {
      return Promise.reject(e);
    }
  };
  if (isLoading || isEnableLoader) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, !isLoading ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(ApplicationDetailsContent, {
    applicationDetails: applicationDetails,
    workflowDetails: workflowDetails,
    isDataLoading: isDataLoading,
    applicationData: applicationData,
    businessService: businessService,
    timelineStatusPrefix: timelineStatusPrefix,
    statusAttribute: statusAttribute,
    paymentsList: paymentsList,
    showTimeLine: showTimeLine
  }), showModal ? /*#__PURE__*/React__default.createElement(ActionModal$5, {
    t: t,
    action: selectedAction,
    tenantId: tenantId,
    state: state,
    id: applicationNumber,
    applicationDetails: applicationDetails,
    applicationData: applicationDetails === null || applicationDetails === void 0 ? void 0 : applicationDetails.applicationData,
    closeModal: closeModal,
    submitAction: submitAction,
    actionData: workflowDetails === null || workflowDetails === void 0 ? void 0 : (_workflowDetails$data = workflowDetails.data) === null || _workflowDetails$data === void 0 ? void 0 : _workflowDetails$data.timeline,
    businessService: businessService,
    workflowDetails: workflowDetails,
    moduleCode: moduleCode
  }) : null, isWarningPop ? /*#__PURE__*/React__default.createElement(ApplicationDetailsWarningPopup, {
    action: selectedAction,
    workflowDetails: workflowDetails,
    businessService: businessService,
    isWarningPop: isWarningPop,
    closeWarningPopup: closeWarningPopup
  }) : null, /*#__PURE__*/React__default.createElement(ApplicationDetailsToast, {
    t: t,
    showToast: showToast,
    closeToast: closeToast,
    businessService: businessService
  }), /*#__PURE__*/React__default.createElement(ApplicationDetailsActionBar, {
    workflowDetails: workflowDetails,
    displayMenu: displayMenu,
    onActionSelect: onActionSelect,
    setDisplayMenu: setDisplayMenu,
    businessService: businessService,
    forcedActionPrefix: forcedActionPrefix,
    ActionBarStyle: ActionBarStyle,
    MenuStyle: MenuStyle
  })) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null));
};

var Heading$5 = function Heading(_ref) {
  var t = _ref.t,
    heading = _ref.heading;
  return /*#__PURE__*/React__default.createElement("h1", {
    className: "heading-m"
  }, "" + t(heading));
};
var Close$6 = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$6 = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$6, null));
};
var ConfirmationQuestion = function ConfirmationQuestion(_ref2) {
  var t = _ref2.t,
    title = _ref2.title;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "confirmation_box"
  }, /*#__PURE__*/React__default.createElement("span", null, " ", t('CONFIRM_DELETE_MSG') + " ", " ", /*#__PURE__*/React__default.createElement("b", null, " " + title), " "));
};
var Confirmation = function Confirmation(_ref3) {
  var t = _ref3.t,
    heading = _ref3.heading,
    docName = _ref3.docName,
    closeModal = _ref3.closeModal,
    actionCancelLabel = _ref3.actionCancelLabel,
    actionCancelOnSubmit = _ref3.actionCancelOnSubmit,
    actionSaveLabel = _ref3.actionSaveLabel,
    actionSaveOnSubmit = _ref3.actionSaveOnSubmit;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading$5, {
      t: t,
      heading: heading
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$6, {
      onClick: closeModal
    }),
    actionCancelLabel: t(actionCancelLabel),
    actionCancelOnSubmit: actionCancelOnSubmit,
    actionSaveLabel: t(actionSaveLabel),
    actionSaveOnSubmit: actionSaveOnSubmit,
    formId: "modal-action"
  }, /*#__PURE__*/React__default.createElement(ConfirmationQuestion, {
    t: t,
    title: docName
  }));
};

var _excluded = ["uploadedFilesData"];
var renderMultipleDocuments = function renderMultipleDocuments(documents) {
  var isMobile = window.Digit.Utils.browser.isMobile();
  if (!documents && !documents.length) return null;
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      display: 'flex',
      flexDirection: isMobile ? 'column' : 'row',
      gap: isMobile ? '40px' : '100px'
    }
  }, documents.map(function (_ref) {
    var fileStoreId = _ref.fileStoreId,
      fileName = _ref.fileName;
    return /*#__PURE__*/React__default.createElement("div", {
      className: "documentDetails_pdf"
    }, /*#__PURE__*/React__default.createElement("div", {
      style: {
        width: '100px'
      },
      onClick: function onClick() {
        return openUploadedDocument(fileStoreId, fileName);
      }
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.GenericFileIcon, null), /*#__PURE__*/React__default.createElement("span", {
      className: "cell-text"
    }, fileName === null || fileName === void 0 ? void 0 : fileName.split(10))));
  }));
};
var Actions = ['EDIT', 'DELETE'];
var getUlbName = function getUlbName(tenantId) {
  var _ulbName, _ulbName$, _ulbName2;
  var ulbName = tenantId === null || tenantId === void 0 ? void 0 : tenantId.split('.')[1];
  ulbName = "" + ((_ulbName = ulbName) === null || _ulbName === void 0 ? void 0 : (_ulbName$ = _ulbName[0]) === null || _ulbName$ === void 0 ? void 0 : _ulbName$.toUpperCase()) + ((_ulbName2 = ulbName) === null || _ulbName2 === void 0 ? void 0 : _ulbName2.slice(1)) + " ";
  return ulbName;
};
var DocumentDetails = function DocumentDetails() {
  var _data$applicationData, _data$applicationData2, _data$applicationData3, _data$applicationData4, _data$applicationData5, _data$applicationData6, _data$applicationData7, _data$applicationData8, _data$applicationData9, _data$applicationData10, _data$applicationData11, _data$applicationData12, _data$applicationData13, _data$applicationData14, _data$applicationData15, _data$applicationData16, _data$applicationData17, _data$applicationData18;
  var isMobile = window.Digit.Utils.browser.isMobile();
  var _useParams = reactRouterDom.useParams(),
    id = _useParams.id;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _useState = React.useState(false),
    showModal = _useState[0],
    setShowModal = _useState[1];
  var _useState2 = React.useState(false),
    displayMenu = _useState2[0],
    setDisplayMenu = _useState2[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _Digit$Hooks$events$u = Digit.Hooks.events.useEventDetails(tenantId, {
      ids: id
    }, {}),
    isLoading = _Digit$Hooks$events$u.isLoading,
    data = _Digit$Hooks$events$u.data;
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_MUTATION_HAPPENED", false),
    setMutationHappened = _Digit$Hooks$useSessi[1];
  var _Digit$Hooks$useSessi2 = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_ERROR_DATA", false),
    clearError = _Digit$Hooks$useSessi2[2];
  var _Digit$Hooks$useSessi3 = Digit.Hooks.useSessionStorage("EMPLOYEE_MSG_MUTATION_SUCCESS_DATA", false),
    clearSuccessData = _Digit$Hooks$useSessi3[2];
  React.useEffect(function () {
    setMutationHappened(false);
    clearSuccessData();
    clearError();
  }, []);
  function onActionSelect(action) {
    if (action === "EDIT") {
      history.push("/digit-ui/employee/engagement/messages/inbox/edit/" + id);
    }
    if (action === "DELETE") {
      setShowModal(true);
    }
    setDisplayMenu(false);
  }
  var handleDelete = function handleDelete() {
    var finalData = function (_ref2) {
      var ogData = _objectWithoutPropertiesLoose(_ref2, _excluded);
      return ogData;
    }(data === null || data === void 0 ? void 0 : data.applicationData);
    var details = {
      events: [_extends({}, finalData, {
        status: "CANCELLED"
      })]
    };
    history.push("/digit-ui/employee/engagement/messages/response?delete=true", details);
  };
  function onModalCancel() {
    setShowModal(false);
  }
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", null, showModal ? /*#__PURE__*/React__default.createElement(Confirmation, {
    t: t,
    heading: 'CONFIRM_DELETE_PUB_BRCST',
    docName: data === null || data === void 0 ? void 0 : (_data$applicationData = data.applicationData) === null || _data$applicationData === void 0 ? void 0 : _data$applicationData.name,
    closeModal: function closeModal() {
      return setShowModal(!showModal);
    },
    actionCancelLabel: 'CS_COMMON_CANCEL',
    actionCancelOnSubmit: onModalCancel,
    actionSaveLabel: 'ES_COMMON_Y_DEL',
    actionSaveOnSubmit: handleDelete
  }) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("CS_HEADER_PUBLIC_BRDCST")), /*#__PURE__*/React__default.createElement("div", {
    className: "notice_and_circular_main gap-ten"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_wrapper"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_row_items"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails_title"
  }, t("EVENTS_ULB_LABEL") + ":"), " ", /*#__PURE__*/React__default.createElement("p", null, getUlbName(data === null || data === void 0 ? void 0 : data.tenantId)), " "), /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_row_items"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails_title"
  }, t("PUBLIC_BRDCST_TITLE_LABEL") + ":"), " ", /*#__PURE__*/React__default.createElement("p", null, data === null || data === void 0 ? void 0 : (_data$applicationData2 = data.applicationData) === null || _data$applicationData2 === void 0 ? void 0 : _data$applicationData2.name), " "), /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_row_items"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails_title"
  }, t("EVENTS_COMMENTS_LABEL") + ":"), " ", /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails__description"
  }, data !== null && data !== void 0 && (_data$applicationData3 = data.applicationData) !== null && _data$applicationData3 !== void 0 && (_data$applicationData4 = _data$applicationData3.description) !== null && _data$applicationData4 !== void 0 && _data$applicationData4.length ? data === null || data === void 0 ? void 0 : (_data$applicationData5 = data.applicationData) === null || _data$applicationData5 === void 0 ? void 0 : _data$applicationData5.description : 'NA'), " "), /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_row_items"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails_title"
  }, t("EVENTS_FROM_DATE_LABEL") + ":"), " ", /*#__PURE__*/React__default.createElement("p", null, data !== null && data !== void 0 && (_data$applicationData6 = data.applicationData) !== null && _data$applicationData6 !== void 0 && (_data$applicationData7 = _data$applicationData6.eventDetails) !== null && _data$applicationData7 !== void 0 && _data$applicationData7.fromDate ? format(new Date(data === null || data === void 0 ? void 0 : (_data$applicationData8 = data.applicationData) === null || _data$applicationData8 === void 0 ? void 0 : (_data$applicationData9 = _data$applicationData8.eventDetails) === null || _data$applicationData9 === void 0 ? void 0 : _data$applicationData9.fromDate), 'dd/MM/yyyy') : null), " "), /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_row_items"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails_title"
  }, t("EVENTS_TO_DATE_LABEL") + ":"), " ", /*#__PURE__*/React__default.createElement("p", null, data !== null && data !== void 0 && (_data$applicationData10 = data.applicationData) !== null && _data$applicationData10 !== void 0 && (_data$applicationData11 = _data$applicationData10.eventDetails) !== null && _data$applicationData11 !== void 0 && _data$applicationData11.toDate ? format(new Date(data === null || data === void 0 ? void 0 : (_data$applicationData12 = data.applicationData) === null || _data$applicationData12 === void 0 ? void 0 : (_data$applicationData13 = _data$applicationData12.eventDetails) === null || _data$applicationData13 === void 0 ? void 0 : _data$applicationData13.toDate), 'dd/MM/yyyy') : null), " "), /*#__PURE__*/React__default.createElement("span", {
    className: "documentDetails_subheader"
  }, "" + t('CS_COMMON_DOCUMENTS')), data !== null && data !== void 0 && (_data$applicationData14 = data.applicationData) !== null && _data$applicationData14 !== void 0 && (_data$applicationData15 = _data$applicationData14.eventDetails) !== null && _data$applicationData15 !== void 0 && (_data$applicationData16 = _data$applicationData15.documents) !== null && _data$applicationData16 !== void 0 && _data$applicationData16.length ? renderMultipleDocuments(data === null || data === void 0 ? void 0 : (_data$applicationData17 = data.applicationData) === null || _data$applicationData17 === void 0 ? void 0 : (_data$applicationData18 = _data$applicationData17.eventDetails) === null || _data$applicationData18 === void 0 ? void 0 : _data$applicationData18.documents) : "NA")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, displayMenu ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Menu, {
    style: {
      width: isMobile ? 'full' : '240px'
    },
    localeKeyPrefix: "ES_CE",
    options: Actions,
    t: t,
    onSelect: onActionSelect
  }) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("ES_COMMON_TAKE_ACTION"),
    onSubmit: function onSubmit() {
      return setDisplayMenu(!displayMenu);
    }
  })));
};

var Messages = function Messages(_ref) {
  var _ref$match = _ref.match;
  _ref$match = _ref$match === void 0 ? {} : _ref$match;
  var path = _ref$match.path,
    tenants = _ref.tenants,
    parentRoute = _ref.parentRoute;
  return /*#__PURE__*/React__default.createElement(reactRouterDom.Switch, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/create",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(NewEvents$1, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/inbox/create",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(NewEvents$1, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/inbox/details/:id",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(DocumentDetails, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/inbox/edit/:id",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(EditMessage, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/inbox",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(Inbox$1, _extends({}, props, {
        tenants: tenants,
        parentRoute: parentRoute
      }));
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/response",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(Response$1, props);
    }
  }));
};

var EventForm = function EventForm(_ref) {
  var _errors$name, _errors$name2, _data$mseva, _data$mseva$EventCate;
  var formData = _ref.formData,
    control = _ref.control,
    errors = _ref.errors;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var state = tenantId === null || tenantId === void 0 ? void 0 : tenantId.split('.')[0];
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  }).sort(alphabeticalSortFunctionForTenantsBasedOnName);
  var getDefaultUlb = function getDefaultUlb() {
    if (formData !== null && formData !== void 0 && formData.defaultTenantId) {
      return ulbs === null || ulbs === void 0 ? void 0 : ulbs.find(function (ulb) {
        return (ulb === null || ulb === void 0 ? void 0 : ulb.code) === (formData === null || formData === void 0 ? void 0 : formData.defaultTenantId);
      });
    }
    if (tenantId) {
      return ulbs === null || ulbs === void 0 ? void 0 : ulbs.find(function (ulb) {
        return (ulb === null || ulb === void 0 ? void 0 : ulb.code) === tenantId;
      });
    }
    return (userUlbs === null || userUlbs === void 0 ? void 0 : userUlbs.length) === 1 ? userUlbs === null || userUlbs === void 0 ? void 0 : userUlbs[0] : null;
  };
  var _Digit$Hooks$useCommo = Digit.Hooks.useCommonMDMS(state, "mseva", ["EventCategories"]),
    isLoading = _Digit$Hooks$useCommo.isLoading,
    data = _Digit$Hooks$useCommo.data;
  var location = reactRouterDom.useLocation();
  var isInEditFormMode = React.useMemo(function () {
    if (location.pathname.includes('/engagement/event/edit-event')) return true;
    return false;
  }, [location.pathname]);
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, t("EVENTS_ULB_LABEL") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: control,
    defaultValue: getDefaultUlb(),
    name: "tenantId",
    rules: {
      required: true
    },
    render: function render(_ref2) {
      var onChange = _ref2.onChange,
        value = _ref2.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
        option: userUlbs,
        selected: value,
        disable: isInEditFormMode ? true : (userUlbs === null || userUlbs === void 0 ? void 0 : userUlbs.length) === 1,
        optionKey: "code",
        t: t,
        select: onChange
      });
    }
  }), errors && errors['tenantId'] && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TENANT_ERROR_REQUIRED")))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, t("EVENTS_NAME_LABEL") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    defaultValue: formData === null || formData === void 0 ? void 0 : formData.name,
    render: function render(_ref3) {
      var onChange = _ref3.onChange,
        ref = _ref3.ref,
        value = _ref3.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        value: value,
        type: "text",
        name: "name",
        onChange: onChange,
        inputRef: ref
      });
    },
    name: "name",
    rules: {
      required: true,
      maxLength: 66
    },
    control: control
  }), errors && (errors === null || errors === void 0 ? void 0 : errors.name) && (errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_COMMENTS_ERROR_REQUIRED")), errors && (errors === null || errors === void 0 ? void 0 : errors.name) && (errors === null || errors === void 0 ? void 0 : (_errors$name2 = errors.name) === null || _errors$name2 === void 0 ? void 0 : _errors$name2.type) === "maxLength" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_MAXLENGTH_66_CHARS_REACHED")))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, t("EVENTS_CATEGORY_LABEL") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: "eventCategory",
    control: control,
    defaultValue: formData !== null && formData !== void 0 && formData.category ? data === null || data === void 0 ? void 0 : (_data$mseva = data.mseva) === null || _data$mseva === void 0 ? void 0 : (_data$mseva$EventCate = _data$mseva.EventCategories.filter(function (category) {
      return category.code === (formData === null || formData === void 0 ? void 0 : formData.category);
    })) === null || _data$mseva$EventCate === void 0 ? void 0 : _data$mseva$EventCate[0] : null,
    rules: {
      required: true
    },
    render: function render(_ref4) {
      var _data$mseva2;
      var onChange = _ref4.onChange,
        ref = _ref4.ref,
        value = _ref4.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
        inputRef: ref,
        option: data === null || data === void 0 ? void 0 : (_data$mseva2 = data.mseva) === null || _data$mseva2 === void 0 ? void 0 : _data$mseva2.EventCategories,
        optionKey: "code",
        t: t,
        select: onChange,
        selected: value
      });
    }
  }), errors && errors['eventCategory'] && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_CATEGORY_ERROR_REQUIRED")))));
};

var allowedFileTypes = /(.*?)(jpg|jpeg|png|image|pdf|msword|openxmlformats-officedocument)$/i;
var MessageForm = function MessageForm(_ref) {
  var _errors$name, _errors$name2, _data$mseva, _data$mseva$EventCate, _errors$description, _errors$description2, _errors$fromDate, _errors$fromDate2, _errors$toDate, _errors$toDate2;
  var formData = _ref.formData,
    control = _ref.control,
    errors = _ref.errors,
    setError = _ref.setError;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var state = tenantId === null || tenantId === void 0 ? void 0 : tenantId.split('.')[0];
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var _Digit$Hooks$useCommo = Digit.Hooks.useCommonMDMS(state, "mseva", ["EventCategories"]),
    isLoading = _Digit$Hooks$useCommo.isLoading,
    data = _Digit$Hooks$useCommo.data;
  var stateId = Digit.ULBService.getStateId();
  var userUlbs = ulbs.filter(function (ulb) {
    return (ulb === null || ulb === void 0 ? void 0 : ulb.code) === tenantId;
  });
  var isValidFromDate = function isValidFromDate(date) {
    var fromDate = convertDateToMaximumPossibleValue(new Date("" + (formData === null || formData === void 0 ? void 0 : formData.fromDate)));
    var todaysDate = new Date();
    if (!isValid(fromDate)) return false;
    if (fromDate.getTime() < todaysDate.getTime()) {
      setError('fromDate', {
        type: 'isValidFromDate'
      }, {
        shouldFocus: true
      });
      return false;
    }
    return true;
  };
  var isValidToDate = function isValidToDate(date) {
    var fromDate = convertDateToMaximumPossibleValue(new Date("" + (formData === null || formData === void 0 ? void 0 : formData.fromDate)));
    var toDate = convertDateToMaximumPossibleValue(new Date("" + (formData === null || formData === void 0 ? void 0 : formData.toDate)));
    var todaysDate = new Date();
    if (!isValid(toDate)) return false;
    if (toDate.getTime() < todaysDate.getTime() || toDate.getTime() < fromDate.getTime()) {
      setError('toDate', {
        type: 'isValidToDate'
      }, {
        shouldFocus: true
      });
      return false;
    }
    return true;
  };
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, t("EVENTS_ULB_LABEL") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: control,
    defaultValue: (userUlbs === null || userUlbs === void 0 ? void 0 : userUlbs.length) === 1 ? userUlbs === null || userUlbs === void 0 ? void 0 : userUlbs[0] : null,
    name: "tenantId",
    rules: {
      required: true
    },
    render: function render(_ref2) {
      var onChange = _ref2.onChange,
        value = _ref2.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
        option: userUlbs,
        selected: value,
        disable: (userUlbs === null || userUlbs === void 0 ? void 0 : userUlbs.length) === 1,
        optionKey: "code",
        t: t,
        select: onChange
      });
    }
  }), errors && errors['tenantId'] && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TENANT_ERROR_REQUIRED")))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, t("PUBLIC_BRDCST_TITLE_LABEL") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    defaultValue: formData === null || formData === void 0 ? void 0 : formData.name,
    render: function render(_ref3) {
      var onChange = _ref3.onChange,
        ref = _ref3.ref,
        value = _ref3.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        value: value,
        type: "text",
        name: "name",
        onChange: onChange,
        inputRef: ref
      });
    },
    name: "name",
    rules: {
      required: true,
      maxLength: 66
    },
    control: control
  }), errors && (errors === null || errors === void 0 ? void 0 : errors.name) && (errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_COMMENTS_ERROR_REQUIRED")), errors && (errors === null || errors === void 0 ? void 0 : errors.name) && (errors === null || errors === void 0 ? void 0 : (_errors$name2 = errors.name) === null || _errors$name2 === void 0 ? void 0 : _errors$name2.type) === "maxLength" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_MAXLENGTH_66_CHARS_REACHED")))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, {
    style: {
      marginBottom: "24px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, t("EVENTS_COMMENTS_LABEL") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: "description",
    control: control,
    defaultValue: formData !== null && formData !== void 0 && formData.category ? data === null || data === void 0 ? void 0 : (_data$mseva = data.mseva) === null || _data$mseva === void 0 ? void 0 : (_data$mseva$EventCate = _data$mseva.EventCategories.filter(function (category) {
      return category.code === (formData === null || formData === void 0 ? void 0 : formData.category);
    })) === null || _data$mseva$EventCate === void 0 ? void 0 : _data$mseva$EventCate[0] : null,
    rules: {
      required: true,
      maxLength: 500
    },
    render: function render(_ref4) {
      var onChange = _ref4.onChange,
        ref = _ref4.ref,
        value = _ref4.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextArea, {
        inputRef: ref,
        value: value,
        name: "description",
        onChange: onChange,
        hintText: t('PUBLIC_BRDCST_MSG_LENGTH')
      });
    }
  }), errors && (errors === null || errors === void 0 ? void 0 : errors.description) && (errors === null || errors === void 0 ? void 0 : (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_COMMENTS_ERROR_REQUIRED")), errors && (errors === null || errors === void 0 ? void 0 : errors.description) && (errors === null || errors === void 0 ? void 0 : (_errors$description2 = errors.description) === null || _errors$description2 === void 0 ? void 0 : _errors$description2.type) === "maxLength" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_MAXLENGTH_REACHED")))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, {
    style: {
      marginBottom: "24px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, "" + t("EVENTS_ATTACHMENT_LABEL")), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: "documents",
    control: control
    ,
    rules: {
      required: false
    },
    render: function render(_ref5) {
      var onChange = _ref5.onChange,
        _ref5$value = _ref5.value,
        value = _ref5$value === void 0 ? [] : _ref5$value;
      function getFileStoreData(filesData) {
        var numberOfFiles = filesData.length;
        var finalDocumentData = [];
        if (numberOfFiles > 0) {
          filesData.forEach(function (value) {
            var _value$, _value$$fileStoreId, _value$2, _value$2$file;
            finalDocumentData.push({
              fileName: value === null || value === void 0 ? void 0 : value[0],
              fileStoreId: value === null || value === void 0 ? void 0 : (_value$ = value[1]) === null || _value$ === void 0 ? void 0 : (_value$$fileStoreId = _value$.fileStoreId) === null || _value$$fileStoreId === void 0 ? void 0 : _value$$fileStoreId.fileStoreId,
              documentType: value === null || value === void 0 ? void 0 : (_value$2 = value[1]) === null || _value$2 === void 0 ? void 0 : (_value$2$file = _value$2.file) === null || _value$2$file === void 0 ? void 0 : _value$2$file.type
            });
          });
        }
        onChange(finalDocumentData);
      }
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiUploadWrapper, {
        t: t,
        module: "engagement",
        tenantId: stateId,
        getFormState: getFileStoreData,
        showHintBelow: true,
        setuploadedstate: value,
        allowedFileTypesRegex: allowedFileTypes,
        allowedMaxSizeInMB: 5,
        hintText: t("DOCUMENTS_ATTACH_RESTRICTIONS_SIZE")
      });
    }
  }))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, t("PUBLIC_BRDCST_FROM_DATE_LABEL") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: control,
    name: "fromDate",
    defaultValue: formData === null || formData === void 0 ? void 0 : formData.fromDate,
    rules: {
      required: true,
      validate: {
        isValidFromDate: isValidFromDate
      }
    },
    render: function render(_ref6) {
      var onChange = _ref6.onChange,
        value = _ref6.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "date",
        isRequired: true,
        onChange: onChange,
        defaultValue: value
      });
    }
  }), errors && (errors === null || errors === void 0 ? void 0 : errors.fromDate) && (errors === null || errors === void 0 ? void 0 : (_errors$fromDate = errors.fromDate) === null || _errors$fromDate === void 0 ? void 0 : _errors$fromDate.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_FROM_DATE_ERROR_REQUIRED")), errors && (errors === null || errors === void 0 ? void 0 : errors.fromDate) && (errors === null || errors === void 0 ? void 0 : (_errors$fromDate2 = errors.fromDate) === null || _errors$fromDate2 === void 0 ? void 0 : _errors$fromDate2.type) === "isValidFromDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_FROM_DATE_ERROR_INVALID")))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, t("PUBLIC_BRDCST_TO_DATE_LABEL") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: control,
    name: "toDate",
    defaultValue: formData === null || formData === void 0 ? void 0 : formData.toDate,
    rules: {
      required: true,
      validate: {
        isValidToDate: isValidToDate
      }
    },
    render: function render(_ref7) {
      var onChange = _ref7.onChange,
        value = _ref7.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "date",
        isRequired: true,
        onChange: onChange,
        defaultValue: value
      });
    }
  }), errors && (errors === null || errors === void 0 ? void 0 : errors.toDate) && (errors === null || errors === void 0 ? void 0 : (_errors$toDate = errors.toDate) === null || _errors$toDate === void 0 ? void 0 : _errors$toDate.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), errors && (errors === null || errors === void 0 ? void 0 : errors.toDate) && (errors === null || errors === void 0 ? void 0 : (_errors$toDate2 = errors.toDate) === null || _errors$toDate2 === void 0 ? void 0 : _errors$toDate2.type) === "isValidToDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID")))));
};

var SelectGeolocation = function SelectGeolocation(_ref) {
  var _formData$geoLocation, _formData$geoLocation2;
  var onSelect = _ref.onSelect,
    config = _ref.config,
    formData = _ref.formData;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var onChange = function onChange(pincode, position) {
    onSelect(config === null || config === void 0 ? void 0 : config.key, position);
  };
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, "" + t("EVENTS_GEOLOCATION_LABEL")), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LocationSearch, {
    position: {
      latitude: formData === null || formData === void 0 ? void 0 : (_formData$geoLocation = formData.geoLocation) === null || _formData$geoLocation === void 0 ? void 0 : _formData$geoLocation.latitude,
      longitude: formData === null || formData === void 0 ? void 0 : (_formData$geoLocation2 = formData.geoLocation) === null || _formData$geoLocation2 === void 0 ? void 0 : _formData$geoLocation2.longitude
    },
    onChange: onChange
  }))));
};

var SelectToDate = function SelectToDate(_ref) {
  var _errors$toDate, _errors$toDate2;
  var formData = _ref.formData,
    control = _ref.control,
    errors = _ref.errors,
    setError = _ref.setError;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var isValidDate = function isValidDate(date) {
    if (!isValid(new Date(formData === null || formData === void 0 ? void 0 : formData.fromDate)) || !isValid(new Date(date))) return false;
    if (new Date((formData === null || formData === void 0 ? void 0 : formData.fromDate) + " " + (formData === null || formData === void 0 ? void 0 : formData.fromTime)) < new Date()) {
      setError('fromDate', {
        type: 'isValidFromDate'
      }, {
        shouldFocus: true
      });
      return false;
    }
    if (new Date(date + " " + (formData === null || formData === void 0 ? void 0 : formData.toTime)) < new Date()) return false;
    return new Date((formData === null || formData === void 0 ? void 0 : formData.fromDate) + " " + (formData === null || formData === void 0 ? void 0 : formData.fromTime)) <= new Date(date + " " + (formData === null || formData === void 0 ? void 0 : formData.toTime));
  };
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.LabelFieldPair, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "card-label-smaller"
  }, t("EVENTS_TO_DATE_LABEL") + " *"), /*#__PURE__*/React__default.createElement("div", {
    className: "field"
  }, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: control,
    name: "toDate",
    defaultValue: formData === null || formData === void 0 ? void 0 : formData.toDate,
    rules: {
      required: true,
      validate: {
        isValidDate: isValidDate
      }
    },
    render: function render(_ref2) {
      var onChange = _ref2.onChange,
        value = _ref2.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "date",
        isRequired: true,
        onChange: onChange,
        defaultValue: value
      });
    }
  }), errors && (errors === null || errors === void 0 ? void 0 : errors.toDate) && (errors === null || errors === void 0 ? void 0 : (_errors$toDate = errors.toDate) === null || _errors$toDate === void 0 ? void 0 : _errors$toDate.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), errors && (errors === null || errors === void 0 ? void 0 : errors.toDate) && (errors === null || errors === void 0 ? void 0 : (_errors$toDate2 = errors.toDate) === null || _errors$toDate2 === void 0 ? void 0 : _errors$toDate2.type) === "isValidDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID")))));
};

var _excluded$1 = ["header", "actions", "eventNotificationText", "timePastAfterEventCreation", "timeApproxiamationInUnits"];
var renderSingleViewAndDownloadButton = function renderSingleViewAndDownloadButton(t, documents) {
  if (!(documents !== null && documents !== void 0 && documents.length)) return null;
  var _documents$ = documents === null || documents === void 0 ? void 0 : documents[0],
    fileStoreId = _documents$.fileStoreId,
    fileName = _documents$.fileName;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "display-flex-gap-2"
  }, fileStoreId && fileStoreId.length ? /*#__PURE__*/React__default.createElement("span", {
    className: "link",
    onClick: function onClick() {
      return openUploadedDocument(fileStoreId, fileName);
    }
  }, " ", t("CE_DOCUMENT_VIEW_LINK"), " ") : null, fileStoreId && fileStoreId.length ? /*#__PURE__*/React__default.createElement("span", {
    className: "link",
    onClick: function onClick() {
      return downloadDocument(fileStoreId);
    }
  }, " ", t("CE_DOCUMENT_DOWNLOAD_LINK"), " ") : null);
};
var renderMultipleViewAndDownloadButtons = function renderMultipleViewAndDownloadButtons(t, documents) {
  if (!documents.length) return null;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "broadcastnotifications_actionswrapper-multi"
  }, documents.map(function (_ref, index) {
    var fileName = _ref.fileName,
      fileStoreId = _ref.fileStoreId;
    return /*#__PURE__*/React__default.createElement("div", {
      className: "display-flex-gap-2"
    }, fileName.length ? /*#__PURE__*/React__default.createElement("p", null, fileName, " : ") : null, fileStoreId.length ? /*#__PURE__*/React__default.createElement("span", {
      className: "link",
      onClick: function onClick() {
        return openUploadedDocument(fileStoreId, fileName);
      }
    }, " ", t("CE_DOCUMENT_VIEW_LINK"), " ") : null, fileStoreId.length ? /*#__PURE__*/React__default.createElement("span", {
      className: "link",
      onClick: function onClick() {
        return downloadDocument(fileStoreId);
      }
    }, " ", t("CE_DOCUMENT_DOWNLOAD_LINK"), " ") : null);
  }));
};
var BroadcastWhatsNewCard = function BroadcastWhatsNewCard(_ref2) {
  var header = _ref2.header,
    actions = _ref2.actions,
    eventNotificationText = _ref2.eventNotificationText,
    timePastAfterEventCreation = _ref2.timePastAfterEventCreation,
    timeApproxiamationInUnits = _ref2.timeApproxiamationInUnits,
    props = _objectWithoutPropertiesLoose(_ref2, _excluded$1);
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var uploadedDocuments = props.eventDetails.documents;
  var getTransformedLocale = function getTransformedLocale(label) {
    if (typeof label === "number") return label;
    return label && label.toUpperCase().replace(/[.:-\s\/]/g, "_");
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: "WhatsNewCard"
  }, /*#__PURE__*/React__default.createElement("h2", null, t(header)), /*#__PURE__*/React__default.createElement("p", null, eventNotificationText), actions === null || actions === void 0 ? void 0 : actions.map(function (i) {
    return /*#__PURE__*/React__default.createElement("a", {
      href: i === null || i === void 0 ? void 0 : i.actionUrl
    }, "" + t("CS_COMMON_" + getTransformedLocale(i === null || i === void 0 ? void 0 : i.code)));
  }), (uploadedDocuments === null || uploadedDocuments === void 0 ? void 0 : uploadedDocuments.length) > 1 ? renderMultipleViewAndDownloadButtons(t, uploadedDocuments) : renderSingleViewAndDownloadButton(t, uploadedDocuments), /*#__PURE__*/React__default.createElement("p", null, timePastAfterEventCreation + (" " + t(timeApproxiamationInUnits))));
};

var NotificationsAndWhatsNew = function NotificationsAndWhatsNew(_ref) {
  var _Digit$UserService, _Digit$UserService$ge;
  var variant = _ref.variant,
    parentRoute = _ref.parentRoute;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var location = reactRouterDom.useLocation();
  var history = reactRouterDom.useHistory();
  var tenantId = Digit.ULBService.getCitizenCurrentTenant();
  var _Digit$Hooks$useNotif = Digit.Hooks.useNotificationCount({
      tenantId: tenantId,
      config: {
        enabled: !!((_Digit$UserService = Digit.UserService) !== null && _Digit$UserService !== void 0 && (_Digit$UserService$ge = _Digit$UserService.getUser()) !== null && _Digit$UserService$ge !== void 0 && _Digit$UserService$ge.access_token)
      }
    }),
    _Digit$Hooks$useNotif2 = _Digit$Hooks$useNotif.data;
  _Digit$Hooks$useNotif2 = _Digit$Hooks$useNotif2 === void 0 ? {} : _Digit$Hooks$useNotif2;
  var preVisitUnseenNotificationCount = _Digit$Hooks$useNotif2.unreadCount,
    refetch = _Digit$Hooks$useNotif.refetch;
  var _Digit$Hooks$useClear = Digit.Hooks.useClearNotifications(),
    mutate = _Digit$Hooks$useClear.mutate,
    isSuccess = _Digit$Hooks$useClear.isSuccess;
  React.useEffect(function () {
    isSuccess ? refetch() : false;
  }, [isSuccess]);
  React.useEffect(function () {
    return preVisitUnseenNotificationCount && tenantId ? mutate({
      tenantId: tenantId
    }) : null;
  }, [tenantId, preVisitUnseenNotificationCount]);
  var _Digit$Hooks$useEvent = Digit.Hooks.useEvents({
      tenantId: tenantId,
      variant: variant
    }),
    EventsData = _Digit$Hooks$useEvent.data,
    EventsDataLoading = _Digit$Hooks$useEvent.isLoading;

  if (EventsDataLoading) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  if ((EventsData === null || EventsData === void 0 ? void 0 : EventsData.length) === 0) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "CitizenEngagementNotificationWrapper"
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, "" + t("CS_HEADER_NOTIFICATIONS")), /*#__PURE__*/React__default.createElement("h1", null, "Nothing to show"));
  }
  var VariantWiseRender = function VariantWiseRender() {
    switch (variant) {
      case "notifications":
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("CS_HEADER_NOTIFICATIONS") + " " + (preVisitUnseenNotificationCount ? "(" + preVisitUnseenNotificationCount + ")" : ""));
      case "whats-new":
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("CS_HEADER_WHATSNEW"));
      default:
        return /*#__PURE__*/React__default.createElement(reactRouterDom.Redirect, {
          to: {
            pathname: "/digit-ui/citizen",
            state: {
              from: location.pathname + location.search
            }
          }
        });
    }
  };
  function onEventCardClick(id) {
    history.push(parentRoute + "/events/details/" + id);
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "CitizenEngagementNotificationWrapper"
  }, /*#__PURE__*/React__default.createElement(VariantWiseRender, null), EventsData !== null && EventsData !== void 0 && EventsData.length ? EventsData.map(function (DataParamsInEvent) {
    return (DataParamsInEvent === null || DataParamsInEvent === void 0 ? void 0 : DataParamsInEvent.eventType) === "EVENTSONGROUND" ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.OnGroundEventCard, _extends({
      onClick: onEventCardClick
    }, DataParamsInEvent)) : (DataParamsInEvent === null || DataParamsInEvent === void 0 ? void 0 : DataParamsInEvent.eventType) === "BROADCAST" ? /*#__PURE__*/React__default.createElement(BroadcastWhatsNewCard, DataParamsInEvent) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.WhatsNewCard, DataParamsInEvent);
  }) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardCaption, null, t("COMMON_INBOX_NO_DATA"))));
};

var EventsListOnGround = function EventsListOnGround(_ref) {
  var _Digit$UserService, _Digit$UserService$ge, _Digit$UserService2, _Digit$UserService2$g;
  var variant = _ref.variant,
    parentRoute = _ref.parentRoute;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var location = reactRouterDom.useLocation();
  var history = reactRouterDom.useHistory();
  var tenantId = Digit.ULBService.getCitizenCurrentTenant();
  var _Digit$Hooks$useNotif = Digit.Hooks.useNotificationCount({
      tenantId: tenantId,
      config: {
        enabled: !!((_Digit$UserService2 = Digit.UserService) !== null && _Digit$UserService2 !== void 0 && (_Digit$UserService2$g = _Digit$UserService2.getUser()) !== null && _Digit$UserService2$g !== void 0 && _Digit$UserService2$g.access_token)
      }
    });
  var preVisitUnseenEventsCountLoaded = _Digit$Hooks$useNotif.isSuccess;
  var _Digit$Hooks$useEvent = Digit.Hooks.useEvents({
      tenantId: tenantId,
      variant: variant
    }),
    EventsData = _Digit$Hooks$useEvent.data,
    EventsDataLoading = _Digit$Hooks$useEvent.isLoading;
  if (!((_Digit$UserService = Digit.UserService) !== null && _Digit$UserService !== void 0 && (_Digit$UserService$ge = _Digit$UserService.getUser()) !== null && _Digit$UserService$ge !== void 0 && _Digit$UserService$ge.access_token)) {
    localStorage.clear();
    sessionStorage.clear();
    return /*#__PURE__*/React__default.createElement(reactRouterDom.Redirect, {
      to: {
        pathname: "/digit-ui/citizen/login",
        state: {
          from: location.pathname + location.search
        }
      }
    });
  }
  if (EventsDataLoading || !preVisitUnseenEventsCountLoaded) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  function onEventCardClick(id) {
    history.push(parentRoute + "/events/details/" + id);
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "CitizenEngagementNotificationWrapper"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("EVENTS_EVENTS_HEADER") + "(" + (EventsData === null || EventsData === void 0 ? void 0 : EventsData.length) + ")"), EventsData.length ? EventsData.map(function (DataParamsInEvent) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.OnGroundEventCard, _extends({
      onClick: onEventCardClick
    }, DataParamsInEvent));
  }) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardCaption, null, t("COMMON_INBOX_NO_DATA"))));
};

var Heading$6 = function Heading(props) {
  return /*#__PURE__*/React__default.createElement("h1", {
    className: "heading-m"
  }, props.label);
};
var Close$7 = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$7 = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$7, null));
};
var EventDetails = function EventDetails() {
  var _useParams = reactRouterDom.useParams(),
    id = _useParams.id;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _useState = React.useState(false),
    showModal = _useState[0],
    setShowModal = _useState[1];
  var _useState2 = React.useState(false),
    displayMenu = _useState2[0],
    setDisplayMenu = _useState2[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _Digit$Hooks$events$u = Digit.Hooks.events.useEventDetails(tenantId, {
      ids: id
    }),
    isLoading = _Digit$Hooks$events$u.isLoading,
    data = _Digit$Hooks$events$u.data;
  var _Digit$Hooks$useSessi = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_MUTATION_HAPPENED", false),
    setMutationHappened = _Digit$Hooks$useSessi[1];
  var _Digit$Hooks$useSessi2 = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_ERROR_DATA", false),
    clearError = _Digit$Hooks$useSessi2[2];
  var _Digit$Hooks$useSessi3 = Digit.Hooks.useSessionStorage("EMPLOYEE_EVENT_MUTATION_SUCCESS_DATA", false),
    clearSuccessData = _Digit$Hooks$useSessi3[2];
  React.useEffect(function () {
    setMutationHappened(false);
    clearSuccessData();
    clearError();
  }, []);
  function onActionSelect(action) {
    if (action === "EDIT") {
      history.push("/digit-ui/employee/engagement/event/edit-event/" + id);
    }
    if (action === "DELETE") {
      setShowModal(true);
    }
    setDisplayMenu(false);
  }
  var handleDelete = function handleDelete() {
    var details = {
      events: [_extends({}, data === null || data === void 0 ? void 0 : data.applicationData, {
        status: "CANCELLED"
      })]
    };
    history.push("/digit-ui/employee/engagement/event/response?delete=true", details);
  };
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("ES_TITLE_APPLICATION_DETAILS")), /*#__PURE__*/React__default.createElement(ApplicationDetails, {
    applicationData: data === null || data === void 0 ? void 0 : data.applicationData,
    applicationDetails: data,
    isLoading: isLoading,
    isDataLoading: isLoading
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, displayMenu ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Menu, {
    localeKeyPrefix: "ES_EVENT",
    options: ['EDIT', 'DELETE'],
    t: t,
    onSelect: onActionSelect
  }) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("ES_COMMON_TAKE_ACTION"),
    onSubmit: function onSubmit() {
      return setDisplayMenu(!displayMenu);
    }
  })), showModal && /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading$6, {
      label: t('ES_EVENT_DELETE_POPUP_HEADER')
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$7, {
      onClick: function onClick() {
        return setShowModal(false);
      }
    }),
    actionCancelLabel: t("CS_COMMON_CANCEL"),
    actionCancelOnSubmit: function actionCancelOnSubmit() {
      return setShowModal(false);
    },
    actionSaveLabel: t('ES_EVENT_DELETE'),
    actionSaveOnSubmit: handleDelete
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
    style: {
      boxShadow: "none"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardText, null, t("ES_EVENT_DELETE_TEXT")))));
};

var Searchbar = function Searchbar(_ref) {
  var searchValue = _ref.searchValue,
    _onChange = _ref.onChange,
    handleKeyPress = _ref.handleKeyPress,
    handleSearch = _ref.handleSearch,
    t = _ref.t;
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    className: "searchInput",
    placeholder: t("CE_SERACH_DOCUMENTS"),
    value: searchValue,
    onChange: function onChange(ev) {
      return _onChange(ev.target.value);
    },
    signature: true,
    signatureImg: /*#__PURE__*/React__default.createElement(digitUiReactComponents.SearchIconSvg, {
      className: "signature-img",
      onClick: function onClick() {
        return handleSearch();
      }
    }),
    onKeyPress: handleKeyPress
  }));
};

var useDebounce = function useDebounce(value, delay) {
  var _useState = React.useState(value),
    debouncedValue = _useState[0],
    setDebouncedValue = _useState[1];
  React.useEffect(function () {
    var handler = setTimeout(function () {
      setDebouncedValue(value);
    }, delay);
    return function () {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
};

var DocumentCard = function DocumentCard(_ref) {
  var documentTitle = _ref.documentTitle,
    _ref$documentSize = _ref.documentSize,
    documentSize = _ref$documentSize === void 0 ? 2.3 : _ref$documentSize,
    lastModifiedData = _ref.lastModifiedData,
    description = _ref.description,
    filestoreId = _ref.filestoreId,
    documentLink = _ref.documentLink,
    t = _ref.t;
  var isMobile = window.Digit.Utils.browser.isMobile();
  return /*#__PURE__*/React__default.createElement("div", {
    className: "notice_and_circular_main"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "notice_and_circular_image"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.GenericFileIcon, {
    height: "" + (isMobile ? 66 : 100),
    width: "" + (isMobile ? 53 : 100)
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "notice_and_circular_content"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "notice_and_circular_heading_mb"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardHeader, null, documentTitle), documentSize ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardCaption, null, getFileSize(documentSize)) : null), /*#__PURE__*/React__default.createElement("div", {
    className: "notice_and_circular_caption"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardCaption, null, t("CE_DCOUMENT_UPLOADED_ON") + " " + (lastModifiedData ? format(new Date(lastModifiedData), "do MMMM yyyy") : "-"))), /*#__PURE__*/React__default.createElement("div", {
    className: "notice_and_circular_text"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardText, null, description !== null && description !== void 0 && description.length ? description : "NA")), /*#__PURE__*/React__default.createElement("div", {
    className: "view_download_main"
  }, filestoreId && filestoreId.length ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.LinkButton, {
    label: /*#__PURE__*/React__default.createElement("div", {
      className: "views",
      onClick: function onClick() {
        return openUploadedDocument(filestoreId ? filestoreId : null, documentTitle);
      }
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.ViewsIcon, null), /*#__PURE__*/React__default.createElement("p", null, t("CE_DOCUMENT_VIEW_LINK")))
  }) : null, documentLink && documentLink.length ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.LinkButton, {
    label: /*#__PURE__*/React__default.createElement("div", {
      className: "views",
      onClick: function onClick() {
        return openDocumentLink(documentLink, documentTitle);
      }
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.ExternalLinkIcon, null), /*#__PURE__*/React__default.createElement("p", null, t("CE_DOCUMENT_OPEN_LINK")))
  }) : null, filestoreId && filestoreId.length ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.LinkButton, {
    label: /*#__PURE__*/React__default.createElement("div", {
      className: "views download_views_padding"
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.DownloadImgIcon, null), /*#__PURE__*/React__default.createElement("p", null, t("CE_DOCUMENT_DOWNLOAD_LINK"))),
    onClick: function onClick() {
      return downloadDocument(filestoreId ? filestoreId : null);
    }
  }) : null)));
};

var DocumentList = function DocumentList(_ref) {
  var match = _ref.match;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _match$params = match.params,
    category = _match$params.category,
    count = _match$params.count;
  var tenantIds = Digit.ULBService.getCitizenCurrentTenant();
  var _useState = React.useState(20),
    pageSize = _useState[0];
  var _useState2 = React.useState(0);
  var _useState3 = React.useState(),
    searchValue = _useState3[0],
    setSearchValue = _useState3[1];
  var debouncedSearchQuery = useDebounce(searchValue, 700);
  var _Digit$Hooks$engageme = Digit.Hooks.engagement.useDocSearch({
      name: debouncedSearchQuery,
      category: category,
      tenantIds: tenantIds,
      limit: pageSize
    }, {
      select: function select(data) {
        var _data$Documents;
        return data === null || data === void 0 ? void 0 : (_data$Documents = data.Documents) === null || _data$Documents === void 0 ? void 0 : _data$Documents.map(function (_ref2) {
          var uuid = _ref2.uuid,
            name = _ref2.name,
            category = _ref2.category,
            documentLink = _ref2.documentLink,
            description = _ref2.description,
            auditDetails = _ref2.auditDetails,
            fileSize = _ref2.fileSize,
            filestoreId = _ref2.filestoreId;
          return {
            docId: uuid,
            name: name,
            category: category,
            description: description,
            documentLink: documentLink,
            createdTime: auditDetails === null || auditDetails === void 0 ? void 0 : auditDetails.createdTime,
            fileSize: fileSize,
            filestoreId: filestoreId
          };
        });
      }
    }),
    filteredDocs = _Digit$Hooks$engageme.data,
    isLoadingDocs = _Digit$Hooks$engageme.isLoading;
  var handleKeyPress = function handleKeyPress(event) {
    try {
      if (event.key === "Enter") {
        if (searchValue.length) {
          setSearchValue("");
        }
      }
      return Promise.resolve();
    } catch (e) {
      return Promise.reject(e);
    }
  };
  var handleSearch = function handleSearch(event) {
    try {
      if (searchValue.length) {
        setSearchValue("");
      }
      return Promise.resolve();
    } catch (e) {
      return Promise.reject(e);
    }
  };
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.AppContainer, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("" + category) + " (" + (count ? count : "-") + ")"), /*#__PURE__*/React__default.createElement("div", {
    className: "documentContainerPadding"
  }, /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(Searchbar, {
    searchValue: searchValue,
    handleKeyPress: handleKeyPress,
    handleSearch: handleSearch,
    onChange: setSearchValue,
    t: t
  })), isLoadingDocs ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null) : filteredDocs && filteredDocs.length ? renderDocsList(filteredDocs, t) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardCaption, null, t("COMMON_INBOX_NO_DATA")))));
};
var renderDocsList = function renderDocsList(documents, t) {
  return documents.map(function (_ref3, index) {
    var name = _ref3.name,
      createdTime = _ref3.createdTime,
      description = _ref3.description,
      documentLink = _ref3.documentLink,
      fileSize = _ref3.fileSize,
      filestoreId = _ref3.filestoreId;
    return /*#__PURE__*/React__default.createElement(DocumentCard, {
      key: index,
      documentTitle: name,
      documentSize: fileSize,
      lastModifiedData: createdTime,
      description: description,
      documentLink: documentLink,
      filestoreId: filestoreId,
      t: t
    });
  });
};

var Accordion = function Accordion(_ref) {
  var t = _ref.t,
    title = _ref.title,
    count = _ref.count,
    _onClick = _ref.onClick,
    children = _ref.children;
  var _React$useState = React__default.useState(false),
    isOpen = _React$useState[0],
    setOpen = _React$useState[1];
  return /*#__PURE__*/React__default.createElement("div", {
    className: "accordion-wrapper",
    onClick: function onClick() {
      return _onClick(title, count);
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "accordion-title " + (isOpen ? "open" : ""),
    onClick: function onClick() {
      return setOpen(!isOpen);
    }
  }, t(title) + " (" + count + ")", /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrevIcon, null)), /*#__PURE__*/React__default.createElement("div", {
    className: "accordion-item " + (!isOpen ? "collapsed" : "")
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "accordion-content"
  }, children)));
};
var DocumentCategories = function DocumentCategories(_ref2) {
  var _Digit$UserService, _Digit$UserService$ge, _data$documentList, _data$statusCount, _data$statusCount2;
  var t = _ref2.t;
  var history = reactRouterDom.useHistory();
  var _useState = React.useState(""),
    searchValue = _useState[0],
    setSearchValue = _useState[1];
  var tenantIds = Digit.ULBService.getCitizenCurrentTenant();
  var debouncedSearchQuery = useDebounce(searchValue, 700);
  var _Digit$Hooks$engageme = Digit.Hooks.engagement.useDocSearch({
      name: debouncedSearchQuery,
      tenantIds: tenantIds
    }, {
      select: function select(data) {
        var _data$Documents;
        var mappedDocuments = data === null || data === void 0 ? void 0 : (_data$Documents = data.Documents) === null || _data$Documents === void 0 ? void 0 : _data$Documents.map(function (_ref3) {
          var uuid = _ref3.uuid,
            name = _ref3.name,
            category = _ref3.category,
            documentLink = _ref3.documentLink,
            description = _ref3.description,
            auditDetails = _ref3.auditDetails,
            fileSize = _ref3.fileSize,
            filestoreId = _ref3.filestoreId;
          return {
            docId: uuid,
            name: name,
            category: category,
            description: description,
            documentLink: documentLink,
            createdTime: auditDetails === null || auditDetails === void 0 ? void 0 : auditDetails.createdTime,
            fileSize: fileSize,
            filestoreId: filestoreId
          };
        });
        return {
          documentList: mappedDocuments,
          statusCount: data === null || data === void 0 ? void 0 : data.statusCount
        };
      }
    }),
    data = _Digit$Hooks$engageme.data,
    isLoading = _Digit$Hooks$engageme.isLoading;
  if (!((_Digit$UserService = Digit.UserService) !== null && _Digit$UserService !== void 0 && (_Digit$UserService$ge = _Digit$UserService.getUser()) !== null && _Digit$UserService$ge !== void 0 && _Digit$UserService$ge.access_token)) {
    return /*#__PURE__*/React__default.createElement(Redirect, {
      to: {
        pathname: "/digit-ui/citizen/login",
        state: {
          from: location.pathname + location.search
        }
      }
    });
  }
  var showDocuments = function showDocuments(category, count) {
    history.push("documents/list/" + category + "/" + count);
  };
  var handleKeyPress = function handleKeyPress(event) {
    if (event.key === "Enter") {
      setSearchValue("");
    }
  };
  var handleSearch = function handleSearch(event) {
    setSearchValue("");
  };

  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.AppContainer, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("DOCUMENTS_DOCUMENT_HEADER")), /*#__PURE__*/React__default.createElement("div", {
    className: "Docs_CardWrapper"
  }, /*#__PURE__*/React__default.createElement(Searchbar, {
    searchValue: searchValue,
    handleKeyPress: handleKeyPress,
    handleSearch: handleSearch,
    onChange: setSearchValue,
    t: t
  }), /*#__PURE__*/React__default.createElement("hr", {
    style: {
      color: "#ccc"
    }
  }), isLoading ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null) : /*#__PURE__*/React__default.createElement("div", {
    className: "wrapper"
  }, searchValue.length && data !== null && data !== void 0 && (_data$documentList = data.documentList) !== null && _data$documentList !== void 0 && _data$documentList.length ? renderDocsList(data.documentList, t) : data !== null && data !== void 0 && data.statusCount && data !== null && data !== void 0 && (_data$statusCount = data.statusCount) !== null && _data$statusCount !== void 0 && _data$statusCount.length ? data === null || data === void 0 ? void 0 : (_data$statusCount2 = data.statusCount) === null || _data$statusCount2 === void 0 ? void 0 : _data$statusCount2.map(function (_ref4, index) {
    var category = _ref4.category,
      count = _ref4.count;
    return /*#__PURE__*/React__default.createElement(Accordion, {
      t: t,
      title: category,
      count: count,
      key: index,
      onClick: showDocuments
    });
  }) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardCaption, null, t("COMMON_INBOX_NO_DATA"))))));
};

var ViewDocument = function ViewDocument(_ref) {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _Digit$Hooks$useQuery = Digit.Hooks.useQueryParams(),
    uuid = _Digit$Hooks$useQuery.applicationNumber,
    tenantId = _Digit$Hooks$useQuery.tenantId;
  var _Digit$Hooks$engageme = Digit.Hooks.engagement.useDocSearch({
      uuid: uuid,
      tenantId: tenantId
    }, {
      select: function select(data) {
        var _data$Documents;
        var mappedDocuments = data === null || data === void 0 ? void 0 : (_data$Documents = data.Documents) === null || _data$Documents === void 0 ? void 0 : _data$Documents.map(function (_ref2) {
          var uuid = _ref2.uuid,
            name = _ref2.name,
            category = _ref2.category,
            documentLink = _ref2.documentLink,
            description = _ref2.description,
            auditDetails = _ref2.auditDetails,
            fileSize = _ref2.fileSize,
            filestoreId = _ref2.filestoreId;
          return {
            docId: uuid,
            name: name,
            category: category,
            description: description,
            documentLink: documentLink,
            createdTime: auditDetails === null || auditDetails === void 0 ? void 0 : auditDetails.createdTime,
            fileSize: fileSize,
            filestoreId: filestoreId
          };
        });
        return {
          documentList: mappedDocuments,
          statusCount: data === null || data === void 0 ? void 0 : data.statusCount
        };
      }
    }),
    data = _Digit$Hooks$engageme.data,
    isLoading = _Digit$Hooks$engageme.isLoading;

  var _ref3 = data || {},
    _ref3$documentList = _ref3.documentList,
    documentList = _ref3$documentList === void 0 ? [] : _ref3$documentList;
  var _ref4 = (documentList === null || documentList === void 0 ? void 0 : documentList[0]) || {},
    _ref4$name = _ref4.name,
    name = _ref4$name === void 0 ? false : _ref4$name,
    createdTime = _ref4.createdTime,
    description = _ref4.description,
    documentLink = _ref4.documentLink,
    fileSize = _ref4.fileSize,
    filestoreId = _ref4.filestoreId;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.AppContainer, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, "" + t("COMMON_VIEW_DOC")), isLoading && /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null), name && /*#__PURE__*/React__default.createElement(DocumentCard, {
    key: 1,
    documentTitle: name,
    documentSize: fileSize,
    lastModifiedData: createdTime,
    description: description,
    documentLink: documentLink,
    filestoreId: filestoreId,
    t: t
  }), !name && !isLoading && /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardCaption, null, t("COMMON_DOC_DATA_NOT_FOUND"))));
};

var getMessage = function getMessage(mutation) {
  var _mutation$data, _mutation$data$Survey, _mutation$data$Survey2;
  if (mutation.isSuccess) return (_mutation$data = mutation.data) === null || _mutation$data === void 0 ? void 0 : (_mutation$data$Survey = _mutation$data.Surveys) === null || _mutation$data$Survey === void 0 ? void 0 : (_mutation$data$Survey2 = _mutation$data$Survey[0]) === null || _mutation$data$Survey2 === void 0 ? void 0 : _mutation$data$Survey2.uuid;
  return "";
};
var BannerPicker$2 = function BannerPicker(props) {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Banner, {
    message: props.mutation.isSuccess ? t("SURVEY_RESPONSE_SUBMITED") : t("SURVEY_RESPONSE_FAILED"),
    applicationNumber: getMessage(props.mutation),
    info: props.mutation.isSuccess ? props.surveyTitle : ""
    ,

    successful: props.mutation.isSuccess,
    whichSvg: "tick"
  });
};

var Acknowledgement = function Acknowledgement(props) {
  var _state$AnswerEntity;
  var queryClient = reactQuery.useQueryClient();
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var mutation = Digit.Hooks.survey.useSubmitResponse();
  var state = props.location.state;
  var surveyTitlev1 = state === null || state === void 0 ? void 0 : (_state$AnswerEntity = state.AnswerEntity) === null || _state$AnswerEntity === void 0 ? void 0 : _state$AnswerEntity.surveyTitle;
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      queryClient.clear();
    };
    mutation.mutate(state, {
      onSuccess: onSuccess
    });
  }, []);
  if (mutation.isLoading && !mutation.isIdle) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker$2, {
    t: t,
    mutation: mutation,
    surveyTitle: surveyTitlev1
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardText, null, mutation.isSuccess ?
  t("SURVEY_FORM_RESPONSE_MESSAGE") : null), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
    to: "/digit-ui/citizen/engagement/surveys/list"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CORE_COMMON_GO_TO_HOME")
  }))));
};

var CitizenApp = function CitizenApp(_ref) {
  var path = _ref.path;
  var location = reactRouterDom.useLocation();
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var NotificationsOrWhatsNew = Digit.ComponentRegistryService.getComponent("NotificationsAndWhatsNew");
  var Events = Digit.ComponentRegistryService.getComponent("EventsListOnGround");
  var EventDetails = Digit.ComponentRegistryService.getComponent("EventDetails");
  var Documents = Digit.ComponentRegistryService.getComponent("DocumentList");
  var SurveyList = Digit.ComponentRegistryService.getComponent("SurveyList");
  var FillSurvey = Digit.ComponentRegistryService.getComponent('FillSurvey');
  var ShowSurvey = Digit.ComponentRegistryService.getComponent('ShowSurvey');
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.BackButton, null, t("CS_COMMON_BACK")), /*#__PURE__*/React__default.createElement(reactRouterDom.Switch, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
    path: path + "/notifications",
    component: function component() {
      return /*#__PURE__*/React__default.createElement(NotificationsOrWhatsNew, {
        variant: "notifications",
        parentRoute: path
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/whats-new",
    component: function component() {
      return /*#__PURE__*/React__default.createElement(NotificationsOrWhatsNew, {
        variant: "whats-new",
        parentRoute: path
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    exact: true,
    path: path + "/events",
    component: function component() {
      return /*#__PURE__*/React__default.createElement(Events, {
        variant: "events",
        parentRoute: path
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/events/details/:id",
    component: function component() {
      return /*#__PURE__*/React__default.createElement(EventDetails, {
        parentRoute: path
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/docs",
    component: function component() {
      return /*#__PURE__*/React__default.createElement(DocumentCategories, {
        t: t,
        path: path
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/documents/viewDocument",
    component: function component() {
      return /*#__PURE__*/React__default.createElement(ViewDocument, {
        t: t,
        path: path
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/documents/list/:category/:count",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(Documents, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/surveys/list",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(SurveyList, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/surveys/fill-survey",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(FillSurvey, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/surveys/submit-response",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(Acknowledgement, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/surveys/show-survey",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(ShowSurvey, props);
    }
  })));
};

var EventDetails$1 = function EventDetails() {
  var _Digit$UserService, _Digit$UserService$ge, _FilteredEventForThis, _FilteredEventForThis2, _FilteredEventForThis3, _FilteredEventForThis4, _FilteredEventForThis5;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var location = reactRouterDom.useLocation();
  var history = reactRouterDom.useHistory();
  var _useParams = reactRouterDom.useParams(),
    EventId = _useParams.id;
  var tenantId = Digit.ULBService.getCitizenCurrentTenant();
  var _Digit$Hooks$useEvent = Digit.Hooks.useEvents({
      tenantId: tenantId,
      variant: "events"
    }),
    EventsData = _Digit$Hooks$useEvent.data,
    EventsDataLoading = _Digit$Hooks$useEvent.isLoading;
  if (!((_Digit$UserService = Digit.UserService) !== null && _Digit$UserService !== void 0 && (_Digit$UserService$ge = _Digit$UserService.getUser()) !== null && _Digit$UserService$ge !== void 0 && _Digit$UserService$ge.access_token)) {
    localStorage.clear();
    sessionStorage.clear();
    return /*#__PURE__*/React__default.createElement(reactRouterDom.Redirect, {
      to: {
        pathname: "/digit-ui/citizen/login",
        state: {
          from: location.pathname + location.search
        }
      }
    });
  }
  function onGroundEventCardPropsForEventDetails(DataParamsInEvent) {
    var eventCategory = DataParamsInEvent.eventCategory,
      name = DataParamsInEvent.name,
      onGroundEventDate = DataParamsInEvent.onGroundEventDate,
      onGroundEventMonth = DataParamsInEvent.onGroundEventMonth,
      onGroundEventTimeRange = DataParamsInEvent.onGroundEventTimeRange;
    return {
      eventCategory: t(eventCategory),
      showEventCatergory: true,
      name: name,
      onGroundEventDate: onGroundEventDate,
      onGroundEventMonth: onGroundEventMonth,
      onGroundEventTimeRange: onGroundEventTimeRange
    };
  }
  var FilteredEventForThisPage = React.useMemo(function () {
    return !EventsDataLoading ? EventsData === null || EventsData === void 0 ? void 0 : EventsData.filter(function (i) {
      return i.id === EventId;
    })[0] : null;
  }, [EventsDataLoading, EventsData]);
  if (EventsDataLoading) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  return /*#__PURE__*/React__default.createElement("div", {
    className: "CitizenEngagementNotificationWrapper"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("ES_TITLE_APPLICATION_DETAILS")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.OnGroundEventCard, onGroundEventCardPropsForEventDetails(FilteredEventForThisPage)), /*#__PURE__*/React__default.createElement("div", {
    className: "OnGroundEventDetailsCard"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "cardCaptionBodyS"
  }, FilteredEventForThisPage === null || FilteredEventForThisPage === void 0 ? void 0 : FilteredEventForThisPage.description), /*#__PURE__*/React__default.createElement("div", {
    className: "eventAddressAndDirection"
  }, /*#__PURE__*/React__default.createElement("span", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.MapMarker, null), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("p", null, FilteredEventForThisPage === null || FilteredEventForThisPage === void 0 ? void 0 : (_FilteredEventForThis = FilteredEventForThisPage.eventDetails) === null || _FilteredEventForThis === void 0 ? void 0 : _FilteredEventForThis.address), FilteredEventForThisPage !== null && FilteredEventForThisPage !== void 0 && (_FilteredEventForThis2 = FilteredEventForThisPage.eventDetails) !== null && _FilteredEventForThis2 !== void 0 && _FilteredEventForThis2.latitude && FilteredEventForThisPage !== null && FilteredEventForThisPage !== void 0 && (_FilteredEventForThis3 = FilteredEventForThisPage.eventDetails) !== null && _FilteredEventForThis3 !== void 0 && _FilteredEventForThis3.longitude ? /*#__PURE__*/React__default.createElement("a", {
    className: "direction",
    target: "_blank",
    href: "https://www.google.com/maps/search/?api=1&query=" + (FilteredEventForThisPage === null || FilteredEventForThisPage === void 0 ? void 0 : (_FilteredEventForThis4 = FilteredEventForThisPage.eventDetails) === null || _FilteredEventForThis4 === void 0 ? void 0 : _FilteredEventForThis4.latitude) + "%2C" + (FilteredEventForThisPage === null || FilteredEventForThisPage === void 0 ? void 0 : (_FilteredEventForThis5 = FilteredEventForThisPage.eventDetails) === null || _FilteredEventForThis5 === void 0 ? void 0 : _FilteredEventForThis5.longitude)
  }, t("CS_COMMON_GET_DIRECTIONS")) : null))), /*#__PURE__*/React__default.createElement("div", {
    className: "eventTimeRange"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Clock, null), /*#__PURE__*/React__default.createElement("p", null, FilteredEventForThisPage === null || FilteredEventForThisPage === void 0 ? void 0 : FilteredEventForThisPage.onGroundEventTimeRange))));
};

var documentsFormConfig = [{
  body: [{
    type: "form",
    key: "ULB",
    component: "EngagementDocSelectULB",
    withoutLabel: true
  }, {
    type: "form",
    key: "documentName",
    component: "EnagementDocName",
    withoutLabel: true
  }, {
    type: "form",
    key: "docCategory",
    component: "EngagementDocCategory",
    withoutLabel: true
  }, {
    type: "form",
    key: "description",
    component: "EngagementDocDescription",
    withoutLabel: true
  }, {
    type: "form",
    key: "document",
    component: "EngagementDocUploadDocument",
    withoutLabel: true,
    inputs: [{
      name: ""
    }]
  }]
}];

var Documents = function Documents() {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _useState = React.useState(false),
    canSubmit = _useState[0],
    setSubmitValve = _useState[1];
  var onFormValueChange = function onFormValueChange(setValue, formData, formState) {
    var _formData$ULB;
    if (formData !== null && formData !== void 0 && formData.documentName && formData !== null && formData !== void 0 && formData.docCategory && (formData !== null && formData !== void 0 && formData.document.filestoreId || formData !== null && formData !== void 0 && formData.document.documentLink) && formData !== null && formData !== void 0 && (_formData$ULB = formData.ULB) !== null && _formData$ULB !== void 0 && _formData$ULB.length) {
      setSubmitValve(true);
    } else {
      setSubmitValve(false);
    }
  };
  var onSubmit = function onSubmit(data) {
    var _data$docCategory, _data$document, _data$document2, _data$document2$files, _data$document3, _data$document3$files, _data$document4, _data$document4$files;
    var DocumentEntity = {
      name: data.documentName,
      description: data !== null && data !== void 0 && data.description.length ? data.description : "",
      category: (_data$docCategory = data.docCategory) === null || _data$docCategory === void 0 ? void 0 : _data$docCategory.name,
      documentLink: (_data$document = data.document) === null || _data$document === void 0 ? void 0 : _data$document.documentLink,
      filestoreId: (_data$document2 = data.document) === null || _data$document2 === void 0 ? void 0 : (_data$document2$files = _data$document2.filestoreId) === null || _data$document2$files === void 0 ? void 0 : _data$document2$files.fileStoreId,
      fileSize: (_data$document3 = data.document) === null || _data$document3 === void 0 ? void 0 : (_data$document3$files = _data$document3.filestoreId) === null || _data$document3$files === void 0 ? void 0 : _data$document3$files.fileSize,
      fileType: (_data$document4 = data.document) === null || _data$document4 === void 0 ? void 0 : (_data$document4$files = _data$document4.filestoreId) === null || _data$document4$files === void 0 ? void 0 : _data$document4$files.fileType,
      tenantIds: data.ULB.map(function (e) {
        return e.code;
      })
    };
    history.push("/digit-ui/employee/engagement/documents/response", {
      DocumentEntity: DocumentEntity
    });
  };
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("ES_ENGAGEMENT_DOCUMENTS")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer
  , {
    label: t("ES_COMMON_APPLICATION_SUBMIT"),
    config: documentsFormConfig,
    onSubmit: onSubmit,
    fieldStyle: {},
    onFormValueChange: onFormValueChange,
    isDisabled: !canSubmit
  }));
};

var documentsFormConfig$1 = [{
  body: [{
    type: "form",
    key: "ULB",
    component: "EngagementULBDropdown",
    withoutLabel: true
  }, {
    type: "form",
    key: "documentName",
    component: "EnagementDocName",
    withoutLabel: true
  }, {
    type: "form",
    key: "docCategory",
    component: "EngagementDocCategory",
    withoutLabel: true
  }, {
    type: "form",
    key: "description",
    component: "EngagementDocDescription",
    withoutLabel: true
  }, {
    type: "form",
    key: "document",
    component: "EngagementDocUploadDocument",
    withoutLabel: true,
    inputs: [{
      name: ""
    }]
  }]
}];

var Documents$1 = function Documents(props) {
  var _props$location$state6;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _useState = React.useState(false),
    canSubmit = _useState[0],
    setSubmitValve = _useState[1];
  var onFormValueChange = React.useCallback(function (setValue, updatedFormData, formState) {
    if (updatedFormData !== null && updatedFormData !== void 0 && updatedFormData.documentName && updatedFormData !== null && updatedFormData !== void 0 && updatedFormData.docCategory && (updatedFormData !== null && updatedFormData !== void 0 && updatedFormData.document.filestoreId || updatedFormData !== null && updatedFormData !== void 0 && updatedFormData.document.documentLink) && updatedFormData !== null && updatedFormData !== void 0 && updatedFormData.ULB && Object.keys(updatedFormData === null || updatedFormData === void 0 ? void 0 : updatedFormData.ULB).length) {
      setSubmitValve(true);
    } else {
      setSubmitValve(false);
    }
  }, []);
  var update = function update(data) {
    var _data$document, _data$document$filest, _data$document2, _data$document2$files, _props$location$state, _props$location$state2, _data$document3, _data$document3$files, _data$document4, _data$document4$files, _props$location$state3, _props$location$state4, _props$location, _props$location$state5, _data$docCategory, _data$document5, _data$document5$files, _data$document6, _data$ULB;
    var fileSize = (_data$document = data.document) !== null && _data$document !== void 0 && (_data$document$filest = _data$document.filestoreId) !== null && _data$document$filest !== void 0 && _data$document$filest.fileSize ? (_data$document2 = data.document) === null || _data$document2 === void 0 ? void 0 : (_data$document2$files = _data$document2.filestoreId) === null || _data$document2$files === void 0 ? void 0 : _data$document2$files.fileSize : (_props$location$state = props.location.state) === null || _props$location$state === void 0 ? void 0 : (_props$location$state2 = _props$location$state.DocumentEntity) === null || _props$location$state2 === void 0 ? void 0 : _props$location$state2.fileSize;
    var fileType = (_data$document3 = data.document) !== null && _data$document3 !== void 0 && (_data$document3$files = _data$document3.filestoreId) !== null && _data$document3$files !== void 0 && _data$document3$files.fileType ? (_data$document4 = data.document) === null || _data$document4 === void 0 ? void 0 : (_data$document4$files = _data$document4.filestoreId) === null || _data$document4$files === void 0 ? void 0 : _data$document4$files.fileType : (_props$location$state3 = props.location.state) === null || _props$location$state3 === void 0 ? void 0 : (_props$location$state4 = _props$location$state3.DocumentEntity) === null || _props$location$state4 === void 0 ? void 0 : _props$location$state4.fileType;
    var DocumentEntity = _extends({}, (_props$location = props.location) === null || _props$location === void 0 ? void 0 : (_props$location$state5 = _props$location.state) === null || _props$location$state5 === void 0 ? void 0 : _props$location$state5.DocumentEntity, {
      name: data.documentName,
      description: data !== null && data !== void 0 && data.description.length ? data.description : "",
      category: (_data$docCategory = data.docCategory) === null || _data$docCategory === void 0 ? void 0 : _data$docCategory.name,
      filestoreId: (_data$document5 = data.document) === null || _data$document5 === void 0 ? void 0 : (_data$document5$files = _data$document5.filestoreId) === null || _data$document5$files === void 0 ? void 0 : _data$document5$files.fileStoreId,
      fileSize: fileSize,
      fileType: fileType,
      documentLink: (_data$document6 = data.document) === null || _data$document6 === void 0 ? void 0 : _data$document6.documentLink,
      tenantId: data === null || data === void 0 ? void 0 : (_data$ULB = data.ULB) === null || _data$ULB === void 0 ? void 0 : _data$ULB.code
    });
    delete DocumentEntity.ULB;
    delete DocumentEntity.docCategory;
    delete DocumentEntity.documentName;
    history.push("/digit-ui/employee/engagement/documents/update-response", {
      DocumentEntity: DocumentEntity
    });
  };
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("ES_ENGAGEMENT_EDIT_DOC")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.FormComposer, {
    label: t("ES_COMMON_UPDATE"),
    config: documentsFormConfig$1,
    onSubmit: function onSubmit(data) {
      update(data);
    },
    fieldStyle: {},
    onFormValueChange: onFormValueChange,
    defaultValues: (_props$location$state6 = props.location.state) === null || _props$location$state6 === void 0 ? void 0 : _props$location$state6.DocumentEntity,
    isDisabled: !canSubmit
  }));
};

var getMessage$1 = function getMessage(mutation) {
  var _mutation$data, _mutation$data$Docume, _mutation$data$Docume2;
  if (mutation.isSuccess) return (_mutation$data = mutation.data) === null || _mutation$data === void 0 ? void 0 : (_mutation$data$Docume = _mutation$data.Documents) === null || _mutation$data$Docume === void 0 ? void 0 : (_mutation$data$Docume2 = _mutation$data$Docume[0]) === null || _mutation$data$Docume2 === void 0 ? void 0 : _mutation$data$Docume2.uuid;
  return "";
};
var BannerPicker$3 = function BannerPicker(props) {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Banner, {
    message: props.isSuccess ? t("ENGAGEMENT_DOC_CREATED") : t("ENGAGEMENT_DOC_FAILURE"),
    applicationNumber: getMessage$1(props.mutation),
    info: props.isSuccess ? t("ENGAGEMENT_DOCUMENT_ID") : "",
    successful: props.isSuccess
  });
};
var Response$2 = function Response(props) {
  var queryClient = reactQuery.useQueryClient();
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var mutation = Digit.Hooks.engagement.useDocCreate();
  var state = props.location.state;
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      queryClient.clear();
    };
    mutation.mutate(state, {
      onSuccess: onSuccess
    });
  }, []);
  if (mutation.isLoading || mutation.isIdle) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker$3, {
    t: t,
    data: mutation.data,
    mutation: mutation,
    isSuccess: mutation.isSuccess,
    isLoading: mutation.isIdle || mutation.isLoading
  })), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
    to: "/digit-ui/employee"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CORE_COMMON_GO_TO_HOME")
  }))));
};

var getMessage$2 = function getMessage(mutation) {
  var _mutation$data, _mutation$data$Docume, _mutation$data$Docume2;
  if (mutation.isSuccess) return (_mutation$data = mutation.data) === null || _mutation$data === void 0 ? void 0 : (_mutation$data$Docume = _mutation$data.Documents) === null || _mutation$data$Docume === void 0 ? void 0 : (_mutation$data$Docume2 = _mutation$data$Docume[0]) === null || _mutation$data$Docume2 === void 0 ? void 0 : _mutation$data$Docume2.uuid;
  return "";
};
var BannerPicker$4 = function BannerPicker(props) {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Banner, {
    message: props.isSuccess ? t("ENGAGEMENT_DOC_UPDATED") : t("ENGAGEMENT_DOC_UPDATE_FAILURE"),
    applicationNumber: getMessage$2(props.mutation),
    info: props.isSuccess ? t("ENGAGEMENT_DOCUMENT_ID") : "",
    successful: props.isSuccess
  });
};
var Response$3 = function Response(props) {
  var queryClient = reactQuery.useQueryClient();
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var mutation = Digit.Hooks.engagement.useDocUpdate();
  var state = props.location.state;
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      queryClient.clear();
    };
    mutation.mutate(state, {
      onSuccess: onSuccess
    });
  }, []);
  if (mutation.isLoading || mutation.isIdle) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker$4, {
    t: t,
    data: mutation.data,
    mutation: mutation,
    isSuccess: mutation.isSuccess,
    isLoading: mutation.isIdle || mutation.isLoading
  })), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
    to: "/digit-ui/employee"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CORE_COMMON_GO_TO_HOME")
  }))));
};

var BannerPicker$5 = function BannerPicker(props) {
  var _props$mutation;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Banner, {
    message: props.isSuccess ? t("ENGAGEMENT_DOC_DELETED") : t("ENGAGEMENT_DOC_DELETE_FAILURE"),
    applicationNumber: (_props$mutation = props.mutation) !== null && _props$mutation !== void 0 && _props$mutation.isSuccess ? props.uuid : '',
    info: props.isSuccess ? t("ENGAGEMENT_DOCUMENT_ID") : "",
    successful: props.isSuccess
  });
};
var Response$4 = function Response(props) {
  var _state$DocumentEntity;
  var queryClient = reactQuery.useQueryClient();
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var mutation = Digit.Hooks.engagement.useDocDelete();
  var state = props.location.state;
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      queryClient.clear();
    };
    mutation.mutate(state, {
      onSuccess: onSuccess
    });
  }, []);
  if (mutation.isLoading || mutation.isIdle) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker$5, {
    t: t,
    data: mutation.data,
    mutation: mutation,
    uuid: state === null || state === void 0 ? void 0 : (_state$DocumentEntity = state.DocumentEntity) === null || _state$DocumentEntity === void 0 ? void 0 : _state$DocumentEntity.uuid,
    isSuccess: mutation.isSuccess,
    isLoading: mutation.isIdle || mutation.isLoading
  })), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
    to: "/digit-ui/employee"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CORE_COMMON_GO_TO_HOME")
  }))));
};

var DocumentNotificationTable = function DocumentNotificationTable(_ref) {
  var t = _ref.t,
    data = _ref.data,
    columns = _ref.columns,
    globalSearch = _ref.globalSearch,
    onSearch = _ref.onSearch,
    getCellProps = _ref.getCellProps,
    pageSizeLimit = _ref.pageSizeLimit,
    totalRecords = _ref.totalRecords,
    currentPage = _ref.currentPage,
    onNextPage = _ref.onNextPage,
    onPrevPage = _ref.onPrevPage,
    onPageSizeChange = _ref.onPageSizeChange,
    onSort = _ref.onSort,
    sortParams = _ref.sortParams;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Table, {
    t: t,
    data: data,
    columns: columns,
    onSearch: onSearch,
    globalSearch: globalSearch,
    manualGlobalFilter: true,
    manualPagination: true,
    currentPage: currentPage,
    onNextPage: onNextPage,
    onPrevPage: onPrevPage,
    pageSizeLimit: pageSizeLimit,
    onPageSizeChange: onPageSizeChange,
    getCellProps: getCellProps,
    totalRecords: totalRecords,
    onSort: onSort,
    sortParams: sortParams
  });
};

var Search$2 = function Search(_ref) {
  var onSearch = _ref.onSearch,
    searchParams = _ref.searchParams,
    searchFields = _ref.searchFields,
    type = _ref.type,
    onClose = _ref.onClose,
    isInboxPage = _ref.isInboxPage,
    t = _ref.t;
  var _useForm = reactHookForm.useForm({
      defaultValues: searchParams
    }),
    handleSubmit = _useForm.handleSubmit,
    formState = _useForm.formState,
    reset = _useForm.reset,
    control = _useForm.control;
  var mobileView = innerWidth <= 640;
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  }).sort(alphabeticalSortFunctionForTenantsBasedOnName);
  var selectedTenat = React.useMemo(function () {
    var filtered = ulbs.filter(function (item) {
      return item.code === tenantId;
    });
    return filtered;
  }, [tenantId, ulbs]);
  var getFields = function getFields(input) {
    switch (input.type) {
      case "ulb":
        return /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          rules: {
            required: true
          },
          defaultValue: selectedTenat === null || selectedTenat === void 0 ? void 0 : selectedTenat[0],
          render: function render(props) {
            return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
              option: userUlbs,
              optionKey: "i18nKey",
              selected: props.value,
              select: props.onChange,
              t: t
            });
          },
          name: input.name,
          control: control
        });
      default:
        return /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          render: function render(props) {
            return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
              onChange: props.onChange,
              value: props.value
            });
          },
          name: input.name,
          control: control,
          defaultValue: null
        });
    }
  };
  var onSubmitInput = function onSubmitInput(data) {

    onSearch(data);
    if (type === "mobile") {
      onClose();
    }
  };
  var clearSearch = function clearSearch() {
    reset({
      name: '',
      ulbs: {
        code: tenantId.code
      },
      postedBy: ""
    });
    onSearch({
      name: '',
      ulbs: {
        code: tenantId.code
      },
      postedBy: ""
    });
  };
  var clearAll = function clearAll(mobileView) {
    var mobileViewStyles = mobileView ? {
      margin: 0
    } : {};
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.LinkLabel, {
      style: _extends({
        display: "inline"
      }, mobileViewStyles),
      onClick: clearSearch
    }, t("ES_COMMON_CLEAR_SEARCH"));
  };
  return /*#__PURE__*/React__default.createElement("form", {
    onSubmit: handleSubmit(onSubmitInput)
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "search-container",
    style: {
      width: "auto",
      marginLeft: isInboxPage ? "24px" : "revert"
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "search-complaint-container"
  }, (type === "mobile" || mobileView) && /*#__PURE__*/React__default.createElement("div", {
    className: "complaint-header"
  }, /*#__PURE__*/React__default.createElement("h2", null, t("ES_COMMON_SEARCH_BY")), /*#__PURE__*/React__default.createElement("span", {
    onClick: onClose
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null))), /*#__PURE__*/React__default.createElement("div", {
    className: "complaint-input-container for-pt " + (!isInboxPage ? "for-search" : ""),
    style: {
      width: "100%"
    }
  }, searchFields === null || searchFields === void 0 ? void 0 : searchFields.map(function (input, index) {
    var _formState$dirtyField, _formState$errors, _formState$errors$inp;
    return /*#__PURE__*/React__default.createElement("div", {
      key: input.name,
      className: "input-fields"
    }, /*#__PURE__*/React__default.createElement("span", {
      className: "mobile-input"
    }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Label, null, t(input.label) + (" " + (input.isMendatory ? "*" : ""))), getFields(input)), formState !== null && formState !== void 0 && (_formState$dirtyField = formState.dirtyFields) !== null && _formState$dirtyField !== void 0 && _formState$dirtyField[input.name] ? /*#__PURE__*/React__default.createElement("span", {
      style: {
        fontWeight: "700",
        color: "rgba(212, 53, 28)",
        paddingLeft: "8px",
        marginTop: "-20px",
        fontSize: "12px"
      },
      className: "inbox-search-form-error"
    }, formState === null || formState === void 0 ? void 0 : (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : (_formState$errors$inp = _formState$errors[input.name]) === null || _formState$errors$inp === void 0 ? void 0 : _formState$errors$inp.message) : null);
  }), type === "desktop" && !mobileView && /*#__PURE__*/React__default.createElement("div", {
    style: {
      maxWidth: "unset",
      marginLeft: "unset"
    },
    className: "search-submit-wrapper"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    className: "submit-bar-search",
    label: t("ES_COMMON_SEARCH")
    ,
    submit: true
  })), type === "desktop" && !mobileView && /*#__PURE__*/React__default.createElement("div", {
    className: "document-clear-all"
  }, clearAll())))), (type === "mobile" || mobileView) && /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, {
    className: "clear-search-container"
  }, /*#__PURE__*/React__default.createElement("button", {
    className: "clear-search",
    style: {
      flex: 1
    }
  }, clearAll(mobileView)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    disabled: !!Object.keys(formState.errors).length,
    label: t("ES_COMMON_SEARCH"),
    style: {
      flex: 1
    },
    submit: true
  })));
};

var Filter$2 = function Filter(_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? "desktop" : _ref$type,
    onClose = _ref.onClose,
    onFilterChange = _ref.onFilterChange,
    searchParams = _ref.searchParams;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useState = React.useState(function () {
      return _extends({}, searchParams);
    }),
    localSearchParams = _useState[0],
    setLocalSearchParams = _useState[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var stateId = tenantId === null || tenantId === void 0 ? void 0 : tenantId.split('.')[0];
  var currrentUlb = Digit.ULBService.getCurrentUlb();
  var _Digit$Hooks$engageme = Digit.Hooks.engagement.useMDMS(stateId, "DocumentUploader", ["UlbLevelCategories"], {
      select: function select(d) {
        var _d$DocumentUploader, _d$DocumentUploader$U, _d$DocumentUploader$U2;
        var data = d === null || d === void 0 ? void 0 : (_d$DocumentUploader = d.DocumentUploader) === null || _d$DocumentUploader === void 0 ? void 0 : (_d$DocumentUploader$U = _d$DocumentUploader.UlbLevelCategories) === null || _d$DocumentUploader$U === void 0 ? void 0 : (_d$DocumentUploader$U2 = _d$DocumentUploader$U.filter) === null || _d$DocumentUploader$U2 === void 0 ? void 0 : _d$DocumentUploader$U2.call(_d$DocumentUploader$U, function (e) {
          return e.ulb === currrentUlb.code;
        });
        return data[0].categoryList.map(function (category) {
          return {
            category: category
          };
        });
      }
    }),
    categoryData = _Digit$Hooks$engageme.data,
    isLoading = _Digit$Hooks$engageme.isLoading;
  var clearAll = function clearAll() {
    setLocalSearchParams({
      category: null,
      name: null,
      postedBy: null
    });
    onFilterChange({
      category: null,
      name: null,
      postedBy: null
    });
    onClose === null || onClose === void 0 ? void 0 : onClose();
  };
  var applyLocalFilters = function applyLocalFilters() {
    onFilterChange(localSearchParams);
    onClose === null || onClose === void 0 ? void 0 : onClose();
  };
  var handleChange = function handleChange(data) {
    setLocalSearchParams(_extends({}, localSearchParams, data));
  };
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "filter"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filter-card"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "heading"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filter-label"
  }, t("ES_COMMON_FILTER_BY"), ":"), /*#__PURE__*/React__default.createElement("div", {
    className: "clearAll",
    onClick: clearAll
  }, t("ES_COMMON_CLEAR_ALL")), type === "desktop" && /*#__PURE__*/React__default.createElement("span", {
    className: "clear-search",
    onClick: clearAll
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.RefreshIcon, null)), type === "mobile" && /*#__PURE__*/React__default.createElement("span", {
    onClick: onClose
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null))), /*#__PURE__*/React__default.createElement("div", {
    className: "filter-label"
  }, "" + t('DOCUMENTS_CATEGORY_CARD_LABEL')), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
    option: categoryData,
    optionKey: "category",
    selected: localSearchParams,
    select: function select(value) {
      handleChange(value);
    },
    t: t
  }), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    style: {
      width: '100%'
    },
    onSubmit: function onSubmit() {
      return applyLocalFilters();
    },
    label: t("ES_COMMON_APPLY")
  }))));
};

var getDocumentDetailsPath = function getDocumentDetailsPath(document) {
  return {
    pathname: "inbox/details/" + document.name,
    state: {
      details: document
    }
  };
};
var GetCell$2 = function GetCell(value) {
  return /*#__PURE__*/React__default.createElement("span", {
    className: "cell-text styled-cell"
  }, value);
};
var getDocumentDetails = function getDocumentDetails(value, link, t) {
  if (value === void 0) {
    value = "";
  }
  return /*#__PURE__*/React__default.createElement("span", {
    className: "document-table-docs-columns"
  }, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
    className: "link",
    to: link
  }, value.length ? value : t('CE_DOCUMENT_TITLE')));
};
var getDocumentCell = function getDocumentCell(name, link, docLink, t) {
  if (name === void 0) {
    name = "mSeva";
  }
  return /*#__PURE__*/React__default.createElement("span", {
    className: "document-table-docs-columns"
  }, link !== null && link !== void 0 && link.length ? /*#__PURE__*/React__default.createElement("span", {
    className: "link",
    onClick: function onClick() {
      return openUploadedDocument(link, name);
    }
  }, " ", t('CE_DOCUMENT_VIEW_LINK'), " ") : null, docLink.length ? /*#__PURE__*/React__default.createElement("span", {
    className: "link",
    onClick: function onClick() {
      return openDocumentLink(docLink, name);
    }
  }, " ", t('CE_DOCUMENT_OPEN_LINK'), " ") : null);
};
var DocumentDesktopInbox = function DocumentDesktopInbox(_ref) {
  var isLoading = _ref.isLoading,
    data = _ref.data,
    t = _ref.t,
    onSearch = _ref.onSearch,
    title = _ref.title,
    iconName = _ref.iconName,
    links = _ref.links,
    onSort = _ref.onSort,
    sortParams = _ref.sortParams,
    globalSearch = _ref.globalSearch,
    searchFields = _ref.searchFields,
    searchParams = _ref.searchParams,
    onFilterChange = _ref.onFilterChange,
    pageSizeLimit = _ref.pageSizeLimit,
    totalRecords = _ref.totalRecords,
    currentPage = _ref.currentPage,
    onNextPage = _ref.onNextPage,
    onPrevPage = _ref.onPrevPage,
    onPageSizeChange = _ref.onPageSizeChange;
  var columns = React__default.useMemo(function () {
    return [{
      Header: t('CE_TABLE_DOCUMENT_NAME'),
      accessor: function accessor(row) {
        return getDocumentDetails(row === null || row === void 0 ? void 0 : row.name, getDocumentDetailsPath(row), t);
      }
    }, {
      Header: t('DOCUMENTS_CATEGORY_CARD_LABEL'),
      accessor: function accessor(row) {
        return GetCell$2(row !== null && row !== void 0 && row.category ? t("" + (row === null || row === void 0 ? void 0 : row.category)) : "");
      }
    }, {
      Header: t('CE_TABLE_DOCUMENT_LINK'),
      accessor: function accessor(row) {
        return getDocumentCell(row === null || row === void 0 ? void 0 : row.name, row.filestoreId, row.documentLink || "", t);
      }
    }, {
      Header: t('CE_TABLE_DOCUMENT_POSTED_BY'),
      accessor: function accessor(row) {
        return GetCell$2(row.postedBy);
      }
    }];
  }, []);
  var result;
  if (isLoading) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  } else if (!data || (data === null || data === void 0 ? void 0 : data.length) === 0) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
      style: {
        marginTop: 20,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center'
      }
    }, t("CE_DOCUMENTS_NOT_FOUND"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
      className: "link",
      to: "/digit-ui/employee/engagement/documents/inbox/new-doc"
    }, t('NEW_DOCUMENT_TEXT')));
  } else if ((data === null || data === void 0 ? void 0 : data.length) > 0) {
    result = /*#__PURE__*/React__default.createElement(DocumentNotificationTable, {
      t: t,
      data: data,
      columns: columns,
      onSort: onSort,
      sortParams: sortParams,
      globalSearch: globalSearch,
      onSearch: searchParams,
      pageSizeLimit: pageSizeLimit,
      totalRecords: totalRecords,
      currentPage: currentPage,
      onNextPage: onNextPage,
      onPrevPage: onPrevPage,
      onPageSizeChange: onPageSizeChange,
      getCellProps: function getCellProps(cellInfo) {
        return {
          style: {
            minWidth: cellInfo.column.Header === t("CE_TABLE_DOCUMENT_NAME") ? "240px" : "",
            padding: "20px 18px",
            fontSize: "16px"
          }
        };
      }
    });
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "inbox-container"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filters-container"
  }, /*#__PURE__*/React__default.createElement(EventLink, {
    title: title,
    icon: iconName,
    links: links
  }), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(Filter$2, {
    onFilterChange: onFilterChange,
    searchParams: searchParams
  }))), /*#__PURE__*/React__default.createElement("div", {
    style: {
      flex: 1
    }
  }, /*#__PURE__*/React__default.createElement(Search$2, {
    t: t,
    onSearch: onSearch,
    type: "desktop",
    searchFields: searchFields,
    isInboxPage: true,
    searchParams: searchParams
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "result",
    style: {
      marginLeft: "24px",
      flex: 1
    }
  }, result)));
};

var ApplicationCard$2 = function ApplicationCard(_ref) {
  var searchFields = _ref.searchFields,
    searchParams = _ref.searchParams,
    onFilterChange = _ref.onFilterChange,
    onSearch = _ref.onSearch,
    t = _ref.t,
    data = _ref.data,
    responseData = _ref.responseData;
  var _useState = React.useState(""),
    type = _useState[0],
    setType = _useState[1];
  var _useState2 = React.useState(false),
    popup = _useState2[0],
    setPopup = _useState2[1];
  var _useState3 = React.useState(searchParams),
    params = _useState3[0],
    setParams = _useState3[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var history = reactRouterDom.useHistory();
  React.useEffect(function () {
    if (type) setPopup(true);
  }, [type]);
  var handlePopupClose = function handlePopupClose() {
    setPopup(false);
    setParams(searchParams);
  };
  var redirectToDetailsPage = function redirectToDetailsPage(data) {
    var details = responseData === null || responseData === void 0 ? void 0 : responseData.find(function (item) {
      return areEqual(item.postedBy, data["Posted By"]) && areEqual(item.name, data["Document Name"]);
    });
    if (details) {
      history.push("/digit-ui/employee/engagement/documents/inbox/details/" + (details === null || details === void 0 ? void 0 : details.name), {
        details: details
      });
    }
  };
  var result;
  if ((data === null || data === void 0 ? void 0 : data.length) === 0) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
      style: {
        marginTop: 20,
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center'
      }
    }, t("CE_DOCUMENTS_NOT_FOUND"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
      className: "link",
      to: "/digit-ui/employee/engagement/documents/inbox/new-doc"
    }, t('NEW_DOCUMENT_TEXT')));
  } else if (data && (data === null || data === void 0 ? void 0 : data.length) > 0) {
    result = /*#__PURE__*/React__default.createElement(digitUiReactComponents.DetailsCard, {
      data: data,
      handleSelect: function handleSelect() {},
      handleDetailCardClick: redirectToDetailsPage
    });
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: "searchBox"
  }, onSearch && /*#__PURE__*/React__default.createElement(digitUiReactComponents.SearchAction, {
    text: "SEARCH",
    handleActionClick: function handleActionClick() {
      setType("SEARCH");
      setPopup(true);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.FilterAction, {
    text: "FILTER",
    handleActionClick: function handleActionClick() {
      setType("FILTER");
      setPopup(true);
    }
  })), result, popup && /*#__PURE__*/React__default.createElement(digitUiReactComponents.PopUp, null, type === "FILTER" && /*#__PURE__*/React__default.createElement("div", {
    className: "popup-module"
  }, /*#__PURE__*/React__default.createElement(Filter$2, {
    onFilterChange: onFilterChange,
    onClose: handlePopupClose,
    onSearch: onSearch,
    type: "mobile",
    searchParams: params
  })), type === "SEARCH" && /*#__PURE__*/React__default.createElement("div", {
    className: "popup-module"
  }, /*#__PURE__*/React__default.createElement(Search$2, {
    t: t,
    type: "mobile",
    onClose: handlePopupClose,
    onSearch: onSearch,
    searchParams: searchParams,
    searchFields: searchFields
  }))));
};

var MobileInbox$2 = function MobileInbox(_ref) {
  var data = _ref.data,
    t = _ref.t,
    title = _ref.title,
    iconName = _ref.iconName,
    links = _ref.links,
    searchFields = _ref.searchFields,
    searchParams = _ref.searchParams,
    onFilterChange = _ref.onFilterChange,
    onSearch = _ref.onSearch,
    isLoading = _ref.isLoading;
  var getData = function getData() {
    return data === null || data === void 0 ? void 0 : data.filter(function (document) {
      var _searchParams$tenantI, _searchParams$tenantI2, _document$name, _searchParams$name, _document$postedBy, _document$postedBy$tr, _searchParams$postedB, _searchParams$postedB2;
      return ((searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$tenantI = searchParams.tenantIds) === null || _searchParams$tenantI === void 0 ? void 0 : _searchParams$tenantI.length) > 0 ? searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$tenantI2 = searchParams.tenantIds) === null || _searchParams$tenantI2 === void 0 ? void 0 : _searchParams$tenantI2.includes(document.tenantId) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.name ? (_document$name = document.name) === null || _document$name === void 0 ? void 0 : _document$name.toUpperCase().startsWith(searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$name = searchParams.name) === null || _searchParams$name === void 0 ? void 0 : _searchParams$name.toUpperCase()) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.postedBy ? ((_document$postedBy = document.postedBy) === null || _document$postedBy === void 0 ? void 0 : (_document$postedBy$tr = _document$postedBy.trim()) === null || _document$postedBy$tr === void 0 ? void 0 : _document$postedBy$tr.toLowerCase()) === (searchParams === null || searchParams === void 0 ? void 0 : (_searchParams$postedB = searchParams.postedBy) === null || _searchParams$postedB === void 0 ? void 0 : (_searchParams$postedB2 = _searchParams$postedB.trim()) === null || _searchParams$postedB2 === void 0 ? void 0 : _searchParams$postedB2.toLowerCase()) : true) && (searchParams !== null && searchParams !== void 0 && searchParams.category ? document.category === (searchParams === null || searchParams === void 0 ? void 0 : searchParams.category) : true);
    }).map(function (document) {
      var _ref2;
      return _ref2 = {}, _ref2[t("CE_TABLE_DOCUMENT_NAME")] = document === null || document === void 0 ? void 0 : document.name, _ref2[t("DOCUMENTS_CATEGORY_CARD_LABEL")] = t("" + (document === null || document === void 0 ? void 0 : document.category)), _ref2[t("CE_TABLE_DOCUMENT_LINK")] = /*#__PURE__*/React__default.createElement("div", {
        className: "mobileInbox_attachments"
      }, document !== null && document !== void 0 && document.filestoreId ? /*#__PURE__*/React__default.createElement("div", {
        className: "link",
        onClick: function onClick(ev) {
          openUploadedDocument(document.filestoreId, document.name);
        }
      }, t('CE_DOCUMENT_VIEW_LINK')) : null, document !== null && document !== void 0 && document.documentLink ? /*#__PURE__*/React__default.createElement("div", {
        className: "link",
        onClick: function onClick(ev) {
          openDocumentLink(document.documentLink, document.name);
        }
      }, t('CE_DOCUMENT_OPEN_LINK')) : null), _ref2[t("CE_TABLE_DOCUMENT_POSTED_BY")] = document === null || document === void 0 ? void 0 : document.postedBy, _ref2;
    });
  };
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      padding: 0
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "inbox-container"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "filters-container"
  }, /*#__PURE__*/React__default.createElement(EventLink, {
    title: title,
    icon: iconName,
    links: links
  }), /*#__PURE__*/React__default.createElement(ApplicationCard$2, {
    t: t,
    data: getData(),
    onFilterChange: onFilterChange
    ,
    isLoading: isLoading
    ,
    onSearch: onSearch
    ,
    searchParams: searchParams,
    searchFields: searchFields,
    responseData: data
  }))));
};

var Inbox$2 = function Inbox(_ref) {
  var _React$createElement;
  var tenants = _ref.tenants;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  Digit.SessionStorage.set("ENGAGEMENT_TENANTS", tenants);
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useState = React.useState({
      tenantIds: tenantId,
      offset: 0,
      limit: 10
    }),
    searchParams = _useState[0],
    setSearchParams = _useState[1];
  var isMobile = window.Digit.Utils.browser.isMobile();
  var _Digit$Hooks$engageme = Digit.Hooks.engagement.useDocSearch(searchParams, {
      select: function select(_ref2) {
        var Documents = _ref2.Documents,
          totalCount = _ref2.totalCount;
        return {
          documentsList: Documents,
          totalCount: totalCount
        };
      }
    }),
    response = _Digit$Hooks$engageme.data,
    isLoading = _Digit$Hooks$engageme.isLoading;
  var onSearch = function onSearch(params) {
    var _params$ulbs, _params$ulbs$code, _params$ulbs2;
    var tenantIds = params !== null && params !== void 0 && (_params$ulbs = params.ulbs) !== null && _params$ulbs !== void 0 && (_params$ulbs$code = _params$ulbs.code) !== null && _params$ulbs$code !== void 0 && _params$ulbs$code.length ? params === null || params === void 0 ? void 0 : (_params$ulbs2 = params.ulbs) === null || _params$ulbs2 === void 0 ? void 0 : _params$ulbs2.code : tenantId;
    var name = params.name,
      postedBy = params.postedBy;
    setSearchParams(function (prevSearchParams) {
      return _extends({}, prevSearchParams, {
        name: name,
        postedBy: postedBy,
        tenantIds: tenantIds
      });
    });
  };
  var handleFilterChange = function handleFilterChange(data) {
    setSearchParams(function (prevSearchParams) {
      return _extends({}, prevSearchParams, data);
    });
  };
  var fetchNextPage = React.useCallback(function () {
    setSearchParams(function (prevSearchParams) {
      return _extends({}, prevSearchParams, {
        offset: parseInt(prevSearchParams === null || prevSearchParams === void 0 ? void 0 : prevSearchParams.offset) + parseInt(prevSearchParams === null || prevSearchParams === void 0 ? void 0 : prevSearchParams.limit)
      });
    });
  }, []);
  var fetchPrevPage = function fetchPrevPage() {
    setSearchParams(function (prevSearchParams) {
      return _extends({}, prevSearchParams, {
        offset: parseInt(prevSearchParams === null || prevSearchParams === void 0 ? void 0 : prevSearchParams.offset) - parseInt(prevSearchParams === null || prevSearchParams === void 0 ? void 0 : prevSearchParams.limit)
      });
    });
  };
  var handlePageSizeChange = function handlePageSizeChange(e) {
    setSearchParams(function (prevSearchParams) {
      return _extends({}, prevSearchParams, {
        limit: e.target.value
      });
    });
  };
  React.useEffect(function () {
    setSearchParams(function (prevSearchParams) {
      return _extends({}, prevSearchParams, {
        tenantIds: tenantId
      });
    });
  }, [tenantId]);
  var getSearchFields = function getSearchFields() {
    return [{
      label: t('LABEL_FOR_ULB'),
      name: "ulbs",
      type: "ulb"
    }, {
      label: t('DOCUMENTS_DOCUMENT_HEADER'),
      name: "name"
    }, {
      label: t('CE_TABLE_DOCUMENT_POSTED_BY'),
      name: "postedBy"
    }];
  };
  var links = [{
    text: t('NEW_DOCUMENT_TEXT'),
    link: "/digit-ui/employee/engagement/documents/inbox/new-doc"
  }];
  if (isMobile) {
    return /*#__PURE__*/React__default.createElement(MobileInbox$2, {
      data: response === null || response === void 0 ? void 0 : response.documentsList,
      searchParams: searchParams,
      searchFields: getSearchFields(),
      t: t,
      onFilterChange: handleFilterChange,
      onSearch: onSearch,
      isLoading: isLoading,
      title: "DOCUMENTS_DOCUMENT_HEADER",
      iconName: "document",
      links: links
    });
  }
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("DOCUMENTS_DOCUMENT_HEADER"), Number(response === null || response === void 0 ? void 0 : response.totalCount) ? /*#__PURE__*/React__default.createElement("p", {
    className: "inbox-count"
  }, Number(response === null || response === void 0 ? void 0 : response.totalCount)) : null), /*#__PURE__*/React__default.createElement(DocumentDesktopInbox, (_React$createElement = {
    t: t,
    isLoading: isLoading,
    data: response === null || response === void 0 ? void 0 : response.documentsList,
    links: links,
    searchParams: searchParams,
    onSearch: onSearch
    ,
    searchFields: getSearchFields(),
    onFilterChange: handleFilterChange,
    pageSizeLimit: searchParams === null || searchParams === void 0 ? void 0 : searchParams.limit,
    totalRecords: response === null || response === void 0 ? void 0 : response.totalCount,
    title: "DOCUMENTS_DOCUMENT_HEADER",
    iconName: "document"
  }, _React$createElement["links"] = links, _React$createElement.currentPage = parseInt(searchParams.offset / searchParams.limit), _React$createElement.onNextPage = fetchNextPage, _React$createElement.onPrevPage = fetchPrevPage, _React$createElement.onPageSizeChange = handlePageSizeChange, _React$createElement)));
};

var SurveyListCard = function SurveyListCard(_ref) {
  var header = _ref.header,
    about = _ref.about,
    activeTime = _ref.activeTime,
    postedAt = _ref.postedAt,
    responseStatus = _ref.responseStatus,
    hasResponded = _ref.hasResponded,
    onCardClick = _ref.onCardClick;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "WhatsNewCard",
    onClick: onCardClick
  }, /*#__PURE__*/React__default.createElement("h2", null, header), /*#__PURE__*/React__default.createElement("p", null, about), /*#__PURE__*/React__default.createElement("div", {
    className: "surveyListclockDiv"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Clock, null), " ", /*#__PURE__*/React__default.createElement("span", null, "Active till " + format(new Date(activeTime), "do MMM HH:mm"))), /*#__PURE__*/React__default.createElement("div", {
    className: "surveyListstatus"
  }, /*#__PURE__*/React__default.createElement("p", null, formatDistanceToNow(new Date(postedAt), {
    addSuffix: true
  })), /*#__PURE__*/React__default.createElement("span", {
    className: hasResponded ? 'surveyLisResponded' : 'surveyLisNotResponded'
  }, t(responseStatus))));
};

var isActive = function isActive(startDate, endDate) {
  var currentDate = new Date().getTime();
  if (startDate < currentDate && currentDate <= endDate) {
    return true;
  }
  return false;
};
var SurveyList = function SurveyList() {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var tenantIds = Digit.ULBService.getCitizenCurrentTenant();
  var _Digit$Hooks$survey$u = Digit.Hooks.survey.useSearch({
      tenantIds: tenantIds
    }, {
      select: function select(_ref) {
        var Surveys = _ref.Surveys;

        var allSurveys = Surveys.map(function (survey) {
          var isSurveyActive = isActive(survey.startDate, survey.endDate);
          var resStatus = "";
          if (isSurveyActive && survey.hasResponded) resStatus = "CS_SURVEY_RESPONDED";else if (isSurveyActive) resStatus = "CS_SURVEY_YT_TO_RESPOND";else resStatus = "CANNOT_RESPOND_MSG";
          return _extends({
            hasResponded: false,
            responseStatus: resStatus
          }, survey);
        });
        var activeSurveysList = [];
        var inactiveSurveysList = [];
        for (var _iterator = _createForOfIteratorHelperLoose(allSurveys), _step; !(_step = _iterator()).done;) {
          var survey = _step.value;
          if (survey.status === "ACTIVE" && isActive(survey.startDate, survey.endDate)) {
            activeSurveysList.push(survey);
          } else {
            inactiveSurveysList.push(survey);
          }
        }
        return {
          activeSurveysList: activeSurveysList,
          inactiveSurveysList: inactiveSurveysList
        };
      }
    }),
    data = _Digit$Hooks$survey$u.data,
    isLoadingSurveys = _Digit$Hooks$survey$u.isLoading;

  var handleCardClick = function handleCardClick(details) {
    if (!details.hasResponded) {
      history.push("/digit-ui/citizen/engagement/surveys/fill-survey", details);
    } else {
      history.push("/digit-ui/citizen/engagement/surveys/show-survey", details);
    }
  };
  if (isLoadingSurveys) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("CS_COMMON_SURVEYS") + " (" + (data === null || data === void 0 ? void 0 : data.activeSurveysList.length) + ")"), data !== null && data !== void 0 && data.activeSurveysList && data.activeSurveysList.length ? data.activeSurveysList.map(function (data, index) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "surveyListCardMargin"
    }, /*#__PURE__*/React__default.createElement(SurveyListCard, {
      header: data.title,
      about: data.description,
      activeTime: data.endDate,
      postedAt: data.auditDetails.createdTime,
      responseStatus: data.responseStatus,
      hasResponsed: data.status,
      key: index,
      onCardClick: function onCardClick() {
        return handleCardClick(data);
      }
    }));
  }) : /*#__PURE__*/React__default.createElement("div", {
    className: "centered-message"
  }, /*#__PURE__*/React__default.createElement("p", null, t("CS_NO_ACTIVE_SURVEYS"))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("CS_COMMON_INACTIVE_SURVEYS") + " (" + data.inactiveSurveysList.length + ")"), data !== null && data !== void 0 && data.inactiveSurveysList && data.inactiveSurveysList.length ? data.inactiveSurveysList.map(function (data, index) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "surveyListCardMargin"
    }, /*#__PURE__*/React__default.createElement(SurveyListCard, {
      header: data.title,
      about: data.description,
      activeTime: data.endDate,
      postedAt: data.auditDetails.createdTime,
      responseStatus: data.responseStatus,
      hasResponsed: data.status,
      key: index
    }));
  }) : /*#__PURE__*/React__default.createElement("div", {
    className: "centered-message"
  }, /*#__PURE__*/React__default.createElement("p", null, t("CS_NO_INACTIVE_SURVEYS"))));
};

var Actions$1 = ['EDIT_DOCUMENT', 'DELETE'];
var getUlbName$1 = function getUlbName(tenantId) {
  var _ulbName$, _ulbName;
  var ulbName = tenantId === null || tenantId === void 0 ? void 0 : tenantId.split('.')[1];
  ulbName = "" + ((_ulbName$ = ulbName[0]) === null || _ulbName$ === void 0 ? void 0 : _ulbName$.toUpperCase()) + ((_ulbName = ulbName) === null || _ulbName === void 0 ? void 0 : _ulbName.slice(1)) + " ";
  return ulbName;
};
var DocumentDetails$1 = function DocumentDetails(_ref) {
  var _details$description;
  var location = _ref.location,
    history = _ref.history;
  var isMobile = window.Digit.Utils.browser.isMobile();
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _location$state = location === null || location === void 0 ? void 0 : location.state,
    details = _location$state.details;
  var _React$useState = React__default.useState(false),
    displayMenu = _React$useState[0],
    setDisplayMenu = _React$useState[1];
  var _useState = React.useState(false),
    showModal = _useState[0],
    setShowModal = _useState[1];
  var _Digit$Hooks$useTenan = Digit.Hooks.useTenants();
  var currrentUlb = Digit.ULBService.getCurrentUlb();
  var stateId = Digit.ULBService.getStateId();
  var _Digit$Hooks$engageme = Digit.Hooks.engagement.useMDMS(stateId, "DocumentUploader", ["UlbLevelCategories"], {
      select: function select(d) {
        var _d$DocumentUploader, _d$DocumentUploader$U, _d$DocumentUploader$U2;
        var data = d === null || d === void 0 ? void 0 : (_d$DocumentUploader = d.DocumentUploader) === null || _d$DocumentUploader === void 0 ? void 0 : (_d$DocumentUploader$U = _d$DocumentUploader.UlbLevelCategories) === null || _d$DocumentUploader$U === void 0 ? void 0 : (_d$DocumentUploader$U2 = _d$DocumentUploader$U.filter) === null || _d$DocumentUploader$U2 === void 0 ? void 0 : _d$DocumentUploader$U2.call(_d$DocumentUploader$U, function (e) {
          return e.ulb === currrentUlb.code;
        });
        return data[0].categoryList.map(function (name) {
          return {
            name: name
          };
        });
      }
    }),
    categoryOptions = _Digit$Hooks$engageme.data;
  function onActionSelect(action) {
    setDisplayMenu(false);
    if (action !== null && action !== void 0 && action.includes('EDIT')) {
      var _categoryOptions$filt;
      var DocumentEntity = _extends({
        tenantIds: details === null || details === void 0 ? void 0 : details.tenantId,
        documentName: details === null || details === void 0 ? void 0 : details.name,
        docCategory: categoryOptions === null || categoryOptions === void 0 ? void 0 : (_categoryOptions$filt = categoryOptions.filter(function (item) {
          return item.name === (details === null || details === void 0 ? void 0 : details.category);
        })) === null || _categoryOptions$filt === void 0 ? void 0 : _categoryOptions$filt[0],
        document: {
          filestoreId: {
            fileStoreId: details === null || details === void 0 ? void 0 : details.filestoreId
          },
          documentLink: details === null || details === void 0 ? void 0 : details.documentLink
        },
        ULB: {
          code: details === null || details === void 0 ? void 0 : details.tenantId
        }
      }, details);
      history.push({
        pathname: "/digit-ui/employee/engagement/documents/inbox/update",
        state: {
          DocumentEntity: DocumentEntity
        }
      });
    }
    if (action !== null && action !== void 0 && action.includes('DELETE')) {
      setShowModal(true);
    }
  }
  function onModalSubmit() {
    setShowModal(false);
    var DocumentEntity = _extends({}, details);
    history.push({
      pathname: "/digit-ui/employee/engagement/documents/delete-response",
      state: {
        DocumentEntity: DocumentEntity
      }
    });
  }
  function onModalCancel() {
    setShowModal(false);
  }
  return /*#__PURE__*/React__default.createElement("div", null, showModal ? /*#__PURE__*/React__default.createElement(Confirmation, {
    t: t,
    heading: 'CONFIRM_DELETE_DOC',
    docName: details === null || details === void 0 ? void 0 : details.name,
    closeModal: function closeModal() {
      return setShowModal(!showModal);
    },
    actionCancelLabel: 'CS_COMMON_CANCEL',
    actionCancelOnSubmit: onModalCancel,
    actionSaveLabel: 'ES_COMMON_Y_DEL',
    actionSaveOnSubmit: onModalSubmit
  }) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("CE_DOCUMENT_DETAILS")), /*#__PURE__*/React__default.createElement("div", {
    className: "notice_and_circular_main gap-ten"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_wrapper"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_row_items"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails_title"
  }, t('ULB') + ":"), " ", /*#__PURE__*/React__default.createElement("p", null, getUlbName$1(details === null || details === void 0 ? void 0 : details.tenantId)), " "), /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_row_items"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails_title"
  }, t('DOCUMENT_NAME') + ":"), " ", /*#__PURE__*/React__default.createElement("p", null, details === null || details === void 0 ? void 0 : details.name), " "), /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_row_items"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails_title"
  }, t('DOCUMENT_CATEGORY') + ":"), " ", /*#__PURE__*/React__default.createElement("p", null, t(details === null || details === void 0 ? void 0 : details.category)), " "), /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_row_items"
  }, /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails_title"
  }, t('DCOUMENT_DESCRIPTION') + ":"), " ", /*#__PURE__*/React__default.createElement("p", {
    className: "documentDetails__description"
  }, details !== null && details !== void 0 && (_details$description = details.description) !== null && _details$description !== void 0 && _details$description.length ? details === null || details === void 0 ? void 0 : details.description : 'NA'), " "), details !== null && details !== void 0 && details.filestoreId ? /*#__PURE__*/React__default.createElement("div", {
    className: "documentDetails_pdf"
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "documentDetails_subheader"
  }, "" + t('Document')), /*#__PURE__*/React__default.createElement("div", {
    style: {
      width: '100px'
    },
    onClick: function onClick() {
      return openUploadedDocument(details === null || details === void 0 ? void 0 : details.filestoreId, details === null || details === void 0 ? void 0 : details.name);
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.GenericFileIcon, null))) : null)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, displayMenu ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Menu, {
    style: {
      width: isMobile ? 'full' : '240px'
    },
    localeKeyPrefix: "ES_CE",
    options: Actions$1,
    t: t,
    onSelect: onActionSelect
  }) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("ES_COMMON_TAKE_ACTION"),
    onSubmit: function onSubmit() {
      return setDisplayMenu(!displayMenu);
    }
  })));
};

var FilterFormFieldsComponent = function FilterFormFieldsComponent(_ref) {
  var statuses = _ref.statuses,
    controlFilterForm = _ref.controlFilterForm;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;

  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.FilterFormField, null, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: "status",
    control: controlFilterForm,
    render: function render(_ref2) {
      var ref = _ref2.ref,
        onChange = _ref2.onChange,
        value = _ref2.value;
      return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
        className: "filter-label"
      }, t("CS_SURVEY_STATUS")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
        inputRef: ref,
        option: statuses,
        optionKey: "code",
        t: t,
        select: onChange,
        selected: value
      }));
    }
  })));
};

var SearchFormFieldsComponents = function SearchFormFieldsComponents(_ref) {
  var _searchFormState$erro, _searchFormState$erro2, _searchFormState$erro3, _searchFormState$erro4;
  var registerRef = _ref.registerRef,
    controlSearchForm = _ref.controlSearchForm,
    searchFormState = _ref.searchFormState;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var userInfo = Digit.SessionStorage.get("citizen.userRequestObject");
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$info, _userInfo$info$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$info = userInfo.info) === null || _userInfo$info === void 0 ? void 0 : (_userInfo$info$roles = _userInfo$info.roles) === null || _userInfo$info$roles === void 0 ? void 0 : _userInfo$info$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  }).sort(alphabeticalSortFunctionForTenantsBasedOnName);
  var selectedTenat = React.useMemo(function () {
    var filtered = ulbs.filter(function (item) {
      return item.code === tenantId;
    });
    return filtered;
  }, [ulbs]);

  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SearchField, null, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_FOR_ULB")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    rules: {
      required: true
    },
    defaultValue: selectedTenat === null || selectedTenat === void 0 ? void 0 : selectedTenat[0],
    render: function render(props) {
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
        option: userUlbs,
        optionKey: "i18nKey",
        selected: props.value,
        select: function select(e) {
          return props.onChange(e);
        },
        t: t
      });
    },
    name: "tenantIds",
    control: controlSearchForm
  })), /*#__PURE__*/React__default.createElement(digitUiReactComponents.SearchField, null, /*#__PURE__*/React__default.createElement("label", null, t("CS_SURVEY_NAME")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    name: "title",
    type: "text",
    inputRef: registerRef({
      maxLength: {
        value: 60,
        message: t("EXCEEDS_60_CHAR_LIMIT")
      }
    })
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, searchFormState === null || searchFormState === void 0 ? void 0 : (_searchFormState$erro = searchFormState.errors) === null || _searchFormState$erro === void 0 ? void 0 : (_searchFormState$erro2 = _searchFormState$erro["title"]) === null || _searchFormState$erro2 === void 0 ? void 0 : _searchFormState$erro2.message)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.SearchField, null, /*#__PURE__*/React__default.createElement("label", null, t("EVENTS_POSTEDBY_LABEL")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    name: "postedBy",
    type: "text",
    inputRef: registerRef({
      maxLength: {
        value: 30,
        message: t("EXCEEDS_30_CHAR_LIMIT")
      }
    })
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, searchFormState === null || searchFormState === void 0 ? void 0 : (_searchFormState$erro3 = searchFormState.errors) === null || _searchFormState$erro3 === void 0 ? void 0 : (_searchFormState$erro4 = _searchFormState$erro3["postedBy"]) === null || _searchFormState$erro4 === void 0 ? void 0 : _searchFormState$erro4.message)));
};

var useInboxTableConfig = function useInboxTableConfig(_ref) {
  var _formState$tableForm, _formState$tableForm2, _formState$tableForm7, _formState$searchForm;
  var parentRoute = _ref.parentRoute,
    onPageSizeChange = _ref.onPageSizeChange,
    formState = _ref.formState,
    totalCount = _ref.totalCount,
    table = _ref.table,
    dispatch = _ref.dispatch;
  var GetCell = function GetCell(value) {
    return /*#__PURE__*/React__default.createElement("span", {
      className: "cell-text styled-cell"
    }, value);
  };
  var GetStatusCell = function GetStatusCell(value) {
    return (value === null || value === void 0 ? void 0 : value.toLowerCase()) === "active" ? /*#__PURE__*/React__default.createElement("span", {
      className: "sla-cell-success"
    }, value) : /*#__PURE__*/React__default.createElement("span", {
      className: "sla-cell-error"
    }, value);
  };
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var tableColumnConfig = React.useMemo(function () {
    return [{
      Header: t("CS_SURVEY_TITLE"),
      accessor: "uuid",
      Cell: function Cell(_ref2) {
        var row = _ref2.row;
        return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
          to: parentRoute + "/surveys/inbox/details/" + row.original["uuid"]
        }, /*#__PURE__*/React__default.createElement("span", {
          className: "link"
        }, row.original["title"])));
      }
    }, {
      Header: t("EVENTS_START_DATE_LABEL"),
      accessor: "startDate",
      Cell: function Cell(_ref3) {
        var _row$original, _row$original2;
        var row = _ref3.row;
        return (_row$original = row.original) !== null && _row$original !== void 0 && _row$original.startDate ? GetCell(format(new Date((_row$original2 = row.original) === null || _row$original2 === void 0 ? void 0 : _row$original2.startDate), 'dd/MM/yyyy')) : "";
      }
    }, {
      Header: t("EVENTS_END_DATE_LABEL"),
      accessor: "endDate",
      Cell: function Cell(_ref4) {
        var _row$original3, _row$original4;
        var row = _ref4.row;
        return (_row$original3 = row.original) !== null && _row$original3 !== void 0 && _row$original3.endDate ? GetCell(format(new Date((_row$original4 = row.original) === null || _row$original4 === void 0 ? void 0 : _row$original4.endDate), 'dd/MM/yyyy')) : "";
      }
    }, {
      Header: t("CS_RESPONSE_COUNT"),
      accessor: "answersCount",
      Cell: function Cell(_ref5) {
        var _row$original5, _row$original6;
        var row = _ref5.row;
        return (_row$original5 = row.original) !== null && _row$original5 !== void 0 && _row$original5.answersCount ? GetCell(Number((_row$original6 = row.original) === null || _row$original6 === void 0 ? void 0 : _row$original6.answersCount)) : "-";
      }
    }, {
      Header: t("EVENTS_STATUS_LABEL"),
      accessor: "status",
      Cell: function Cell(_ref6) {
        var _row$original7;
        var row = _ref6.row;
        return GetStatusCell((_row$original7 = row.original) === null || _row$original7 === void 0 ? void 0 : _row$original7.status);
      }
    }, {
      Header: t("EVENTS_POSTEDBY_LABEL"),
      accessor: function accessor(row) {
        return row.postedBy;
      }
    }, {
      Header: t("CS_SURVEY_RESULTS"),
      accessor: "results",
      Cell: function Cell(_ref7) {
        var row = _ref7.row;
        return /*#__PURE__*/React__default.createElement("div", {
          style: {
            "display": "flex",
            "justifyContent": "center"
          }
        }, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
          to: parentRoute + "/surveys/inbox/results/" + row.original["uuid"]
        }, /*#__PURE__*/React__default.createElement("span", {
          className: "link"
        }, /*#__PURE__*/React__default.createElement("svg", {
          width: "20",
          height: "18",
          viewBox: "0 0 20 18",
          fill: "none",
          xmlns: "http://www.w3.org/2000/svg"
        }, /*#__PURE__*/React__default.createElement("path", {
          d: "M5.5 18H0V6H5.5V18ZM12.75 0H7.25V18H12.75V0ZM20 8H14.5V18H20V8Z",
          fill: "#F47738"
        })))));
      }
    }];
  });
  return {
    getCellProps: function getCellProps(cellInfo) {
      return {
        style: {
          padding: "20px 18px",
          fontSize: "16px"
        }
      };
    },
    disableSort: false,
    autoSort: false,
    manualPagination: true,
    initSortI: "endDate",
    onPageSizeChange: onPageSizeChange,
    currentPage: ((_formState$tableForm = formState.tableForm) === null || _formState$tableForm === void 0 ? void 0 : _formState$tableForm.offset) / ((_formState$tableForm2 = formState.tableForm) === null || _formState$tableForm2 === void 0 ? void 0 : _formState$tableForm2.limit),
    onNextPage: function onNextPage() {
      var _formState$tableForm3, _formState$tableForm4;
      return dispatch({
        action: "mutateTableForm",
        data: _extends({}, formState.tableForm, {
          offset: parseInt((_formState$tableForm3 = formState.tableForm) === null || _formState$tableForm3 === void 0 ? void 0 : _formState$tableForm3.offset) + parseInt((_formState$tableForm4 = formState.tableForm) === null || _formState$tableForm4 === void 0 ? void 0 : _formState$tableForm4.limit)
        })
      });
    },
    onPrevPage: function onPrevPage() {
      var _formState$tableForm5, _formState$tableForm6;
      return dispatch({
        action: "mutateTableForm",
        data: _extends({}, formState.tableForm, {
          offset: parseInt((_formState$tableForm5 = formState.tableForm) === null || _formState$tableForm5 === void 0 ? void 0 : _formState$tableForm5.offset) - parseInt((_formState$tableForm6 = formState.tableForm) === null || _formState$tableForm6 === void 0 ? void 0 : _formState$tableForm6.limit)
        })
      });
    },
    pageSizeLimit: (_formState$tableForm7 = formState.tableForm) === null || _formState$tableForm7 === void 0 ? void 0 : _formState$tableForm7.limit,
    totalRecords: totalCount,
    onSearch: formState === null || formState === void 0 ? void 0 : (_formState$searchForm = formState.searchForm) === null || _formState$searchForm === void 0 ? void 0 : _formState$searchForm.message,
    data: table,
    columns: tableColumnConfig,
    noResultsMessage: "CS_NO_SURVEYS_FOUND"
  };
};

var useInboxMobileCardsData = function useInboxMobileCardsData(_ref) {
  var parentRoute = _ref.parentRoute,
    table = _ref.table;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;

  var dataForMobileInboxCards = table === null || table === void 0 ? void 0 : table.map(function (_ref2) {
    var _ref3;
    var title = _ref2.title,
      startDate = _ref2.startDate,
      endDate = _ref2.endDate,
      answersCount = _ref2.answersCount,
      status = _ref2.status,
      postedBy = _ref2.postedBy;
    return _ref3 = {}, _ref3[t("CS_SURVEY_TITLE")] = title, _ref3[t("EVENTS_START_DATE_LABEL")] = format(new Date(startDate), 'dd/MM/yyyy'), _ref3[t("EVENTS_END_DATE_LABEL")] = format(new Date(endDate), 'dd/MM/yyyy'), _ref3[t("CS_RESPONSE_COUNT")] = answersCount, _ref3[t("EVENTS_STATUS_LABEL")] = status, _ref3[t("EVENTS_POSTEDBY_LABEL")] = postedBy, _ref3;
  });
  return {
    data: dataForMobileInboxCards,
    linkPrefix: parentRoute + "/inbox/",
    serviceRequestIdKey: t("TL_COMMON_TABLE_COL_APP_NO")
  };
};

var Inbox$3 = function Inbox(_ref) {
  var parentRoute = _ref.parentRoute;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  });
  var statuses = [{
    code: "ALL",
    name: "" + t("ES_COMMON_ALL")
  }, {
    code: "ACTIVE",
    name: "" + t("ES_COMMON_ACTIVE")
  }, {
    code: "INACTIVE",
    name: "" + t("ES_COMMON_INACTIVE")
  }];
  var searchFormDefaultValues = {
    tenantIds: userUlbs[0],
    postedBy: "",
    title: ""
  };
  var filterFormDefaultValues = {
    status: statuses[0]
  };
  var tableOrderFormDefaultValues = {
    sortBy: "",
    limit: 10,
    offset: 0,
    sortOrder: "DESC"
  };
  function formReducer(state, payload) {
    switch (payload.action) {
      case "mutateSearchForm":
        Digit.SessionStorage.set("CITIZENSURVEY.INBOX", _extends({}, state, {
          searchForm: payload.data
        }));
        return _extends({}, state, {
          searchForm: payload.data
        });
      case "mutateFilterForm":
        Digit.SessionStorage.set("CITIZENSURVEY.INBOX", _extends({}, state, {
          filterForm: payload.data
        }));
        return _extends({}, state, {
          filterForm: payload.data
        });
      case "mutateTableForm":
        Digit.SessionStorage.set("CITIZENSURVEY.INBOX", _extends({}, state, {
          tableForm: payload.data
        }));
        return _extends({}, state, {
          tableForm: payload.data
        });
    }
  }
  var InboxObjectInSessionStorage = Digit.SessionStorage.get("CITIZENSURVEY.INBOX");
  var onSearchFormReset = function onSearchFormReset(setSearchFormValue) {
    setSearchFormValue("postedBy", "");
    setSearchFormValue("title", "");
    setSearchFormValue("tenantIds", tenantId);
    dispatch({
      action: "mutateSearchForm",
      data: searchFormDefaultValues
    });
  };
  var onFilterFormReset = function onFilterFormReset(setFilterFormValue) {
    setFilterFormValue("status", statuses[0]);
    dispatch({
      action: "mutateFilterForm",
      data: filterFormDefaultValues
    });
  };
  var formInitValue = React.useMemo(function () {
    return InboxObjectInSessionStorage || {
      filterForm: filterFormDefaultValues,
      searchForm: searchFormDefaultValues,
      tableForm: tableOrderFormDefaultValues
    };
  }, [Object.values((InboxObjectInSessionStorage === null || InboxObjectInSessionStorage === void 0 ? void 0 : InboxObjectInSessionStorage.filterForm) || {}), Object.values((InboxObjectInSessionStorage === null || InboxObjectInSessionStorage === void 0 ? void 0 : InboxObjectInSessionStorage.searchForm) || {}), Object.values((InboxObjectInSessionStorage === null || InboxObjectInSessionStorage === void 0 ? void 0 : InboxObjectInSessionStorage.tableForm) || {})]);
  var _useReducer = React.useReducer(formReducer, formInitValue),
    formState = _useReducer[0],
    dispatch = _useReducer[1];
  var onPageSizeChange = function onPageSizeChange(e) {
    dispatch({
      action: "mutateTableForm",
      data: _extends({}, formState.tableForm, {
        limit: e.target.value
      })
    });
  };
  var _Digit$Hooks$survey$u = Digit.Hooks.survey.useSurveyInbox(formState),
    _Digit$Hooks$survey$u2 = _Digit$Hooks$survey$u.data;
  _Digit$Hooks$survey$u2 = _Digit$Hooks$survey$u2 === void 0 ? {} : _Digit$Hooks$survey$u2;
  var Surveys = _Digit$Hooks$survey$u2.Surveys,
    TotalCount = _Digit$Hooks$survey$u2.TotalCount,
    isInboxLoading = _Digit$Hooks$survey$u.isLoading;
  var PropsForInboxLinks = {
    logoIcon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.DocumentIcon, null),
    headerText: "CS_COMMON_SURVEYS",
    links: [{
      text: t("CS_COMMON_NEW_SURVEY"),
      link: "/digit-ui/employee/engagement/surveys/inbox/create"
    }]
  };
  var SearchFormFields = React.useCallback(function (_ref2) {
    var registerRef = _ref2.registerRef,
      searchFormState = _ref2.searchFormState,
      controlSearchForm = _ref2.controlSearchForm;
    return /*#__PURE__*/React__default.createElement(SearchFormFieldsComponents, {
      registerRef: registerRef,
      searchFormState: searchFormState,
      controlSearchForm: controlSearchForm
    });
  }, []);
  var FilterFormFields = React.useCallback(function (_ref3) {
    var registerRef = _ref3.registerRef,
      controlFilterForm = _ref3.controlFilterForm,
      setFilterFormValue = _ref3.setFilterFormValue,
      getFilterFormValue = _ref3.getFilterFormValue;
    return /*#__PURE__*/React__default.createElement(FilterFormFieldsComponent, {
      statuses: statuses,
      registerRef: registerRef,
      controlFilterForm: controlFilterForm,
      setFilterFormValue: setFilterFormValue,
      filterFormState: formState === null || formState === void 0 ? void 0 : formState.filterForm,
      getFilterFormValue: getFilterFormValue
    });
  }, [statuses]);
  var onSearchFormSubmit = function onSearchFormSubmit(data) {
    data.hasOwnProperty("") ? data === null || data === void 0 ? true : delete data[""] : null;
    dispatch({
      action: "mutateSearchForm",
      data: data
    });
  };
  var onFilterFormSubmit = function onFilterFormSubmit(data) {
    data.hasOwnProperty("") ? data === null || data === void 0 ? true : delete data[""] : null;
    dispatch({
      action: "mutateFilterForm",
      data: data
    });
  };
  var propsForSearchForm = {
    SearchFormFields: SearchFormFields,
    onSearchFormSubmit: onSearchFormSubmit,
    searchFormDefaultValues: formState === null || formState === void 0 ? void 0 : formState.searchForm,
    resetSearchFormDefaultValues: searchFormDefaultValues,
    onSearchFormReset: onSearchFormReset
  };
  var propsForFilterForm = {
    FilterFormFields: FilterFormFields,
    onFilterFormSubmit: onFilterFormSubmit,
    filterFormDefaultValues: formState === null || formState === void 0 ? void 0 : formState.filterForm,
    resetFilterFormDefaultValues: filterFormDefaultValues,
    onFilterFormReset: onFilterFormReset
  };
  var propsForInboxTable = useInboxTableConfig(_extends({}, {
    parentRoute: parentRoute,
    onPageSizeChange: onPageSizeChange,
    formState: formState,
    totalCount: TotalCount,
    table: Surveys,
    noResultsMessage: "CS_SURVEYS_NOT_FOUND",
    dispatch: dispatch
  }));
  var propsForInboxMobileCards = useInboxMobileCardsData({
    parentRoute: parentRoute,
    table: Surveys
  });
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.InboxComposer, _extends({
    isInboxLoading: isInboxLoading,
    PropsForInboxLinks: PropsForInboxLinks
  }, propsForSearchForm, propsForFilterForm, {
    propsForInboxMobileCards: propsForInboxMobileCards,
    propsForInboxTable: propsForInboxTable,
    formState: formState
  }));
};

var SurveyDetailsForms = function SurveyDetailsForms(_ref) {
  var _surveyFormState$erro, _surveyFormState$erro2, _surveyFormState$erro3, _surveyFormState$erro4, _surveyFormState$erro5, _surveyFormState$erro6, _surveyFormState$erro7;
  var t = _ref.t,
    registerRef = _ref.registerRef,
    controlSurveyForm = _ref.controlSurveyForm,
    surveyFormState = _ref.surveyFormState,
    surveyFormData = _ref.surveyFormData,
    disableInputs = _ref.disableInputs,
    enableDescriptionOnly = _ref.enableDescriptionOnly;
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  }).sort(alphabeticalSortFunctionForTenantsBasedOnName);
  var selectedTenat = React.useMemo(function () {
    var filtered = ulbs.filter(function (item) {
      return item.code === tenantId;
    });
    return filtered;
  }, [ulbs]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: "surveydetailsform-wrapper"
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_FOR_ULB") + " * :"), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    name: "tenantIds",
    control: controlSurveyForm,
    defaultValue: selectedTenat,
    rules: {
      required: true
    },
    render: function render(props) {
      var renderRemovableTokens = React.useMemo(function () {
        var _props$value;
        return props === null || props === void 0 ? void 0 : (_props$value = props.value) === null || _props$value === void 0 ? void 0 : _props$value.map(function (ulb, index) {
          return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
            key: index,
            text: ulb.name,
            onClick: function onClick() {
              var _props$value2;
              props.onChange(props === null || props === void 0 ? void 0 : (_props$value2 = props.value) === null || _props$value2 === void 0 ? void 0 : _props$value2.filter(function (loc) {
                return loc.code !== ulb.code;
              }));
            }
          });
        });
      }, [props === null || props === void 0 ? void 0 : props.value]);
      return /*#__PURE__*/React__default.createElement("div", {
        style: {
          display: "grid",
          gridAutoFlow: "row"
        }
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
        allowMultiselect: true,
        optionKey: "i18nKey",
        option: userUlbs,
        select: function select(e) {
          var _surveyFormData, _surveyFormData$filte;
          props.onChange([].concat(((_surveyFormData = surveyFormData("tenantIds")) === null || _surveyFormData === void 0 ? void 0 : (_surveyFormData$filte = _surveyFormData.filter) === null || _surveyFormData$filte === void 0 ? void 0 : _surveyFormData$filte.call(_surveyFormData, function (f) {
            return e.code !== (f === null || f === void 0 ? void 0 : f.code);
          })) || [], [e]));
        },
        selected: props === null || props === void 0 ? void 0 : props.value,
        keepNull: true,
        disable: disableInputs,
        t: t
      }), /*#__PURE__*/React__default.createElement("div", {
        className: "tag-container"
      }, renderRemovableTokens));
    }
  }), (surveyFormState === null || surveyFormState === void 0 ? void 0 : (_surveyFormState$erro = surveyFormState.errors) === null || _surveyFormState$erro === void 0 ? void 0 : _surveyFormState$erro.tenantIds) && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("ES_ERROR_REQUIRED"))), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("CS_SURVEY_NAME")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    name: "title",
    type: "text",
    inputRef: registerRef({
      required: t("ES_ERROR_REQUIRED"),
      maxLength: {
        value: 60,
        message: t("EXCEEDS_60_CHAR_LIMIT")
      },
      pattern: {
        value: /^[A-Za-z_-][A-Za-z0-9_\ -]*$/,
        message: t("ES_SURVEY_DONT_START_WITH_NUMBER")
      }
    }),
    disable: disableInputs
  }), (surveyFormState === null || surveyFormState === void 0 ? void 0 : (_surveyFormState$erro2 = surveyFormState.errors) === null || _surveyFormState$erro2 === void 0 ? void 0 : _surveyFormState$erro2.title) && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, surveyFormState === null || surveyFormState === void 0 ? void 0 : (_surveyFormState$erro3 = surveyFormState.errors) === null || _surveyFormState$erro3 === void 0 ? void 0 : (_surveyFormState$erro4 = _surveyFormState$erro3["title"]) === null || _surveyFormState$erro4 === void 0 ? void 0 : _surveyFormState$erro4.message)), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("CS_SURVEY_DESCRIPTION")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    name: "description",
    type: "text",
    inputRef: registerRef({
      required: t("ES_ERROR_REQUIRED"),
      maxLength: {
        value: 250,
        message: t("EXCEEDS_250_CHAR_LIMIT")
      },
      pattern: {
        value: /^[A-Za-z_-][A-Za-z0-9_\ -]*$/,
        message: t("ES_SURVEY_DONT_START_WITH_NUMBER")
      }
    }),
    disable: enableDescriptionOnly ? !enableDescriptionOnly : disableInputs
  }), (surveyFormState === null || surveyFormState === void 0 ? void 0 : (_surveyFormState$erro5 = surveyFormState.errors) === null || _surveyFormState$erro5 === void 0 ? void 0 : _surveyFormState$erro5.description) && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, surveyFormState === null || surveyFormState === void 0 ? void 0 : (_surveyFormState$erro6 = surveyFormState.errors) === null || _surveyFormState$erro6 === void 0 ? void 0 : (_surveyFormState$erro7 = _surveyFormState$erro6["description"]) === null || _surveyFormState$erro7 === void 0 ? void 0 : _surveyFormState$erro7.message)));
};

var Checkboxes = function Checkboxes(_ref) {
  var t = _ref.t,
    _ref$options = _ref.options,
    options = _ref$options === void 0 ? checkboxlist : _ref$options,
    updateOption = _ref.updateOption,
    addOption = _ref.addOption,
    removeOption = _ref.removeOption,
    createNewSurvey = _ref.createNewSurvey,
    formDisabled = _ref.formDisabled;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "options_checkboxes"
  }, options.map(function (title, index) {
    return /*#__PURE__*/React__default.createElement(CheckBoxOption, {
      key: index,
      index: index,
      title: title,
      updateOption: updateOption,
      removeOption: removeOption
    });
  }), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("button", {
    className: "unstyled-button link",
    type: "button",
    disabled: !createNewSurvey && formDisabled,
    onClick: function onClick() {
      return addOption();
    }
  }, t("CS_COMMON_ADD_OPTION"))));
};
var CheckBoxOption = function CheckBoxOption(_ref2) {
  var index = _ref2.index,
    title = _ref2.title,
    updateOption = _ref2.updateOption,
    removeOption = _ref2.removeOption;
  var _useState = React.useState(title),
    optionTitle = _useState[0],
    setOptionTitle = _useState[1];
  var _useState2 = React.useState(false),
    isFocused = _useState2[0],
    setIsFocused = _useState2[1];
  React.useEffect(function () {
    updateOption({
      value: optionTitle,
      id: index
    });
  }, [optionTitle]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: "optioncheckboxwrapper"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CheckBox, null), /*#__PURE__*/React__default.createElement("input", {
    type: "text",
    value: optionTitle,
    onChange: function onChange(ev) {
      return setOptionTitle(ev.target.value);
    },
    onBlur: function onBlur() {
      return setIsFocused(false);
    },
    onFocus: function onFocus() {
      return setIsFocused(true);
    },
    className: isFocused ? "simple_editable-input" : "simple_readonly-input"
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "pointer",
    onClick: function onClick() {
      return removeOption(index);
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null)));
};

var MultipleChoice = function MultipleChoice(_ref) {
  var t = _ref.t,
    _ref$options = _ref.options,
    options = _ref$options === void 0 ? checkboxlist : _ref$options,
    updateOption = _ref.updateOption,
    addOption = _ref.addOption,
    removeOption = _ref.removeOption,
    createNewSurvey = _ref.createNewSurvey,
    formDisabled = _ref.formDisabled;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "options_checkboxes"
  }, options.map(function (title, index) {
    return /*#__PURE__*/React__default.createElement(RadioButtonOption, {
      key: index,
      index: index,
      title: title,
      updateOption: updateOption,
      removeOption: removeOption
    });
  }), /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("button", {
    className: "unstyled-button link",
    type: "button",
    disabled: !createNewSurvey && formDisabled,
    onClick: function onClick() {
      return addOption();
    }
  }, t("CS_COMMON_ADD_OPTION"))));
};
var RadioButtonOption = function RadioButtonOption(_ref2) {
  var index = _ref2.index,
    title = _ref2.title,
    updateOption = _ref2.updateOption,
    removeOption = _ref2.removeOption;
  var _useState = React.useState(title),
    optionTitle = _useState[0],
    setOptionTitle = _useState[1];
  var _useState2 = React.useState(false),
    isFocused = _useState2[0],
    setIsFocused = _useState2[1];
  React.useEffect(function () {
    updateOption({
      value: optionTitle,
      id: index
    });
  }, [optionTitle]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: "optionradiobtnwrapper"
  }, /*#__PURE__*/React__default.createElement("input", {
    type: "radio",
    className: "customradiobutton"
  }), /*#__PURE__*/React__default.createElement("input", {
    type: "text",
    value: optionTitle,
    onChange: function onChange(ev) {
      return setOptionTitle(ev.target.value);
    },
    onBlur: function onBlur() {
      return setIsFocused(false);
    },
    onFocus: function onFocus() {
      return setIsFocused(true);
    },
    className: isFocused ? "simple_editable-input" : "simple_readonly-input"
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "pointer",
    onClick: function onClick() {
      return removeOption(index);
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null)));
};

var dropdownOptions = [{
  title: "Short Answer",
  value: "SHORT_ANSWER_TYPE"
}, {
  title: "Multiple Choice",
  value: "MULTIPLE_ANSWER_TYPE"
}, {
  title: "Check Boxes",
  value: "CHECKBOX_ANSWER_TYPE"
}, {
  title: "Paragraph",
  value: "LONG_ANSWER_TYPE"
}, {
  title: "Date",
  value: "DATE_ANSWER_TYPE"
}, {
  title: "Time",
  value: "TIME_ANSWER_TYPE"
}];
var NewSurveyForm = function NewSurveyForm(_ref) {
  var _formState$errors, _formState$errors2, _formState$errors3;
  var t = _ref.t,
    index = _ref.index,
    questionStatement = _ref.questionStatement,
    type = _ref.type,
    required = _ref.required,
    disableInputs = _ref.disableInputs,
    dispatch = _ref.dispatch,
    isPartiallyEnabled = _ref.isPartiallyEnabled,
    addOption = _ref.addOption,
    formDisabled = _ref.formDisabled;
  var _useState = React.useState({
      questionStatement: questionStatement,
      type: type,
      required: required,
      options: ["option 1"]
    }),
    surveyQuestionConfig = _useState[0],
    setSurveyQuestionConfig = _useState[1];
  var _useFormContext = reactHookForm.useFormContext(),
    register = _useFormContext.register,
    formState = _useFormContext.formState;
  var handleAddOption = function handleAddOption() {
    return setSurveyQuestionConfig(function (prevState) {
      var updatedState = _extends({}, prevState);
      updatedState.options.push("option " + (updatedState.options.length + 1));
      return updatedState;
    });
  };
  var handleUpdateOption = function handleUpdateOption(_ref2) {
    var value = _ref2.value,
      id = _ref2.id;
    setSurveyQuestionConfig(function (prevState) {
      var updatedState = _extends({}, prevState);
      updatedState.options.splice(id, 1, value);
      return updatedState;
    });
  };
  var handleRemoveOption = function handleRemoveOption(id) {
    if (surveyQuestionConfig.options.length === 1) return;
    setSurveyQuestionConfig(function (prevState) {
      var updatedState = _extends({}, prevState);
      updatedState.options.splice(id, 1);
      return updatedState;
    });
  };
  React.useEffect(function () {
    dispatch({
      type: "updateForm",
      payload: {
        index: index,
        formConfig: surveyQuestionConfig
      }
    });
  }, [surveyQuestionConfig]);
  var renderAnswerComponent = function renderAnswerComponent(type) {
    switch (type) {
      case "Paragraph":
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextArea, {
          value: "LONG ANSWER"
        });
      case "Date":
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.DatePicker, {
          stylesForInput: {
            width: "calc(100% - 290px)"
          }
        });
      case "Time":
        return /*#__PURE__*/React__default.createElement(TimePicker, null);
      case "Multiple Choice":
        return /*#__PURE__*/React__default.createElement(MultipleChoice, {
          t: t,
          addOption: handleAddOption,
          updateOption: handleUpdateOption,
          removeOption: handleRemoveOption,
          options: surveyQuestionConfig === null || surveyQuestionConfig === void 0 ? void 0 : surveyQuestionConfig.options,
          createNewSurvey: addOption,
          isPartiallyEnabled: isPartiallyEnabled,
          formDisabled: formDisabled
        });
      case "Check Boxes":
        return /*#__PURE__*/React__default.createElement(Checkboxes, {
          t: t,
          addOption: handleAddOption,
          updateOption: handleUpdateOption,
          removeOption: handleRemoveOption,
          options: surveyQuestionConfig === null || surveyQuestionConfig === void 0 ? void 0 : surveyQuestionConfig.options,
          isPartiallyEnabled: isPartiallyEnabled,
          createNewSurvey: addOption,
          formDisabled: formDisabled
        });
      default:
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
          value: "SHORT ANSWER"
        });
    }
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: "newSurveyForm_wrapper"
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "newSurveyForm_quesno"
  }, t("CS_COMMON_QUESTION") + " " + (index + 1)), /*#__PURE__*/React__default.createElement("span", {
    className: "newSurveyForm_mainsection"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "newSurveyForm_questions"
  }, /*#__PURE__*/React__default.createElement("div", {
    style: {
      width: "80%"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    placeholder: t("CS_COMMON_TYPE_QUESTION"),
    value: surveyQuestionConfig.questionStatement,
    onChange: function onChange(ev) {
      setSurveyQuestionConfig(function (prevState) {
        return _extends({}, prevState, {
          questionStatement: ev.target.value
        });
      });
    },
    textInputStyle: {
      width: "100%"
    },
    name: "QUESTION_SURVEY_" + index,
    disable: disableInputs,
    inputRef: register({
      required: t("ES_ERROR_REQUIRED"),
      maxLength: {
        value: 60,
        message: t("EXCEEDS_60_CHAR_LIMIT")
      },
      pattern: {
        value: /^[A-Za-z_-][A-Za-z0-9_\ -]*$/,
        message: t("ES_SURVEY_DONT_START_WITH_NUMBER")
      }
    })
  }), (formState === null || formState === void 0 ? void 0 : (_formState$errors = formState.errors) === null || _formState$errors === void 0 ? void 0 : _formState$errors.title) && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, formState === null || formState === void 0 ? void 0 : (_formState$errors2 = formState.errors) === null || _formState$errors2 === void 0 ? void 0 : (_formState$errors3 = _formState$errors2["QUESTION_SURVEY_" + index]) === null || _formState$errors3 === void 0 ? void 0 : _formState$errors3.message)), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
    option: dropdownOptions,
    select: function select(ev) {
      setSurveyQuestionConfig(function (prevState) {
        return _extends({}, prevState, {
          type: ev.title
        });
      });
    },
    selected: surveyQuestionConfig.type || {
      title: "Short Answer",
      value: "SHORT_ANSWER_TYPE"
    },
    optionKey: "title",
    disable: disableInputs
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "newSurveyForm_answer"
  }, renderAnswerComponent(surveyQuestionConfig.type)), /*#__PURE__*/React__default.createElement("div", {
    className: "newSurveyForm_actions"
  }, /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CheckBox, {
    onChange: function onChange(e) {
      return setSurveyQuestionConfig(function (prevState) {
        return _extends({}, prevState, {
          required: !prevState.required
        });
      });
    },
    checked: surveyQuestionConfig.required,
    label: t("CS_COMMON_REQUIRED"),
    pageType: "employee",
    disable: disableInputs
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "newSurveyForm_seprator"
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "pointer " + (disableInputs ? 'disabled-btn' : ''),
    onClick: function onClick() {
      return dispatch({
        type: "removeForm",
        payload: {
          index: index
        }
      });
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.DustbinIcon, null)))));
};

var SurveyFormsMaker = function SurveyFormsMaker(_ref) {
  var t = _ref.t,
    formsConfig = _ref.formsConfig,
    setSurveyConfig = _ref.setSurveyConfig,
    disableInputs = _ref.disableInputs,
    isPartiallyEnabled = _ref.isPartiallyEnabled,
    addOption = _ref.addOption,
    formDisabled = _ref.formDisabled;
  var defaultFormsConfig = {
    question: "",
    answerType: "Short Answer",
    required: false,
    options: []
  };
  var initialSurveyFormState = [defaultFormsConfig];
  var surveyFormReducer = function surveyFormReducer(state, _ref2) {
    var type = _ref2.type,
      payload = _ref2.payload;
    switch (type) {
      case "addNewForm":
        var newSurveyQues = [].concat(state, [defaultFormsConfig]);
        payload.setSurveyConfig("questions", newSurveyQues);
        return newSurveyQues;
      case "updateForm":
        var updatedSurveyQues = [].concat(state);
        updatedSurveyQues.splice(payload.index, 1, payload);
        payload.setSurveyConfig("questions", updatedSurveyQues);
        return updatedSurveyQues;
      case "removeForm":
        if (state.length === 1) return state;
        var copyOfSate = [].concat(state);
        copyOfSate.splice(payload.index, 1);
        payload.setSurveyConfig("questions", copyOfSate);
        return copyOfSate;
    }
  };
  var _useReducer = React.useReducer(surveyFormReducer, formsConfig ? formsConfig : initialSurveyFormState),
    surveyState = _useReducer[0],
    dispatch = _useReducer[1];
  var passingSurveyConfigInDispatch = function passingSurveyConfigInDispatch(_ref3) {
    var type = _ref3.type,
      payload = _ref3.payload;
    dispatch({
      type: type,
      payload: _extends({}, payload, {
        setSurveyConfig: setSurveyConfig
      })
    });
  };
  var renderPreviewForms = function renderPreviewForms() {
    return surveyState.length ? surveyState.map(function (config, index) {
      return /*#__PURE__*/React__default.createElement(NewSurveyForm, _extends({
        key: index
      }, config, {
        addOption: addOption,
        t: t,
        index: index,
        disableInputs: disableInputs,
        dispatch: passingSurveyConfigInDispatch,
        isPartiallyEnabled: isPartiallyEnabled,
        formDisabled: formDisabled
      }));
    }) : null;
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: "surveyformslist_wrapper"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "heading"
  }, t("CS_SURVEYS_QUESTIONS")), renderPreviewForms(), /*#__PURE__*/React__default.createElement("div", {
    className: "pointer"
  }, /*#__PURE__*/React__default.createElement("button", {
    className: "unstyled-button link " + (disableInputs ? "disabled-btn" : "") + " " + (surveyState.length >= 30 ? "disabled-btn" : "") + " ",
    type: "button",
    onClick: function onClick() {
      return passingSurveyConfigInDispatch({
        type: "addNewForm"
      });
    }
  }, t("CS_COMMON_ADD_QUESTION"))));
};

var SurveySettingsForms = function SurveySettingsForms(_ref) {
  var _formErrors$fromDate, _formErrors$fromDate2, _formErrors$fromTime, _formErrors$fromTime2, _formErrors$toDate, _formErrors$toDate2, _formErrors$toTime, _formErrors$toTime2, _formErrors$collectCi;
  var t = _ref.t,
    controlSurveyForm = _ref.controlSurveyForm,
    surveyFormState = _ref.surveyFormState,
    disableInputs = _ref.disableInputs,
    enableEndDateTimeOnly = _ref.enableEndDateTimeOnly;
  var formErrors = surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.errors;
  var _useFormContext = reactHookForm.useFormContext(),
    getValues = _useFormContext.getValues;
  var currentTs = new Date().getTime();
  var isValidFromDate = function isValidFromDate(enteredValue) {
    var enteredTs = new Date(enteredValue).getTime();
    var toDate = getValues("toDate") ? new Date(getValues("toDate")).getTime() : new Date().getTime();
    return toDate > enteredTs ? true : false;
  };
  var isValidToDate = function isValidToDate(enteredValue) {
    var enteredTs = new Date(enteredValue).getTime();
    var fromDate = getValues("fromDate") ? new Date(getValues("fromDate")).getTime() : new Date().getTime();
    return enteredTs > fromDate && enteredTs > currentTs ? true : false;
  };
  var isValidFromTime = function isValidFromTime() {
    return true;
  };
  var isValidToTime = function isValidToTime() {
    return true;
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: "surveydetailsform-wrapper"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "heading"
  }, t("CS_COMMON_SETTINGS")), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_SURVEY_START_DATE")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: controlSurveyForm,
    name: "fromDate",
    defaultValue: surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.fromDate,
    rules: {
      required: true,
      validate: {
        isValidFromDate: isValidFromDate
      }
    },
    render: function render(_ref2) {
      var onChange = _ref2.onChange,
        value = _ref2.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "date",
        onChange: onChange,
        defaultValue: value,
        disable: disableInputs
      });
    }
  }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.fromDate) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$fromDate = formErrors.fromDate) === null || _formErrors$fromDate === void 0 ? void 0 : _formErrors$fromDate.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.fromDate) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$fromDate2 = formErrors.fromDate) === null || _formErrors$fromDate2 === void 0 ? void 0 : _formErrors$fromDate2.type) === "isValidFromDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID"))), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_SURVEY_START_TIME")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: controlSurveyForm,
    name: "fromTime",
    defaultValue: surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.fromTime,
    rules: {
      required: true,
      validate: {
        isValidFromTime: isValidFromTime
      }
    },
    render: function render(_ref3) {
      var onChange = _ref3.onChange,
        value = _ref3.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "time",
        onChange: onChange,
        defaultValue: value,
        disable: disableInputs
      });
    }
  }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.fromTime) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$fromTime = formErrors.fromTime) === null || _formErrors$fromTime === void 0 ? void 0 : _formErrors$fromTime.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.fromTime) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$fromTime2 = formErrors.fromTime) === null || _formErrors$fromTime2 === void 0 ? void 0 : _formErrors$fromTime2.type) === "isValidFromDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID"))), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_SURVEY_END_DATE")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: controlSurveyForm,
    name: "toDate",
    defaultValue: surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.toDate,
    rules: {
      required: true,
      validate: {
        isValidToDate: isValidToDate
      }
    },
    render: function render(_ref4) {
      var onChange = _ref4.onChange,
        value = _ref4.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "date",
        onChange: onChange,
        defaultValue: value,
        disable: enableEndDateTimeOnly ? !enableEndDateTimeOnly : disableInputs
      });
    }
  }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.toDate) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$toDate = formErrors.toDate) === null || _formErrors$toDate === void 0 ? void 0 : _formErrors$toDate.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.toDate) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$toDate2 = formErrors.toDate) === null || _formErrors$toDate2 === void 0 ? void 0 : _formErrors$toDate2.type) === "isValidToDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID")), " "), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_SURVEY_END_TIME")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: controlSurveyForm,
    name: "toTime",
    defaultValue: surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.toTime,
    rules: {
      required: true,
      validate: {
        isValidToTime: isValidToTime
      }
    },
    render: function render(_ref5) {
      var onChange = _ref5.onChange,
        value = _ref5.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "time",
        onChange: onChange,
        defaultValue: value,
        disable: enableEndDateTimeOnly ? !enableEndDateTimeOnly : disableInputs
      });
    }
  }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.toTime) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$toTime = formErrors.toTime) === null || _formErrors$toTime === void 0 ? void 0 : _formErrors$toTime.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.toTime) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$toTime2 = formErrors.toTime) === null || _formErrors$toTime2 === void 0 ? void 0 : _formErrors$toTime2.type) === "isValidToDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID"))), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_SURVEY_EMAIL_MOBILE")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: controlSurveyForm,
    name: "collectCitizenInfo",
    defaultValue: surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.collectCitizenInfo,
    rules: {
      required: true
    },
    render: function render(_ref6) {
      var onChange = _ref6.onChange,
        value = _ref6.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RadioButtons, {
        onSelect: onChange,
        selectedOption: value,
        optionsKey: "name",
        options: [{
          code: true,
          name: t("ES_COMMON_YES")
        }, {
          code: false,
          name: t("ES_COMMON_NO")
        }],
        disabled: disableInputs
      });
    }
  }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.collectCitizenInfo) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$collectCi = formErrors.collectCitizenInfo) === null || _formErrors$collectCi === void 0 ? void 0 : _formErrors$collectCi.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED"))));
};

var _excluded$2 = ["register", "control", "handleSubmit", "setValue", "getValues", "reset", "formState", "clearErrors"];
var CreateNewSurvey = function CreateNewSurvey(_ref) {
  var t = _ref.t,
    initialFormValues = _ref.initialFormValues,
    onSubmit = _ref.onSubmit;
  var _useForm = reactHookForm.useForm({
      defaultValues: initialFormValues
    }),
    registerRef = _useForm.register,
    controlSurveyForm = _useForm.control,
    handleSurveyFormSubmit = _useForm.handleSubmit,
    setSurveyFormValue = _useForm.setValue,
    getSurveyFormValues = _useForm.getValues,
    resetSurveyForm = _useForm.reset,
    surveyFormState = _useForm.formState,
    clearSurveyFormsErrors = _useForm.clearErrors,
    methods = _objectWithoutPropertiesLoose(_useForm, _excluded$2);
  React.useEffect(function () {
    registerRef("questions");
  }, []);
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      margin: "8px"
    }
  }, /*#__PURE__*/React__default.createElement(reactHookForm.FormProvider, _extends({
    register: registerRef,
    control: controlSurveyForm,
    handleSubmit: handleSurveyFormSubmit,
    setValue: setSurveyFormValue,
    getValues: getSurveyFormValues,
    reset: resetSurveyForm,
    formState: surveyFormState,
    clearErrors: clearSurveyFormsErrors
  }, methods), /*#__PURE__*/React__default.createElement("form", {
    onSubmit: handleSurveyFormSubmit(onSubmit)
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(SurveyDetailsForms, {
    t: t,
    registerRef: registerRef,
    controlSurveyForm: controlSurveyForm,
    surveyFormState: surveyFormState,
    surveyFormData: getSurveyFormValues
  }), /*#__PURE__*/React__default.createElement(SurveyFormsMaker, {
    t: t,
    setSurveyConfig: setSurveyFormValue,
    addOption: true
  }), /*#__PURE__*/React__default.createElement(SurveySettingsForms, {
    t: t,
    controlSurveyForm: controlSurveyForm,
    surveyFormState: surveyFormState
  })), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CS_CREATE_SURVEY"),
    submit: "submit"
  })))));
};

var answerTypeEnum = {
  "Short Answer": "SHORT_ANSWER_TYPE",
  Paragraph: "LONG_ANSWER_TYPE",
  "Multiple Choice": "MULTIPLE_ANSWER_TYPE",
  "Check Boxes": "CHECKBOX_ANSWER_TYPE",
  Date: "DATE_ANSWER_TYPE",
  Time: "TIME_ANSWER_TYPE"
};

var mapQuestions = function mapQuestions(questions) {
  if (questions === void 0) {
    questions = [];
  }
  if (!questions.length) return;
  return questions.map(function (_ref, index) {
    var formConfig = _ref.formConfig;
    var choices = formConfig.options,
      questionStatement = formConfig.questionStatement,
      required = formConfig.required,
      stringType = formConfig.type;
    var finalQuestion = {
      questionStatement: questionStatement,
      required: required,
      type: answerTypeEnum[stringType]
    };
    if (stringType === "Multiple Choice" || stringType === "Check Boxes") {
      finalQuestion["options"] = choices;
    }
    return finalQuestion;
  });
};
var NewSurveys = function NewSurveys() {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var onSubmit = function onSubmit(data) {
    var collectCitizenInfo = data.collectCitizenInfo,
      title = data.title,
      description = data.description,
      tenantIds = data.tenantIds,
      fromDate = data.fromDate,
      toDate = data.toDate,
      fromTime = data.fromTime,
      toTime = data.toTime,
      questions = data.questions;
    var mappedQuestions = mapQuestions(questions);
    var details = {
      SurveyEntity: {
        tenantIds: tenantIds.map(function (_ref2) {
          var code = _ref2.code;
          return code;
        }),
        title: title,
        description: description,
        collectCitizenInfo: collectCitizenInfo.code,
        startDate: new Date(fromDate + " " + fromTime).getTime(),
        endDate: new Date(toDate + " " + toTime).getTime(),
        questions: mappedQuestions
      }
    };
    history.push("/digit-ui/employee/engagement/surveys/create-response", details);
  };
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  });
  var defaultValues = {
    fromDate: "",
    fromTime: "",
    toDate: "",
    toTime: "",
    questions: {},
    collectCitizenInfo: "",
    tenantIds: userUlbs
  };
  var stylesForForm = {
    marginLeft: '-20px'
  };
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("CREATE_NEW_SURVEY")), /*#__PURE__*/React__default.createElement("div", {
    style: stylesForForm
  }, /*#__PURE__*/React__default.createElement(CreateNewSurvey, {
    t: t,
    onSubmit: onSubmit,
    initialFormValues: defaultValues
  })));
};

var getMessage$3 = function getMessage(mutation) {
  var _mutation$data, _mutation$data$Survey, _mutation$data$Survey2;
  if (mutation.isSuccess) return (_mutation$data = mutation.data) === null || _mutation$data === void 0 ? void 0 : (_mutation$data$Survey = _mutation$data.Surveys) === null || _mutation$data$Survey === void 0 ? void 0 : (_mutation$data$Survey2 = _mutation$data$Survey[0]) === null || _mutation$data$Survey2 === void 0 ? void 0 : _mutation$data$Survey2.uuid;
  return "";
};
var BannerPicker$6 = function BannerPicker(props) {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Banner, {
    message: props.mutation.isSuccess ? t("SURVEY_FORM_CREATED") : t("SURVEY_FORM_FAILURE"),
    applicationNumber: getMessage$3(props.mutation),
    info: props.mutation.isSuccess ? t("SURVEY_FORM_ID") : "",
    successful: props.mutation.isSuccess
  });
};
var Acknowledgement$1 = function Acknowledgement(props) {
  var _mutation$data2, _mutation$data2$Surve;
  var queryClient = reactQuery.useQueryClient();
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var mutation = Digit.Hooks.survey.useCreate();
  var state = props.location.state;
  var history = reactRouterDom.useHistory();
  var _useState = React.useState(false),
    isActionClicked = _useState[0],
    setIsActionClicked = _useState[1];
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      queryClient.clear();
      window.history.replaceState(null, 'CREATE_SURVEY_STATE');
    };
    if (!!state) {
      mutation.mutate(state, {
        onSuccess: onSuccess
      });
    }
  }, []);
  if (mutation.isLoading && !mutation.isIdle) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  var survey = (_mutation$data2 = mutation.data) === null || _mutation$data2 === void 0 ? void 0 : (_mutation$data2$Surve = _mutation$data2.Surveys) === null || _mutation$data2$Surve === void 0 ? void 0 : _mutation$data2$Surve[0];
  var handleActionClick = function handleActionClick() {
    setIsActionClicked(function (prevState) {
      return !prevState;
    });
  };

  var actionClickHandler = function actionClickHandler(option) {
    if (option === t("GO_BACK_TO_HOME")) history.push("/digit-ui/employee");else if (option === t("CREATE_ANOTHER_SURVEY")) history.push("/digit-ui/employee/engagement/surveys/create");
  };
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker$6, {
    t: t,
    mutation: mutation
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardText, null, mutation.isSuccess ? t("SURVEY_FORM_CREATION_MESSAGE", {
    surveyName: survey === null || survey === void 0 ? void 0 : survey.title,
    fromDate: Digit.DateUtils.ConvertTimestampToDate(survey === null || survey === void 0 ? void 0 : survey.startDate),
    toDate: Digit.DateUtils.ConvertTimestampToDate(survey === null || survey === void 0 ? void 0 : survey.endDate)
  }) : null), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement("button", {
    onClick: handleActionClick
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: "Action"
  }), isActionClicked && /*#__PURE__*/React__default.createElement(digitUiReactComponents.Menu, {
    options: [t("GO_BACK_TO_HOME"), t("CREATE_ANOTHER_SURVEY")],
    onSelect: actionClickHandler
  }))));
};

var getMessage$4 = function getMessage(mutation) {
  var _mutation$data, _mutation$data$Docume, _mutation$data$Docume2;
  if (mutation.isSuccess) return (_mutation$data = mutation.data) === null || _mutation$data === void 0 ? void 0 : (_mutation$data$Docume = _mutation$data.Documents) === null || _mutation$data$Docume === void 0 ? void 0 : (_mutation$data$Docume2 = _mutation$data$Docume[0]) === null || _mutation$data$Docume2 === void 0 ? void 0 : _mutation$data$Docume2.uuid;
  return "";
};
var BannerPicker$7 = function BannerPicker(props) {
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Banner, {
    message: props.isSuccess ? t("ENGAGEMENT_SURVEY_UPDATED") : t("ENGAGEMENT_SURVEY_UPDATE_FAILURE"),
    applicationNumber: getMessage$4(props.mutation),
    info: props.isSuccess ? t("SURVEY_FORM_ID") : "",
    successful: props.isSuccess
  });
};
var Response$5 = function Response(props) {
  var queryClient = reactQuery.useQueryClient();
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var mutation = Digit.Hooks.survey.useUpdate();
  var state = props.location.state;
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      queryClient.clear();
      window.history.replaceState(null, 'UPDATE_SURVEY_STATE');
    };
    if (!!state) {
      mutation.mutate(state, {
        onSuccess: onSuccess
      });
    }
  }, []);
  if (mutation.isLoading || mutation.isIdle) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker$7, {
    t: t,
    data: mutation.data,
    mutation: mutation,
    isSuccess: mutation.isSuccess,
    isLoading: mutation.isIdle || mutation.isLoading
  })), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
    to: "/digit-ui/employee"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CORE_COMMON_GO_TO_HOME")
  }))));
};

var BannerPicker$8 = function BannerPicker(props) {
  var _props$mutation;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Banner, {
    message: props.isSuccess ? t("ENGAGEMENT_SURVEY_DELETED") : t("ENGAGEMENT_SURVEY_DELETE_FAILURE"),
    applicationNumber: (_props$mutation = props.mutation) !== null && _props$mutation !== void 0 && _props$mutation.isSuccess ? props.uuid : '',
    info: props.isSuccess ? t("SURVEY_FORM_ID") : "",
    successful: props.isSuccess
  });
};
var Response$6 = function Response(props) {
  var _state$DocumentEntity;
  var queryClient = reactQuery.useQueryClient();
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var mutation = Digit.Hooks.survey.useDelete();
  var state = props.location.state;
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      queryClient.clear();
      window.history.replaceState(null, 'DELETE_SURVEY_STATE');
    };
    if (!!state) {
      mutation.mutate(state, {
        onSuccess: onSuccess
      });
    }
  }, []);
  if (mutation.isLoading || mutation.isIdle) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(BannerPicker$8, {
    t: t,
    data: mutation.data,
    mutation: mutation,
    uuid: state === null || state === void 0 ? void 0 : (_state$DocumentEntity = state.DocumentEntity) === null || _state$DocumentEntity === void 0 ? void 0 : _state$DocumentEntity.uuid,
    isSuccess: mutation.isSuccess,
    isLoading: mutation.isIdle || mutation.isLoading
  })), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Link, {
    to: "/digit-ui/employee"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CORE_COMMON_GO_TO_HOME")
  }))));
};

var EditSurveyForms = function EditSurveyForms(_ref) {
  var t = _ref.t,
    onEdit = _ref.onEdit,
    menuOptions = _ref.menuOptions,
    initialSurveysConfig = _ref.initialSurveysConfig,
    isFormDisabled = _ref.isFormDisabled,
    isPartiallyEnabled = _ref.isPartiallyEnabled,
    displayMenu = _ref.displayMenu,
    setDisplayMenu = _ref.setDisplayMenu,
    onActionSelect = _ref.onActionSelect,
    isSurveyActive = _ref.isSurveyActive;
  var _useForm = reactHookForm.useForm({
      defaultValues: initialSurveysConfig
    }),
    registerRef = _useForm.register,
    controlSurveyForm = _useForm.control,
    handleSurveyFormSubmit = _useForm.handleSubmit,
    setSurveyFormValue = _useForm.setValue,
    getSurveyFormValues = _useForm.getValues,
    resetSurveyForm = _useForm.reset,
    surveyFormState = _useForm.formState,
    clearSurveyFormsErrors = _useForm.clearErrors;
  React.useEffect(function () {
    registerRef("questions");
  }, []);
  return /*#__PURE__*/React__default.createElement(reactHookForm.FormProvider, {
    register: registerRef,
    control: controlSurveyForm,
    handleSubmit: handleSurveyFormSubmit,
    setValue: setSurveyFormValue,
    getValues: getSurveyFormValues,
    reset: resetSurveyForm,
    formState: surveyFormState,
    clearErrors: clearSurveyFormsErrors
  }, /*#__PURE__*/React__default.createElement("form", {
    onSubmit: handleSurveyFormSubmit(onEdit)
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(SurveyDetailsForms, {
    t: t,
    registerRef: registerRef,
    controlSurveyForm: controlSurveyForm,
    surveyFormState: surveyFormState,
    disableInputs: isFormDisabled,
    enableDescriptionOnly: isPartiallyEnabled,
    surveyFormData: getSurveyFormValues
  }), /*#__PURE__*/React__default.createElement(SurveyFormsMaker, {
    t: t,
    setSurveyConfig: setSurveyFormValue,
    disableInputs: isFormDisabled,
    formsConfig: initialSurveysConfig.questions,
    isPartiallyEnabled: isPartiallyEnabled,
    formDisabled: isFormDisabled
  }), /*#__PURE__*/React__default.createElement(SurveySettingsForms, {
    t: t,
    controlSurveyForm: controlSurveyForm,
    surveyFormState: surveyFormState,
    disableInputs: isFormDisabled,
    enableEndDateTimeOnly: isPartiallyEnabled
  }), /*#__PURE__*/React__default.createElement("span", {
    className: "edit-action-btn"
  }, !isSurveyActive && !isFormDisabled && /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CS_EDIT_SURVEY"),
    submit: "submit",
    disabled: isPartiallyEnabled ? !isPartiallyEnabled : isFormDisabled
  }), isPartiallyEnabled && isSurveyActive && /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CS_EDIT_SURVEY"),
    submit: "submit",
    disabled: isPartiallyEnabled ? !isPartiallyEnabled : isFormDisabled
  })))), /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, displayMenu ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Menu, {
    localeKeyPrefix: "ES_SURVEY",
    options: menuOptions,
    t: t,
    onSelect: onActionSelect
  }) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("ES_COMMON_TAKE_ACTION"),
    onSubmit: function onSubmit() {
      return setDisplayMenu(!displayMenu);
    }
  })));
};

var Heading$7 = function Heading(props) {
  return /*#__PURE__*/React__default.createElement("h1", {
    className: "heading-m"
  }, props.t(props.heading));
};
var Close$8 = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$8 = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$8, null));
};
var ConfirmationQuestion$1 = function ConfirmationQuestion(_ref) {
  var t = _ref.t,
    title = _ref.title;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "confirmation_box"
  }, /*#__PURE__*/React__default.createElement("span", null, " ", t("CONFIRM_DELETE_MSG_NEW"), " ", /*#__PURE__*/React__default.createElement("b", null, " " + title), t("COMPLETELY_DELETE"), " ", /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement("br", null), t("COMPLETELY_DELETE_WARN_MSG")));
};
var DeleteModal = function DeleteModal(_ref2) {
  var t = _ref2.t,
    heading = _ref2.heading,
    surveyTitle = _ref2.surveyTitle,
    closeModal = _ref2.closeModal,
    actionCancelLabel = _ref2.actionCancelLabel,
    actionCancelOnSubmit = _ref2.actionCancelOnSubmit,
    actionSaveLabel = _ref2.actionSaveLabel,
    actionSaveOnSubmit = _ref2.actionSaveOnSubmit;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading$7, {
      t: t,
      heading: heading
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$8, {
      onClick: closeModal
    }),
    actionCancelLabel: t(actionCancelLabel),
    actionCancelOnSubmit: actionCancelOnSubmit,
    actionSaveLabel: t(actionSaveLabel),
    actionSaveOnSubmit: actionSaveOnSubmit,
    formId: "modal-action"
  }, /*#__PURE__*/React__default.createElement(ConfirmationQuestion$1, {
    t: t,
    title: surveyTitle
  }));
};

var Heading$8 = function Heading(props) {
  return /*#__PURE__*/React__default.createElement("h1", {
    className: "heading-m"
  }, props.t(props.heading));
};
var Close$9 = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$9 = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$9, null));
};
var isValidFromDate = function isValidFromDate() {
  return true;
};
var isValidToDate = function isValidToDate() {
  return true;
};
var isValidFromTime = function isValidFromTime() {
  return true;
};
var isValidToTime = function isValidToTime() {
  return true;
};
var MarkActiveModal = function MarkActiveModal(_ref) {
  var _formErrors$fromDate, _formErrors$fromDate2, _formErrors$fromTime, _formErrors$fromTime2, _formErrors$toDate, _formErrors$toDate2, _formErrors$toTime, _formErrors$toTime2;
  var t = _ref.t,
    heading = _ref.heading,
    surveyTitle = _ref.surveyTitle,
    initialValues = _ref.initialValues,
    onSubmit = _ref.onSubmit,
    closeModal = _ref.closeModal,
    actionCancelLabel = _ref.actionCancelLabel,
    actionCancelOnSubmit = _ref.actionCancelOnSubmit,
    actionSaveLabel = _ref.actionSaveLabel,
    actionSaveOnSubmit = _ref.actionSaveOnSubmit;
  var fromDate = initialValues.fromDate,
    fromTime = initialValues.fromTime,
    toDate = initialValues.toDate,
    toTime = initialValues.toTime;
  var _useForm = reactHookForm.useForm({
      defaultValues: {
        fromDate: fromDate,
        fromTime: fromTime,
        toDate: toDate,
        toTime: toTime
      }
    }),
    controlSurveyForm = _useForm.control,
    handleSurveySettingSubmit = _useForm.handleSubmit,
    surveyFormState = _useForm.formState;
  var formErrors = surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.errors;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading$8, {
      t: t,
      heading: heading
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$9, {
      onClick: closeModal
    }),
    actionCancelLabel: t(actionCancelLabel),
    actionCancelOnSubmit: actionCancelOnSubmit,
    actionSaveLabel: t(actionSaveLabel),
    actionSaveOnSubmit: handleSurveySettingSubmit(actionSaveOnSubmit),
    formId: "modal-action",
    headerBarMainStyle: {
      marginLeft: "20px"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
    style: {
      boxShadow: "none"
    }
  }, /*#__PURE__*/React__default.createElement("p", null, t("CONFIRM_ACTIVE_SURVEY_MSG"), " ", /*#__PURE__*/React__default.createElement("br", null), " ", surveyTitle, " ", t("CONFIRM_ACTIVE_SURVEY_MSG_END")), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement("form", {
    onSubmit: handleSurveySettingSubmit(onSubmit)
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_SURVEY_START_DATE")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: controlSurveyForm,
    name: "fromDate",
    defaultValue: surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.fromDate,
    rules: {
      required: true,
      validate: {
        isValidFromDate: isValidFromDate
      }
    },
    render: function render(_ref2) {
      var onChange = _ref2.onChange,
        value = _ref2.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "date",
        isRequired: true,
        onChange: onChange,
        defaultValue: value
      });
    }
  }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.fromDate) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$fromDate = formErrors.fromDate) === null || _formErrors$fromDate === void 0 ? void 0 : _formErrors$fromDate.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.fromDate) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$fromDate2 = formErrors.fromDate) === null || _formErrors$fromDate2 === void 0 ? void 0 : _formErrors$fromDate2.type) === "isValidToDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID"))), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_SURVEY_START_TIME")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: controlSurveyForm,
    name: "fromTime",
    defaultValue: surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.fromTime,
    rules: {
      required: true,
      validate: {
        isValidFromTime: isValidFromTime
      }
    },
    render: function render(_ref3) {
      var onChange = _ref3.onChange,
        value = _ref3.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "time",
        isRequired: true,
        onChange: onChange,
        defaultValue: value
      });
    }
  }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.fromTime) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$fromTime = formErrors.fromTime) === null || _formErrors$fromTime === void 0 ? void 0 : _formErrors$fromTime.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.fromTime) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$fromTime2 = formErrors.fromTime) === null || _formErrors$fromTime2 === void 0 ? void 0 : _formErrors$fromTime2.type) === "isValidToDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID"))), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_SURVEY_END_DATE")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: controlSurveyForm,
    name: "toDate",
    defaultValue: surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.toDate,
    rules: {
      required: true,
      validate: {
        isValidToDate: isValidToDate
      }
    },
    render: function render(_ref4) {
      var onChange = _ref4.onChange,
        value = _ref4.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "date",
        isRequired: true,
        onChange: onChange,
        defaultValue: value
      });
    }
  }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.toDate) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$toDate = formErrors.toDate) === null || _formErrors$toDate === void 0 ? void 0 : _formErrors$toDate.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.toDate) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$toDate2 = formErrors.toDate) === null || _formErrors$toDate2 === void 0 ? void 0 : _formErrors$toDate2.type) === "isValidToDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID")), " "), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_SURVEY_END_TIME")), /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
    control: controlSurveyForm,
    name: "toTime",
    defaultValue: surveyFormState === null || surveyFormState === void 0 ? void 0 : surveyFormState.toTime,
    rules: {
      required: true,
      validate: {
        isValidToTime: isValidToTime
      }
    },
    render: function render(_ref5) {
      var onChange = _ref5.onChange,
        value = _ref5.value;
      return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
        type: "time",
        isRequired: true,
        onChange: onChange,
        defaultValue: value
      });
    }
  }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.toTime) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$toTime = formErrors.toTime) === null || _formErrors$toTime === void 0 ? void 0 : _formErrors$toTime.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors.toTime) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$toTime2 = formErrors.toTime) === null || _formErrors$toTime2 === void 0 ? void 0 : _formErrors$toTime2.type) === "isValidToDate" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_INVALID"))))));
};

var Heading$9 = function Heading(props) {
  return /*#__PURE__*/React__default.createElement("h1", {
    className: "heading-m"
  }, props.t(props.heading));
};
var Close$a = function Close() {
  return /*#__PURE__*/React__default.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    fill: "#FFFFFF"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M0 0h24v24H0V0z",
    fill: "none"
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"
  }));
};
var CloseBtn$a = function CloseBtn(props) {
  return /*#__PURE__*/React__default.createElement("div", {
    className: "icon-bg-secondary",
    onClick: props.onClick
  }, /*#__PURE__*/React__default.createElement(Close$a, null));
};
var ConfirmationQuestion$2 = function ConfirmationQuestion(_ref) {
  var t = _ref.t,
    title = _ref.title;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "confirmation_box"
  }, /*#__PURE__*/React__default.createElement("span", null, " ", t("CONFIRM_INACTIVE_SURVEY_MSG_NEW"), " ", /*#__PURE__*/React__default.createElement("b", null, " " + title), t("CONFIRM_INACTIVE_SURVEY_MSG_TO_INACTIVE"), /*#__PURE__*/React__default.createElement("br", null), /*#__PURE__*/React__default.createElement("br", null), t("CONFIRM_INACTIVE_SURVEY_WARN_MSG")));
};

var MarkInActiveModal = function MarkInActiveModal(_ref2) {
  var t = _ref2.t,
    heading = _ref2.heading,
    surveyTitle = _ref2.surveyTitle,
    closeModal = _ref2.closeModal,
    actionCancelLabel = _ref2.actionCancelLabel,
    actionCancelOnSubmit = _ref2.actionCancelOnSubmit,
    actionSaveLabel = _ref2.actionSaveLabel,
    actionSaveOnSubmit = _ref2.actionSaveOnSubmit;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Modal, {
    headerBarMain: /*#__PURE__*/React__default.createElement(Heading$9, {
      t: t,
      heading: heading
    }),
    headerBarEnd: /*#__PURE__*/React__default.createElement(CloseBtn$a, {
      onClick: closeModal
    }),
    actionCancelLabel: t(actionCancelLabel),
    actionCancelOnSubmit: actionCancelOnSubmit,
    actionSaveLabel: t(actionSaveLabel),
    actionSaveOnSubmit: actionSaveOnSubmit,
    formId: "modal-action"
  }, /*#__PURE__*/React__default.createElement(ConfirmationQuestion$2, {
    t: t,
    title: surveyTitle
  }));
};

var filterQuestion = function filterQuestion(question) {
  if (!question) return;
  if (question.type !== "Multiple Choice" || question.type !== "Check Boxes") {
    delete question.options;
  }
  return _extends({}, question, {
    type: answerTypeEnum[question.type]
  });
};

var TypeAnswerEnum = {
  SHORT_ANSWER_TYPE: "Short Answer",
  LONG_ANSWER_TYPE: "Paragraph",
  MULTIPLE_ANSWER_TYPE: "Multiple Choice",
  CHECKBOX_ANSWER_TYPE: "Check Boxes",
  DATE_ANSWER_TYPE: "Date",
  TIME_ANSWER_TYPE: "Time"
};
var SurveyDetails = function SurveyDetails(_ref) {
  var isMobile = window.Digit.Utils.browser.isMobile();
  var _useParams = reactRouterDom.useParams(),
    id = _useParams.id;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _useState = React.useState(false),
    showModal = _useState[0],
    setShowModal = _useState[1];
  var _useState2 = React.useState(true),
    isFormDisabled = _useState2[0],
    setIsFormDisabled = _useState2[1];
  var _useState3 = React.useState(false),
    isFormPartiallyEnabled = _useState3[0],
    setFormPartiallyEnabled = _useState3[1];
  var _useState4 = React.useState(false),
    displayMenu = _useState4[0],
    setDisplayMenu = _useState4[1];
  var _useState5 = React.useState(undefined),
    userAction = _useState5[0],
    setUserAction = _useState5[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var tenantIdForInboxSearch = window.Digit.SessionStorage.get("CITIZENSURVEY.INBOX").searchForm.tenantIds.code;
  var _Digit$Hooks$survey$u = Digit.Hooks.survey.useSearch({
      tenantIds: tenantIdForInboxSearch,
      uuid: id
    }, {
      select: function select(data) {
        var _data$Surveys;
        var surveyObj = data === null || data === void 0 ? void 0 : (_data$Surveys = data.Surveys) === null || _data$Surveys === void 0 ? void 0 : _data$Surveys[0];
        return {
          uuid: surveyObj.uuid,
          title: surveyObj.title,
          description: surveyObj.description,
          collectCitizenInfo: {
            code: surveyObj.collectCitizenInfo
          },
          fromDate: format(new Date(surveyObj.startDate), "yyyy-MM-dd"),
          toDate: format(new Date(surveyObj.endDate), "yyyy-MM-dd"),
          fromTime: format(new Date(surveyObj.startDate), "hh:mm"),
          toTime: format(new Date(surveyObj.endDate), "hh:mm"),
          questions: surveyObj.questions.map(function (_ref2) {
            var questionStatement = _ref2.questionStatement,
              type = _ref2.type,
              required = _ref2.required,
              options = _ref2.options,
              uuid = _ref2.uuid,
              surveyId = _ref2.surveyId;
            return {
              questionStatement: questionStatement,
              type: TypeAnswerEnum[type],
              required: required,
              options: options,
              uuid: uuid,
              surveyId: surveyId
            };
          }),
          status: surveyObj.status
        };
      }
    }),
    isLoading = _Digit$Hooks$survey$u.isLoading,
    surveyData = _Digit$Hooks$survey$u.data;
  var isSurveyActive = React.useMemo(function () {
    var surveyStartTime = new Date((surveyData === null || surveyData === void 0 ? void 0 : surveyData.fromDate) + " " + (surveyData === null || surveyData === void 0 ? void 0 : surveyData.fromTime)).getTime();
    var surveyEndTime = new Date((surveyData === null || surveyData === void 0 ? void 0 : surveyData.toDate) + " " + (surveyData === null || surveyData === void 0 ? void 0 : surveyData.toTime)).getTime();
    var currentTime = new Date().getTime();
    if (surveyStartTime < currentTime && currentTime < surveyEndTime) {
      return true;
    }
    return false;
  }, [surveyData === null || surveyData === void 0 ? void 0 : surveyData.fromDate, surveyData === null || surveyData === void 0 ? void 0 : surveyData.fromTime, surveyData === null || surveyData === void 0 ? void 0 : surveyData.toDate, surveyData === null || surveyData === void 0 ? void 0 : surveyData.toTime]);
  function onActionSelect(action) {
    if (action === "EDIT") {
      if (isSurveyActive) {
        setFormPartiallyEnabled(!isFormPartiallyEnabled);
      } else {
        setIsFormDisabled(!isFormDisabled);
      }
      setUserAction("EDIT");
    }
    if (action === "INACTIVE") {
      setShowModal(true);
      setUserAction("INACTIVE");
    }
    if (action === "ACTIVE") {
      setShowModal(true);
      setUserAction("ACTIVE");
    }
    if (action === "DELETE") {
      setShowModal(true);
      setUserAction("DELETE");
    }
    setDisplayMenu(false);
  }
  var onEdit = function onEdit(data) {
    var _tenantIds$;
    var collectCitizenInfo = data.collectCitizenInfo,
      title = data.title,
      description = data.description,
      tenantIds = data.tenantIds,
      fromDate = data.fromDate,
      toDate = data.toDate,
      fromTime = data.fromTime,
      toTime = data.toTime,
      questions = data.questions;
    var mappedQuestions = mapQuestions(questions);
    var details = {
      SurveyEntity: {
        uuid: surveyData.uuid,
        tenantId: (_tenantIds$ = tenantIds[0]) === null || _tenantIds$ === void 0 ? void 0 : _tenantIds$.code,
        title: title,
        description: description,
        collectCitizenInfo: collectCitizenInfo.code,
        startDate: new Date(fromDate + " " + fromTime).getTime(),
        endDate: new Date(toDate + " " + toTime).getTime(),
        questions: mappedQuestions,
        status: isSurveyActive ? "ACTIVE" : "INACTIVE"
      }
    };

    history.push("/digit-ui/employee/engagement/surveys/update-response", details);
  };
  var handleDelete = function handleDelete() {
    var details = {
      SurveyEntity: _extends({}, surveyData, {
        collectCitizenInfo: surveyData.collectCitizenInfo.code
      })
    };
    history.push("/digit-ui/employee/engagement/surveys/delete-response", details);
  };

  var handleMarkActive = function handleMarkActive(data) {
    var fromDate = data.fromDate,
      toDate = data.toDate,
      fromTime = data.fromTime,
      toTime = data.toTime;
    var details = {
      SurveyEntity: _extends({}, surveyData, {
        status: "ACTIVE",
        startDate: new Date(fromDate + " " + fromTime).getTime(),
        endDate: new Date(toDate + " " + toTime).getTime(),
        collectCitizenInfo: surveyData.collectCitizenInfo.code,
        questions: surveyData.questions.map(filterQuestion),
        tenantId: tenantId
      })
    };
    history.push("/digit-ui/employee/engagement/surveys/update-response", details);
  };
  var handleMarkInactive = function handleMarkInactive() {
    var details = {
      SurveyEntity: _extends({}, surveyData, {
        questions: surveyData.questions.map(filterQuestion),
        status: "INACTIVE",
        collectCitizenInfo: surveyData.collectCitizenInfo.code
      })
    };
    history.push("/digit-ui/employee/engagement/surveys/update-response", details);
  };
  var actionMenuOptions = React.useMemo(function () {
    var options = ["EDIT", "DELETE"];
    if (isSurveyActive && (surveyData === null || surveyData === void 0 ? void 0 : surveyData.status) === "ACTIVE") {
      options.splice(1, 0, "INACTIVE");
    } else if (!isSurveyActive) {
      options.splice(1, 0, "ACTIVE");
    }
    return options;
  }, [isSurveyActive, surveyData === null || surveyData === void 0 ? void 0 : surveyData.status]);
  if (isLoading) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t("CS_COMMON_SURVEYS")), /*#__PURE__*/React__default.createElement(EditSurveyForms, {
    t: t,
    onEdit: onEdit,
    menuOptions: actionMenuOptions,
    displayMenu: displayMenu,
    isFormDisabled: isFormDisabled,
    isPartiallyEnabled: isFormPartiallyEnabled,
    setDisplayMenu: setDisplayMenu,
    onActionSelect: onActionSelect,
    initialSurveysConfig: surveyData,
    isSurveyActive: isSurveyActive,
    formDisabled: isFormDisabled
  }), showModal && userAction === "DELETE" && /*#__PURE__*/React__default.createElement(DeleteModal, {
    t: t,
    heading: "CONFIRM_DELETE_SURVEY",
    surveyTitle: surveyData.title,
    closeModal: function closeModal() {
      return setShowModal(false);
    },
    actionCancelLabel: "CS_COMMON_CANCEL",
    actionCancelOnSubmit: function actionCancelOnSubmit() {
      return setShowModal(false);
    },
    actionSaveLabel: "ES_COMMON_DEL",
    actionSaveOnSubmit: handleDelete
  }), showModal && userAction === "ACTIVE" && /*#__PURE__*/React__default.createElement(MarkActiveModal, {
    t: t,
    heading: "CONFIRM_MARKACTIVE_SURVEY",
    initialValues: surveyData,
    closeModal: function closeModal() {
      return setShowModal(false);
    },
    actionCancelLabel: "CS_COMMON_CANCEL",
    actionCancelOnSubmit: function actionCancelOnSubmit() {
      return setShowModal(false);
    },
    actionSaveLabel: "ES_COMMON_SAVE",
    actionSaveOnSubmit: handleMarkActive,
    onSubmit: handleMarkActive,
    surveyTitle: surveyData.title
  }), showModal && userAction === "INACTIVE" && /*#__PURE__*/React__default.createElement(MarkInActiveModal, {
    t: t,
    heading: "CONFIRM_MARKINACTIVE_SURVEY",
    surveyTitle: surveyData.title,
    closeModal: function closeModal() {
      return setShowModal(false);
    },
    actionCancelLabel: "CS_COMMON_CANCEL",
    actionCancelOnSubmit: function actionCancelOnSubmit() {
      return setShowModal(false);
    },
    actionSaveLabel: "ES_COMMON_Y_MARKINACTIVE",
    actionSaveOnSubmit: handleMarkInactive
  }));
};

var CitizenSurveyQuestion = function CitizenSurveyQuestion(_ref) {
  var t = _ref.t,
    question = _ref.question,
    control = _ref.control,
    register = _ref.register,
    formState = _ref.formState,
    formDisabled = _ref.formDisabled;
  var formErrors = formState === null || formState === void 0 ? void 0 : formState.errors;
  if (!question) return;
  var displayAnswerField = function displayAnswerField(answerType) {
    var _formErrors$question$, _formErrors$question$2, _formErrors$question$3, _formErrors$question$4, _formErrors$question$5, _formErrors$question$6, _formErrors$question$7, _formErrors$question$8;
    switch (answerType) {
      case "SHORT_ANSWER_TYPE":
        return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
          name: question.uuid,
          disabled: formDisabled,
          type: "text",
          inputRef: register({
            maxLength: {
              value: 200,
              message: t("EXCEEDS_200_CHAR_LIMIT")
            },
            required: question.required
          })
        }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors[question.uuid]) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$question$ = formErrors[question.uuid]) === null || _formErrors$question$ === void 0 ? void 0 : _formErrors$question$.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("CS_COMMON_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors[question.uuid]) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$question$2 = formErrors[question.uuid]) === null || _formErrors$question$2 === void 0 ? void 0 : _formErrors$question$2.type) === "maxLength" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EXCEEDS_200_CHAR_LIMIT")));
      case "LONG_ANSWER_TYPE":
        return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextArea, {
          name: question.uuid,
          disabled: formDisabled,
          inputRef: register({
            maxLength: {
              value: 500,
              message: t("EXCEEDS_500_CHAR_LIMIT")
            },
            required: question.required
          })
        }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors[question.uuid]) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$question$3 = formErrors[question.uuid]) === null || _formErrors$question$3 === void 0 ? void 0 : _formErrors$question$3.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("CS_COMMON_REQUIRED")), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors[question.uuid]) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$question$4 = formErrors[question.uuid]) === null || _formErrors$question$4 === void 0 ? void 0 : _formErrors$question$4.type) === "maxLength" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EXCEEDS_500_CHAR_LIMIT")));
      case "MULTIPLE_ANSWER_TYPE":
        return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          control: control,
          name: question.uuid
          ,
          rules: {
            required: question.required
          },
          render: function render(_ref2) {
            var onChange = _ref2.onChange,
              value = _ref2.value;
            return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RadioButtons, {
              disabled: formDisabled,
              onSelect: onChange,
              selectedOption: value,
              optionsKey: "",
              options: [].concat(question.options)
            });
          }
        }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors[question.uuid]) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$question$5 = formErrors[question.uuid]) === null || _formErrors$question$5 === void 0 ? void 0 : _formErrors$question$5.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")));
      case "CHECKBOX_ANSWER_TYPE":
        return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          control: control,
          name: question.uuid
          ,
          render: function render(_ref3) {
            var _onChange = _ref3.onChange,
              value = _ref3.value;
            return /*#__PURE__*/React__default.createElement("div", {
              className: "align-columns"
            }, question.options.map(function (option) {
              return /*#__PURE__*/React__default.createElement(digitUiReactComponents.CheckBox, {
                disabled: formDisabled,
                key: option,
                onChange: function onChange(e) {
                  if (e.target.checked) {
                    _onChange([option].concat(value ? value : []));
                  } else {
                    value && _onChange(value.filter(function (item) {
                      return item !== option;
                    }));
                  }
                },
                checked: !!(value !== null && value !== void 0 && value.find(function (e) {
                  return e === option;
                })),
                label: option
              });
            }));
          }
        }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors[question.uuid]) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$question$6 = formErrors[question.uuid]) === null || _formErrors$question$6 === void 0 ? void 0 : _formErrors$question$6.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("CS_COMMON_REQUIRED")));

      case "DATE_ANSWER_TYPE":
        return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          control: control,
          name: question.uuid
          ,
          rules: {
            required: question.required
          },

          render: function render(_ref4) {
            var onChange = _ref4.onChange,
              value = _ref4.value;
            return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
              disabled: formDisabled,
              type: "date",
              onChange: onChange,
              defaultValue: value
            });
          }
        }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors[question.uuid]) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$question$7 = formErrors[question.uuid]) === null || _formErrors$question$7 === void 0 ? void 0 : _formErrors$question$7.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")));
      case "TIME_ANSWER_TYPE":
        return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(reactHookForm.Controller, {
          control: control,
          name: question.uuid
          ,
          rules: {
            required: question.required
          },

          render: function render(_ref5) {
            var onChange = _ref5.onChange,
              value = _ref5.value;
            return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
              type: "time",
              disabled: formDisabled,
              onChange: onChange,
              defaultValue: value
            });
          }
        }), formErrors && (formErrors === null || formErrors === void 0 ? void 0 : formErrors[question.uuid]) && (formErrors === null || formErrors === void 0 ? void 0 : (_formErrors$question$8 = formErrors[question.uuid]) === null || _formErrors$question$8 === void 0 ? void 0 : _formErrors$question$8.type) === "required" && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabelError, null, t("EVENTS_TO_DATE_ERROR_REQUIRED")));
      default:
        return /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
          name: question.uuid,
          disabled: formDisabled,
          type: "text",
          inputRef: register({
            maxLength: {
              value: 60,
              message: t("EXCEEDS_60_CHAR_LIMIT")
            },
            required: question.required
          })
        });
    }
  };
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement("div", {
    className: "surveyQuestion-wrapper"
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "question-title"
  }, question.questionStatement), /*#__PURE__*/React__default.createElement("span", null, displayAnswerField(question.type))));
};

var CitizenSurveyForm = function CitizenSurveyForm(_ref) {
  var _surveyData$title;
  var surveyData = _ref.surveyData,
    onFormSubmit = _ref.onFormSubmit,
    submitDisabled = _ref.submitDisabled,
    formDisabled = _ref.formDisabled,
    formDefaultValues = _ref.formDefaultValues;
  var _useForm = reactHookForm.useForm({
      defaultValues: formDefaultValues
    }),
    registerRef = _useForm.register,
    controlSurveyForm = _useForm.control,
    handleSurveyFormSubmit = _useForm.handleSubmit,
    getSurveyFormValues = _useForm.getValues,
    surveyFormState = _useForm.formState;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "citizenSurvey-wrapper"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, surveyData === null || surveyData === void 0 ? void 0 : (_surveyData$title = surveyData.title) === null || _surveyData$title === void 0 ? void 0 : _surveyData$title.toUpperCase()), /*#__PURE__*/React__default.createElement("form", {
    onSubmit: handleSurveyFormSubmit(onFormSubmit)
  }, surveyData.questions.length ? surveyData.questions.map(function (config, index) {
    return /*#__PURE__*/React__default.createElement(CitizenSurveyQuestion, {
      key: index,
      t: t,
      question: config,
      control: controlSurveyForm,
      register: registerRef,
      values: getSurveyFormValues,
      formState: surveyFormState,
      formDisabled: formDisabled
    });
  }) : null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.ActionBar, null, !submitDisabled && /*#__PURE__*/React__default.createElement(digitUiReactComponents.SubmitBar, {
    label: t("CS_SUBMIT_SURVEY"),
    submit: "submit"
  }))));
};

var bindQuesWithAns = function bindQuesWithAns(ques, ans) {
  var data = [];
  ques.map(function (ques) {
    var obj = {};
    if (ques.type === "Check Boxes") {
      obj["type"] = ques.type;
      obj["questionStatement"] = ques.questionStatement;
      obj["options"] = ques.options;
      obj["answers"] = [];
      ans.map(function (ans) {
        if (ques.uuid === ans.questionId) {
          obj["answers"] = [].concat(obj["answers"], [ans.answer]);
        }
      });
    } else {
      var type = ques.type;
      obj["type"] = type;
      obj["questionStatement"] = ques.questionStatement;
      obj["options"] = ques.options;
      ans.map(function (ans) {
        if (ques.uuid === ans.questionId) {
          var answers = obj["answers"];
          if (answers) answers.push(ans.answer[0]);
          obj["answers"] = answers ? answers : [ans.answer[0]];
        }
      });
    }
    data.push(obj);
  });
  return data;
};

var WhoHasResponded = function WhoHasResponded(_ref) {
  var t = _ref.t,
    userInfo = _ref.userInfo;
  var data = Object.entries(userInfo);
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      "margin": "30px"
    }
  }, /*#__PURE__*/React__default.createElement("header", {
    style: {
      "fontSize": "30px",
      "fontWeight": "bold"
    }
  }, t("WHO_RESPONDED")), /*#__PURE__*/React__default.createElement("div", {
    style: {
      "display": "flex",
      "padding": "8px 4px",
      "background-color": "#FAFAFA",
      "border": "1px solid #D6D5D4",
      "boxSizing": "borderBox",
      "borderRadius": "4px",
      "marginTop": "20px",
      "marginBottom": "20px"
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    style: {
      "flex": "50%",
      "padding": "10px"
    }
  }, /*#__PURE__*/React__default.createElement("header", {
    style: {
      "fontWeight": "bold",
      "fontSize": "25px"
    }
  }, "Email"), data.map(function (user) {
    return /*#__PURE__*/React__default.createElement("p", {
      style: {
        "margin": "10px 0px 10px 0px"
      }
    }, user[1]);
  })), /*#__PURE__*/React__default.createElement("div", {
    style: {
      "flex": "50%",
      "padding": "10px"
    }
  }, /*#__PURE__*/React__default.createElement("header", {
    style: {
      "fontWeight": "bold",
      "fontSize": "25px"
    }
  }, "Phone Number"), data.map(function (user) {
    return /*#__PURE__*/React__default.createElement("p", {
      style: {
        "margin": "10px 0px 10px 0px"
      }
    }, user[0]);
  }))));
};

var SurveyDetailsView = function SurveyDetailsView(_ref) {
  var surveyTitle = _ref.surveyTitle,
    surveyDesc = _ref.surveyDesc,
    t = _ref.t;
  var ulbs = Digit.SessionStorage.get("ENGAGEMENT_TENANTS");
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var userInfo = Digit.UserService.getUser().info;
  var userUlbs = ulbs.filter(function (ulb) {
    var _userInfo$roles;
    return userInfo === null || userInfo === void 0 ? void 0 : (_userInfo$roles = userInfo.roles) === null || _userInfo$roles === void 0 ? void 0 : _userInfo$roles.some(function (role) {
      return (role === null || role === void 0 ? void 0 : role.tenantId) === (ulb === null || ulb === void 0 ? void 0 : ulb.code);
    });
  });
  var selectedTenat = React.useMemo(function () {
    var filtered = ulbs.filter(function (item) {
      return item.code === tenantId;
    });
    return filtered;
  }, [ulbs]);
  return /*#__PURE__*/React__default.createElement("div", {
    className: "surveydetailsform-wrapper"
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("LABEL_FOR_ULB") + " * :"), /*#__PURE__*/React__default.createElement("div", {
    style: {
      display: "grid",
      gridAutoFlow: "row"
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Dropdown, {
    allowMultiselect: true,
    optionKey: "i18nKey",
    option: userUlbs,
    selected: selectedTenat,
    keepNull: true,
    disable: true,
    t: t
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
    key: "tag",
    text: userUlbs[0].name
  }))), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("CS_SURVEY_NAME")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    name: "title",
    type: "text",
    disable: true,
    value: surveyTitle
  })), /*#__PURE__*/React__default.createElement("span", {
    className: "surveyformfield"
  }, /*#__PURE__*/React__default.createElement("label", null, t("CS_SURVEY_DESCRIPTION")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    name: "description",
    type: "text",
    disable: true,
    value: surveyDesc
  })));
};

var getData = function getData(data) {
  var options = data.options;
  var answers = data.answers;
  var processedData = [];
  options.map(function (option) {
    return processedData.push({
      name: option,
      value: 0
    });
  });
  answers.map(function (ans, index) {
    processedData.map(function (element, i) {
      if (element.name === ans) processedData[i].value = processedData[i].value + 1;
    });
  });
  return processedData;
};
var COLORS = ["#8E29BF", "#FBC02D", "#048BD0", "#EA8A3B", "#0BABDE", "#800080", "#ee82ee", "#616161", "#3cb371", "#6a5acd"];
var RADIAN = Math.PI / 180;
var renderCustomizedLabel = function renderCustomizedLabel(_ref) {
  var cx = _ref.cx,
    cy = _ref.cy,
    midAngle = _ref.midAngle,
    innerRadius = _ref.innerRadius,
    outerRadius = _ref.outerRadius,
    percent = _ref.percent;
  var radius = innerRadius + (outerRadius - innerRadius) * 0.5;
  var x = cx + radius * Math.cos(-midAngle * RADIAN);
  var y = cy + radius * Math.sin(-midAngle * RADIAN);
  return /*#__PURE__*/React__default.createElement("text", {
    x: x,
    y: y,
    fill: "white",
    textAnchor: x > cx ? "start" : "end",
    dominantBaseline: "central"
  }, (percent * 100).toFixed(0) + "%");
};
var renderLegend = function renderLegend(props) {
  var payload = props.payload;
  return /*#__PURE__*/React__default.createElement("ul", {
    style: {
      "listStyle": "disc"
    }
  }, payload.map(function (entry, index) {
    return /*#__PURE__*/React__default.createElement("li", {
      key: "item-" + index,
      style: {
        "display": "list-item",
        "color": entry.color,
        "fontSize": "19px"
      }
    }, entry.value);
  }));
};
var McqChart = function McqChart(props) {
  var data = getData(props.data);
  return /*#__PURE__*/React__default.createElement(recharts.PieChart, {
    width: 400,
    height: 400
  }, /*#__PURE__*/React__default.createElement(recharts.Pie, {
    data: data,
    cx: 200,
    cy: 200,
    labelLine: false,
    label: renderCustomizedLabel,
    outerRadius: 120,
    fill: "#8884d8",
    dataKey: "value"
  }, data.map(function (entry, index) {
    return /*#__PURE__*/React__default.createElement(recharts.Cell, {
      key: "cell-" + index,
      fill: COLORS[index % COLORS.length]
    });
  })), /*#__PURE__*/React__default.createElement(recharts.Tooltip, null), /*#__PURE__*/React__default.createElement(recharts.Legend, {
    content: renderLegend,
    width: 100,
    align: "right",
    wrapperStyle: {
      top: 40,
      right: 20,
      left: 500,
      backgroundColor: '#FAFAFA',
      borderRadius: 3,
      lineHeight: '40px'
    }
  }));
};

var formObj = function formObj(data) {
  var checkBoxData = [];
  var options = data.options;
  var answers = data.answers;
  options.map(function (option) {
    var obj = {};
    obj["name"] = option;
    obj["value"] = 0;
    answers.map(function (ans) {
      ans.map(function (el) {
        if (el === option) {
          obj["value"] = obj["value"] + 1;
        }
      });
    });
    checkBoxData.push(obj);
  });
  return checkBoxData;
};
var CheckBoxChart = function CheckBoxChart(props) {
  var datav1 = formObj(props.data);
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      "padding": "10px",
      "width": "700px",
      "height": "260px",
      "backgroundColor": "#fafafa"
    }
  }, /*#__PURE__*/React__default.createElement(recharts.ResponsiveContainer, null, /*#__PURE__*/React__default.createElement(recharts.BarChart, {
    data: datav1,
    layout: "vertical",
    margin: {
      top: 0,
      right: 50,
      left: 0,
      bottom: 0
    },
    barCategoryGap: 8
  }, /*#__PURE__*/React__default.createElement(recharts.CartesianGrid, {
    strokeDasharray: "3 3"
  }), /*#__PURE__*/React__default.createElement(recharts.XAxis, {
    type: "number"
  }), /*#__PURE__*/React__default.createElement(recharts.YAxis, {
    type: "category",
    width: 150,
    padding: {
      left: 20
    },
    dataKey: "name"
  }), /*#__PURE__*/React__default.createElement(recharts.Bar, {
    dataKey: "value",
    fill: "#048BD0"
  }), /*#__PURE__*/React__default.createElement(recharts.Tooltip, null))));
};

var transformDate = function transformDate(date) {
  var split = date.split('-');
  var month = split[1];
  var year = split[0];
  var day = split[2];
  var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  return {
    day: day,
    date: monthNames[month - 1] + " " + year
  };
};

function transformTime(time) {
  time = time.toString().match(/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];
  if (time.length > 1) {
    time = time.slice(1);
    time[5] = +time[0] < 12 ? ' AM' : ' PM';
    time[0] = +time[0] % 12 || 12;
  }

  return time.join('');
}

var getUserData = function getUserData(data) {
  var obj = {};
  data.map(function (ans) {
    obj[ans.mobileNumber] = ans.emailId;
  });
  return obj;
};
var displayResult = function displayResult(ques, ans, type, resCount) {
  switch (type) {
    case "Short Answer":
      return (
        /*#__PURE__*/
        React__default.createElement("div", {
          style: {
            "margin": "30px"
          }
        }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, null, ques.questionStatement), /*#__PURE__*/React__default.createElement("header", {
          style: {
            "fontWeight": "bold"
          }
        }, resCount + " Responses"), /*#__PURE__*/React__default.createElement("div", {
          className: "responses-container"
        }, ans.map(function (el) {
          return /*#__PURE__*/React__default.createElement("div", {
            className: "response-result responses-container-line"
          }, el, /*#__PURE__*/React__default.createElement(digitUiReactComponents.BreakLine, {
            style: {
              "marginTop": "10px"
            }
          }));
        })))
      );
    case "Date":
      return /*#__PURE__*/React__default.createElement("div", {
        style: {
          "margin": "30px"
        }
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, null, ques.questionStatement), /*#__PURE__*/React__default.createElement("header", {
        style: {
          "fontWeight": "bold"
        }
      }, resCount + " Responses"), /*#__PURE__*/React__default.createElement("div", {
        className: "date-container"
      }, ans.map(function (el) {
        return /*#__PURE__*/React__default.createElement("div", {
          className: "date-response"
        }, /*#__PURE__*/React__default.createElement("div", null, transformDate(el).date), /*#__PURE__*/React__default.createElement("div", {
          className: "divide"
        }), /*#__PURE__*/React__default.createElement("div", null, transformDate(el).day));
      })));
    case "Time":
      return /*#__PURE__*/React__default.createElement("div", {
        style: {
          "margin": "30px"
        }
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, null, ques.questionStatement), /*#__PURE__*/React__default.createElement("header", {
        style: {
          "fontWeight": "bold"
        }
      }, resCount + " Responses"), /*#__PURE__*/React__default.createElement("div", {
        className: "date-container"
      }, ans.map(function (el) {
        return /*#__PURE__*/React__default.createElement("div", {
          className: "date-response"
        }, /*#__PURE__*/React__default.createElement("div", null, el), /*#__PURE__*/React__default.createElement("div", {
          className: "divide"
        }), /*#__PURE__*/React__default.createElement("div", null, transformTime(el)));
      })));
    case "Paragraph":
      return (
        /*#__PURE__*/
        React__default.createElement("div", {
          style: {
            "margin": "30px"
          }
        }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, null, ques.questionStatement), /*#__PURE__*/React__default.createElement("header", {
          style: {
            "fontWeight": "bold"
          }
        }, resCount + " Responses"), /*#__PURE__*/React__default.createElement("div", {
          className: "responses-container"
        }, ans.map(function (el) {
          return /*#__PURE__*/React__default.createElement("div", {
            className: "response-result responses-container-line"
          }, el, /*#__PURE__*/React__default.createElement(digitUiReactComponents.BreakLine, {
            style: {
              "marginTop": "10px"
            }
          }));
        })))
      );
    case "Check Boxes":
      return (
        /*#__PURE__*/
        React__default.createElement("div", {
          style: {
            "margin": "30px"
          }
        }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, null, ques.questionStatement), /*#__PURE__*/React__default.createElement("header", {
          style: {
            "fontWeight": "bold"
          }
        }, resCount + " Responses"), /*#__PURE__*/React__default.createElement("div", {
          className: "responses-container",
          style: {
            "padding": "30px"
          }
        }, /*#__PURE__*/React__default.createElement(CheckBoxChart, {
          data: ques
        })))
      );
    case "Multiple Choice":
      return /*#__PURE__*/React__default.createElement("div", {
        style: {
          "margin": "30px"
        }
      }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardSectionHeader, null, ques.questionStatement), /*#__PURE__*/React__default.createElement("header", {
        style: {
          "fontWeight": "bold"
        }
      }, resCount + " Responses"), /*#__PURE__*/React__default.createElement("div", {
        className: "responses-container"
      }, /*#__PURE__*/React__default.createElement(McqChart, {
        data: ques
      })));
  }
};
var SurveyResultsView = function SurveyResultsView(_ref) {
  var surveyInfo = _ref.surveyInfo,
    responsesInfoMutation = _ref.responsesInfoMutation;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useState = React.useState(null),
    data = _useState[0],
    setData = _useState[1];
  var _useState2 = React.useState(null),
    userInfo = _useState2[0],
    setUserInfo = _useState2[1];
  React.useEffect(function () {
    if (responsesInfoMutation.isSuccess) {
      var dp = bindQuesWithAns(surveyInfo === null || surveyInfo === void 0 ? void 0 : surveyInfo.questions, responsesInfoMutation.data.answers);
      setData(dp);
      var ue = getUserData(responsesInfoMutation.data.answers);
      setUserInfo(ue);
    }
  }, [responsesInfoMutation]);

  if (!data) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardHeader, null, "Surveys"), /*#__PURE__*/React__default.createElement("div", {
    style: {
      "margin": "30px"
    }
  }, /*#__PURE__*/React__default.createElement(SurveyDetailsView, {
    surveyTitle: surveyInfo.title,
    surveyDesc: surveyInfo.description,
    t: t
  })), /*#__PURE__*/React__default.createElement(WhoHasResponded, {
    t: t,
    userInfo: userInfo
  }), data.map(function (element) {
    return displayResult(element, element.answers, element.type, element.answers.length);
  }));
};

var TypeAnswerEnum$1 = {
  SHORT_ANSWER_TYPE: "Short Answer",
  LONG_ANSWER_TYPE: "Paragraph",
  MULTIPLE_ANSWER_TYPE: "Multiple Choice",
  CHECKBOX_ANSWER_TYPE: "Check Boxes",
  DATE_ANSWER_TYPE: "Date",
  TIME_ANSWER_TYPE: "Time"
};
var SurveyResults = function SurveyResults() {
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var params = reactRouterDom.useParams();
  var mutation = Digit.Hooks.survey.useShowResults();
  var queryClient = reactQuery.useQueryClient();
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      queryClient.clear();
    };
    mutation.mutate({
      surveyId: params.id
    }, {
      onSuccess: onSuccess
    });
  }, []);
  var _Digit$Hooks$survey$u = Digit.Hooks.survey.useSearch({
      tenantIds: tenantId,
      uuid: params.id
    }, {
      select: function select(data) {
        var _data$Surveys;
        var surveyObj = data === null || data === void 0 ? void 0 : (_data$Surveys = data.Surveys) === null || _data$Surveys === void 0 ? void 0 : _data$Surveys[0];
        return {
          uuid: surveyObj.uuid,
          title: surveyObj.title,
          description: surveyObj.description,
          collectCitizenInfo: {
            code: surveyObj.collectCitizenInfo
          },
          fromDate: format(new Date(surveyObj.startDate), "yyyy-MM-dd"),
          toDate: format(new Date(surveyObj.endDate), "yyyy-MM-dd"),
          fromTime: format(new Date(surveyObj.startDate), "hh:mm"),
          toTime: format(new Date(surveyObj.endDate), "hh:mm"),
          questions: surveyObj.questions.map(function (_ref) {
            var questionStatement = _ref.questionStatement,
              type = _ref.type,
              required = _ref.required,
              options = _ref.options,
              uuid = _ref.uuid,
              surveyId = _ref.surveyId;
            return {
              questionStatement: questionStatement,
              type: TypeAnswerEnum$1[type],
              required: required,
              options: options,
              uuid: uuid,
              surveyId: surveyId
            };
          }),
          status: surveyObj.status,
          answersCount: surveyObj.answersCount
        };
      }
    }),
    isLoading = _Digit$Hooks$survey$u.isLoading,
    surveyData = _Digit$Hooks$survey$u.data;
  if (isLoading) return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);

  return /*#__PURE__*/React__default.createElement(SurveyResultsView, {
    surveyInfo: surveyData,
    responsesInfoMutation: mutation
  });
};

var Surveys = function Surveys(_ref) {
  var _ref$match = _ref.match;
  _ref$match = _ref$match === void 0 ? {} : _ref$match;
  var path = _ref$match.path,
    tenants = _ref.tenants,
    parentRoute = _ref.parentRoute;
  return /*#__PURE__*/React__default.createElement(reactRouterDom.Switch, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/inbox/create",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(NewSurveys, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/create",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(NewSurveys, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/inbox/details/:id",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(SurveyDetails, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/inbox/results/:id",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(SurveyResults, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/inbox",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(Inbox$3, _extends({}, props, {
        tenants: tenants,
        parentRoute: parentRoute
      }));
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/create-response",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(Acknowledgement$1, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/update-response",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(Response$5, props);
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/delete-response",
    component: function component(props) {
      return /*#__PURE__*/React__default.createElement(Response$6, props);
    }
  }));
};

var transformSurveyResponseData = function transformSurveyResponseData(data) {
  if (!data) return;
  var questions = [];
  for (var key in data) {
    questions.push({
      questionId: key,
      answer: [data[key]]
    });
  }
  return questions;
};
var FillSurvey = function FillSurvey(_ref) {
  var location = _ref.location;
  var surveyData = location === null || location === void 0 ? void 0 : location.state;
  var history = reactRouterDom.useHistory();
  var onSubmit = function onSubmit(data) {
    var details = {
      AnswerEntity: {
        surveyId: surveyData.uuid,
        answers: transformSurveyResponseData(data),
        surveyTitle: surveyData.title,
        hasResponded: surveyData.hasResponded
      }
    };
    history.push("/digit-ui/citizen/engagement/surveys/submit-response", details);
  };
  return /*#__PURE__*/React__default.createElement(CitizenSurveyForm, {
    surveyData: surveyData,
    onFormSubmit: onSubmit,
    formDisabled: false
  });
};

var ShowSurvey = function ShowSurvey(_ref) {
  var _mutation$data;
  var location = _ref.location;
  var surveyData = location === null || location === void 0 ? void 0 : location.state;
  var tenantIds = Digit.ULBService.getCitizenCurrentTenant();
  var mutation = Digit.Hooks.survey.useShowResults();
  var queryClient = reactQuery.useQueryClient();
  React.useEffect(function () {
    var onSuccess = function onSuccess() {
      queryClient.clear();
    };
    mutation.mutate({
      surveyId: surveyData.uuid
    }, {
      onSuccess: onSuccess
    });
  }, []);
  if (mutation.isLoading && !mutation.isIdle) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  if (mutation.isError) return /*#__PURE__*/React__default.createElement("div", null, "An error occured...");

  var answers = mutation === null || mutation === void 0 ? void 0 : (_mutation$data = mutation.data) === null || _mutation$data === void 0 ? void 0 : _mutation$data.answers;
  var formDefaultValues = {};
  answers === null || answers === void 0 ? void 0 : answers.map(function (ans) {
    if ((ans === null || ans === void 0 ? void 0 : ans.answer.length) === 1) formDefaultValues[ans === null || ans === void 0 ? void 0 : ans.questionId] = ans === null || ans === void 0 ? void 0 : ans.answer[0];else formDefaultValues[ans === null || ans === void 0 ? void 0 : ans.questionId] = ans === null || ans === void 0 ? void 0 : ans.answer;
  });

  return /*#__PURE__*/React__default.createElement(CitizenSurveyForm, {
    surveyData: surveyData,
    submitDisabled: true,
    formDisabled: true,
    formDefaultValues: formDefaultValues
  });
};

var EventsBreadCrumb = function EventsBreadCrumb(_ref) {
  var location = _ref.location;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var crumbs = [{
    path: "/digit-ui/employee",
    content: t("ES_COMMON_HOME"),
    show: true
  }, {
    path: "/digit-ui/employee/engagement/event/inbox",
    content: t("ES_EVENT_INBOX"),
    show: location.pathname.includes("event/inbox") ? true : false
  }, {
    path: "/digit-ui/employee/event/new-event",
    content: t("ES_EVENT_NEW_EVENT"),
    show: location.pathname.includes("event/new-event") ? true : false
  }, {
    path: "/digit-ui/employee/event/inbox/new-event",
    content: t("ES_EVENT_NEW_EVENT"),
    show: location.pathname.includes("event/inbox/new-event") ? true : false
  }, {
    path: "/digit-ui/employee/event/inbox/event-details",
    content: t("ES_EVENT_EVENT_DETAILS"),
    show: location.pathname.includes("event-details") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/event/edit-event",
    content: t("ES_EVENT_EDIT_EVENT"),
    show: location.pathname.includes("event/edit-event") ? true : false
  }, {
    path: "/digit-ui/employee/event/response",
    content: t("ES_EVENT_NEW_EVENT_RESPONSE"),
    show: location.pathname.includes("event/response") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/documents/inbox",
    content: t("ES_EVENT_INBOX"),
    show: location.pathname.includes("/documents/inbox") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/documents/new-doc",
    content: t("NEW_DOCUMENT_TEXT"),
    show: location.pathname.includes("/documents/new-doc") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/documents/inbox/new-doc",
    content: t("NEW_DOCUMENT_TEXT"),
    show: location.pathname.includes("/documents/inbox/new-doc") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/documents/response",
    content: t("ES_EVENT_NEW_EVENT_RESPONSE"),
    show: location.pathname.includes("/documents/response") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/documents/delete-response",
    content: t("ES_EVENT_NEW_EVENT_RESPONSE"),
    show: location.pathname.includes("/documents/delete-response") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/documents/update-response",
    content: t("ES_EVENT_NEW_EVENT_RESPONSE"),
    show: location.pathname.includes("/documents/update-response") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/documents/inbox/details/:id",
    content: t("CE_DOCUMENT_DETAILS"),
    show: location.pathname.includes("/documents/inbox/details") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/documents/inbox/update",
    content: t("DOCUMENTS_EDIT_HEADER"),
    show: location.pathname.includes("/documents/inbox/update") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/messages/inbox",
    content: t("ES_EVENT_INBOX"),
    show: location.pathname.includes("/messages/inbox") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/messages/create",
    content: t("NEW_PUBLIC_BRDCST"),
    show: location.pathname.includes("/messages/create") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/messages/inbox/create",
    content: t("NEW_PUBLIC_BRDCST"),
    show: location.pathname.includes("/messages/inbox/create") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/messages/inbox/details/:id",
    content: t("CS_HEADER_PUBLIC_BRDCST"),
    show: location.pathname.includes("/messages/inbox/details") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/messages/inbox/edit/:id",
    content: t("EDIT_PUBLIC_BRDCST"),
    show: location.pathname.includes("/messages/inbox/edit") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/messages/response",
    content: t("ES_EVENT_NEW_EVENT_RESPONSE"),
    show: location.pathname.includes("/messages/response") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/messages/response?update=true",
    content: t("ES_EVENT_NEW_EVENT_RESPONSE"),
    show: location.pathname.includes("/messages/response?update=true") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/messages/response?delete=true",
    content: t("ES_EVENT_NEW_EVENT_RESPONSE"),
    show: location.pathname.includes("/messages/response?delete=true") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/surveys/inbox",
    content: t("ES_EVENT_INBOX"),
    show: location.pathname.includes("/surveys/inbox") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/surveys/inbox/create",
    content: t("CS_COMMON_SURVEYS"),
    show: location.pathname.includes("/surveys/inbox/create") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/surveys/create",
    content: t("CS_COMMON_SURVEYS"),
    show: location.pathname.includes("/surveys/create") ? true : false
  }, {
    path: "/digit-ui/employee/engagement/survey/create-response",
    content: t("ES_EVENT_NEW_EVENT_RESPONSE"),
    show: location.pathname.includes("/engagement/survey/create-response") ? true : false
  }];
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.BreadCrumb, {
    crumbs: crumbs
  });
};
var EmployeeApp = function EmployeeApp(_ref2) {
  var path = _ref2.path,
    tenants = _ref2.tenants;
  var location = reactRouterDom.useLocation();
  return (
    /*#__PURE__*/
    React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(EventsBreadCrumb, {
      location: location
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Switch, null, /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/event/inbox",
      exact: true
    }, /*#__PURE__*/React__default.createElement(Inbox, {
      tenants: tenants,
      parentRoute: path
    })), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/event/response",
      component: function component(props) {
        return /*#__PURE__*/React__default.createElement(Response, props);
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/event/inbox/new-event"
    }, /*#__PURE__*/React__default.createElement(NewEvents, null)), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/event/new-event"
    }, /*#__PURE__*/React__default.createElement(NewEvents, null)), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/event/edit-event/:id"
    }, /*#__PURE__*/React__default.createElement(EditEvents, null)), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/event/inbox/event-details/:id"
    }, /*#__PURE__*/React__default.createElement(EventDetails, null)), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      exact: true,
      path: path + "/documents/inbox/update",
      component: function component(props) {
        return /*#__PURE__*/React__default.createElement(Documents$1, props);
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      exact: true,
      path: path + "/documents/inbox/new-doc",
      component: function component() {
        return /*#__PURE__*/React__default.createElement(Documents, {
          path: path
        });
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      exact: true,
      path: path + "/documents/new-doc",
      component: function component() {
        return /*#__PURE__*/React__default.createElement(Documents, {
          path: path
        });
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/documents/inbox/details/:id",
      component: function component(props) {
        return /*#__PURE__*/React__default.createElement(DocumentDetails$1, props);
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/documents/response",
      component: function component(props) {
        return /*#__PURE__*/React__default.createElement(Response$2, props);
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/documents/update-response",
      component: function component(props) {
        return /*#__PURE__*/React__default.createElement(Response$3, props);
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/documents/delete-response",
      component: function component(props) {
        return /*#__PURE__*/React__default.createElement(Response$4, props);
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/documents/inbox",
      component: function component(props) {
        return /*#__PURE__*/React__default.createElement(Inbox$2, {
          tenants: tenants
        });
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/messages",
      component: function component(props) {
        return /*#__PURE__*/React__default.createElement(Messages, _extends({}, props, {
          tenants: tenants,
          parentRoute: path
        }));
      }
    }), /*#__PURE__*/React__default.createElement(reactRouterDom.Route, {
      path: path + "/surveys",
      component: function component(props) {
        return /*#__PURE__*/React__default.createElement(Surveys, _extends({}, props, {
          tenants: tenants,
          parentRoute: path
        }));
      }
    })))
  );
};

var EngagementModule = function EngagementModule(_ref3) {
  var stateCode = _ref3.stateCode,
    userType = _ref3.userType,
    tenants = _ref3.tenants;
  var moduleCode = "Engagement";
  var _useRouteMatch = reactRouterDom.useRouteMatch(),
    path = _useRouteMatch.path,
    url = _useRouteMatch.url;
  var language = Digit.StoreData.getCurrentLanguage();
  var _Digit$Services$useSt = Digit.Services.useStore({
      stateCode: stateCode,
      moduleCode: moduleCode,
      language: language
    }),
    isLoading = _Digit$Services$useSt.isLoading;
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  Digit.SessionStorage.set("ENGAGEMENT_TENANTS", tenants);
  if (userType === "citizen") {
    return /*#__PURE__*/React__default.createElement(CitizenApp, {
      path: path,
      url: url,
      userType: userType,
      tenants: tenants
    });
  } else {
    return /*#__PURE__*/React__default.createElement(EmployeeApp, {
      path: path,
      url: url,
      userType: userType,
      tenants: tenants
    });
  }
};
var componentsToRegister = {
  EngagementModule: EngagementModule,
  EngagementCard: EngagementCard,
  EngagementDocSelectULB: SelectULB,
  EngagementULBDropdown: ULBDropdown,
  EnagementDocName: DocumentName,
  EngagementDocCategory: SelectCategory,
  EngagementDocDescription: SelectULB$1,
  EngagementDocUploadDocument: EngagementDocUploadDocument,
  NotificationsAndWhatsNew: NotificationsAndWhatsNew,
  EventsListOnGround: EventsListOnGround,
  EventDetails: EventDetails$1,
  EventForm: EventForm,
  MessageForm: MessageForm,
  DocumentList: DocumentList,
  SelectEventGeolocation: SelectGeolocation,
  SelectToDate: SelectToDate,
  SurveyList: SurveyList,
  FillSurvey: FillSurvey,
  CitizenSurveyForm: CitizenSurveyForm,
  ShowSurvey: ShowSurvey,
  SurveyResults: SurveyResults
};
var initEngagementComponents = function initEngagementComponents() {
  Object.entries(componentsToRegister).forEach(function (_ref5) {
    var key = _ref5[0],
      value = _ref5[1];
    Digit.ComponentRegistryService.setComponent(key, value);
  });
};

exports.initEngagementComponents = initEngagementComponents;
//# sourceMappingURL=index.js.map
