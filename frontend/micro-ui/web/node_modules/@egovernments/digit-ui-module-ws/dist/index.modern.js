import React, { useState, useMemo, useEffect, Fragment as Fragment$1 } from 'react';
import { useTranslation } from 'react-i18next';
import { useRouteMatch, useLocation, useHistory, Switch, Route, Redirect } from 'react-router-dom';
import { Loader, FormStep, RadioOrSelect, CardLabel, Localities, TextInput, Toast, Header, ResponseComposer, BackButton, PrivateRoute, TickMark, Card, CardHeader, CitizenInfoLabel, CardText, CardSubHeader, SubmitBar, Dropdown, UploadFile, CheckBox, RadioButtons, MobileNumber, StatusTable, Row, LinkButton, EditIcon, CitizenHomeCard, WSICon } from '@egovernments/digit-ui-react-components';
import { useQueryClient } from 'react-query';

const newConfig = [{
  head: "ES_NEW_APPLICATION_PROPERTY_ASSESSMENT",
  body: [{
    route: "docs-required",
    component: "WSDocsRequired",
    key: "data",
    nextStep: "connection-holder"
  }, {
    route: "connection-holder",
    component: "ConnectionHolder",
    key: "ConnectionHolderDetails",
    nextStep: "service-name",
    texts: {
      headerCaption: "WS_COMMON_CONNECTION_DETAIL",
      header: "WS_COMMON_CONNECTION_HOLDER_DETAILS_HEADER",
      cardText: "WS_CONNECTION_HOLDER_TEXT",
      submitBarLabel: "CS_COMMON_NEXT"
    }
  }, {
    route: "service-name",
    component: "WSServiceName",
    key: "serviceName",
    nextStep: "water-connection-details",
    WATER: "water-connection-details",
    SEWERAGE: "sewerage-connection-details",
    texts: {
      headerCaption: "WS_COMMON_CONNECTION_DETAIL",
      header: "WS_SERVICE_NAME",
      cardText: "",
      submitBarLabel: "CS_COMMON_NEXT"
    }
  }, {
    route: "water-connection-details",
    component: "WSWaterConnectionDetails",
    key: "waterConectionDetails",
    nextStep: "sewerage-connection-details",
    WATER: "plumber-preference",
    texts: {
      headerCaption: "WS_COMMON_CONNECTION_DETAIL",
      header: "WS_WATER_CONNECTION_DETAILS",
      cardText: "WS_PROVIDE_PROPOSED_NO_OF_TAPS_SELECT_PIPE_SIZE",
      submitBarLabel: "CS_COMMON_NEXT"
    }
  }, {
    route: "sewerage-connection-details",
    component: "WSSewerageConnectionDetails",
    key: "sewerageConnectionDetails",
    nextStep: "plumber-preference",
    SEWERAGE: "plumber-preference",
    texts: {
      headerCaption: "WS_COMMON_CONNECTION_DETAIL",
      header: "PDF_STATIC_LABEL_SW_CONSOLIDATED_ACKNOWELDGMENT_LOGO_SUB_HEADER",
      cardText: "WS_PROVIDE_NO_WATER_CLOSETS_TOILETS",
      submitBarLabel: "CS_COMMON_NEXT"
    }
  }, {
    route: "plumber-preference",
    component: "WSPlumberPreference",
    key: "plumberPreference",
    nextStep: "document-details",
    texts: {
      headerCaption: "WS_COMMON_CONNECTION_DETAIL",
      header: "WS_PLUMBER_PREFERENCE",
      cardText: "",
      submitBarLabel: "CS_COMMON_NEXT"
    }
  }, {
    route: "document-details",
    component: "WSDocumentDetails",
    key: "documents",
    nextStep: null,
    texts: {
      headerCaption: "CE_DOCUMENT_DETAILS",
      header: "WS_DOCUMENT_DETAILS_HEADER",
      submitBarLabel: "CS_COMMON_NEXT"
    }
  }]
}];

const getPath = (path, params) => {
  params && Object.keys(params).map(key => {
    path = path.replace(`:${key}`, params[key]);
  });
  return path;
};
const WSCreate = () => {
  var _Digit, _Digit$ComponentRegis;
  const queryClient = useQueryClient();
  const {
    t
  } = useTranslation();
  const {
    path,
    url
  } = useRouteMatch();
  const {
    pathname,
    state
  } = useLocation();
  const match = useRouteMatch();
  const history = useHistory();
  const location = useLocation();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const [params, setParams, clearParams] = Digit.Hooks.useSessionStorage("WS_CREATE", state !== null && state !== void 0 && state.edcrNumber ? {
    data: {
      scrutinyNumber: {
        edcrNumber: state === null || state === void 0 ? void 0 : state.edcrNumber
      }
    }
  } : {});
  const CheckPage = (_Digit = Digit) === null || _Digit === void 0 ? void 0 : (_Digit$ComponentRegis = _Digit.ComponentRegistryService) === null || _Digit$ComponentRegis === void 0 ? void 0 : _Digit$ComponentRegis.getComponent('WSCheckPage');
  const stateId = Digit.ULBService.getStateId();
  let {
    data: newConfig$1
  } = Digit.Hooks.obps.SearchMdmsTypes.getFormConfig(stateId, []);
  const goNext = skipStep => {
    const currentPath = pathname.split("/").pop();
    let {
      nextStep
    } = config.find(routeObj => routeObj.route === currentPath);
    let routeObject = config.find(routeObj => routeObj.route === currentPath && routeObj);
    if (routeObject[sessionStorage.getItem("serviceName")]) nextStep = routeObject[sessionStorage.getItem("serviceName")];
    let redirectWithHistory = history.push;
    if (nextStep === null) {
      return redirectWithHistory(`${getPath(match.path, match.params)}/check`);
    }
    redirectWithHistory(`${getPath(match.path, match.params)}/${nextStep}`);
  };
  const createApplication = async () => {
    history.push(`${getPath(match.path, match.params)}/acknowledgement`);
  };
  const handleSelect = (key, data, skipStep, isFromCreateApi) => {
    if (isFromCreateApi) setParams(data);else if (key === "") setParams({
      ...data
    });else setParams({
      ...params,
      ...{
        [key]: {
          ...params[key],
          ...data
        }
      }
    });
    goNext();
  };
  const handleSkip = () => {};
  let config = [];
  newConfig$1 = newConfig;
  newConfig$1.forEach(obj => {
    config = config.concat(obj.body.filter(a => !a.hideInCitizen));
  });
  config.indexRoute = "docs-required";

  return /*#__PURE__*/React.createElement(Switch, null, config.map((routeObj, index) => {
    const {
      component,
      texts,
      inputs,
      key
    } = routeObj;
    const Component = typeof component === "string" ? Digit.ComponentRegistryService.getComponent(component) : component;
    return /*#__PURE__*/React.createElement(Route, {
      path: `${getPath(match.path, match.params)}/${routeObj.route}`,
      key: index
    }, /*#__PURE__*/React.createElement(Component, {
      config: {
        texts,
        inputs,
        key
      },
      onSelect: handleSelect,
      onSkip: handleSkip,
      t: t,
      formData: params
    }));
  }), /*#__PURE__*/React.createElement(Route, {
    path: `${getPath(match.path, match.params)}/check`
  }, /*#__PURE__*/React.createElement(CheckPage, {
    onSubmit: createApplication,
    value: params
  })), /*#__PURE__*/React.createElement(Route, null, /*#__PURE__*/React.createElement(Redirect, {
    to: `${getPath(match.path, match.params)}/${config.indexRoute}`
  })));
};

const config = [{
  texts: {
    header: "WS_SEARCH_CONNECTION",
    submitBarLabel: "WS_SEARCH_LABEL",
    cardText: "WS_SEARCH_TEXT"
  },
  inputs: [{
    label: "CORE_COMMON_MOBILE_NUMBER",
    type: "mobileNumber",
    name: "mobileNumber",
    error: "CORE_COMMON_PHONENO_INVALIDMSG"
  }, {
    label: "WS_PROP_DETAIL_CITY",
    name: "city",
    error: "WS_WRONG_CITY"
  }, {
    label: "WS_PROP_DETAIL_LOCALITY_LABEL",
    type: "any",
    name: "locality",
    error: "UC_INVALID_LOCALITY"
  }]
}];

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var b = "function" === typeof Symbol && Symbol.for,
  c = b ? Symbol.for("react.element") : 60103,
  d = b ? Symbol.for("react.portal") : 60106,
  e = b ? Symbol.for("react.fragment") : 60107,
  f = b ? Symbol.for("react.strict_mode") : 60108,
  g = b ? Symbol.for("react.profiler") : 60114,
  h = b ? Symbol.for("react.provider") : 60109,
  k = b ? Symbol.for("react.context") : 60110,
  l = b ? Symbol.for("react.async_mode") : 60111,
  m = b ? Symbol.for("react.concurrent_mode") : 60111,
  n = b ? Symbol.for("react.forward_ref") : 60112,
  p = b ? Symbol.for("react.suspense") : 60113,
  q = b ? Symbol.for("react.suspense_list") : 60120,
  r = b ? Symbol.for("react.memo") : 60115,
  t = b ? Symbol.for("react.lazy") : 60116,
  v = b ? Symbol.for("react.block") : 60121,
  w = b ? Symbol.for("react.fundamental") : 60117,
  x = b ? Symbol.for("react.responder") : 60118,
  y = b ? Symbol.for("react.scope") : 60119;
function z(a) {
  if ("object" === typeof a && null !== a) {
    var u = a.$$typeof;
    switch (u) {
      case c:
        switch (a = a.type, a) {
          case l:
          case m:
          case e:
          case g:
          case f:
          case p:
            return a;
          default:
            switch (a = a && a.$$typeof, a) {
              case k:
              case n:
              case t:
              case r:
              case h:
                return a;
              default:
                return u;
            }
        }
      case d:
        return u;
    }
  }
}
function A(a) {
  return z(a) === m;
}
var AsyncMode = l;
var ConcurrentMode = m;
var ContextConsumer = k;
var ContextProvider = h;
var Element = c;
var ForwardRef = n;
var Fragment = e;
var Lazy = t;
var Memo = r;
var Portal = d;
var Profiler = g;
var StrictMode = f;
var Suspense = p;
var isAsyncMode = function (a) {
  return A(a) || z(a) === l;
};
var isConcurrentMode = A;
var isContextConsumer = function (a) {
  return z(a) === k;
};
var isContextProvider = function (a) {
  return z(a) === h;
};
var isElement = function (a) {
  return "object" === typeof a && null !== a && a.$$typeof === c;
};
var isForwardRef = function (a) {
  return z(a) === n;
};
var isFragment = function (a) {
  return z(a) === e;
};
var isLazy = function (a) {
  return z(a) === t;
};
var isMemo = function (a) {
  return z(a) === r;
};
var isPortal = function (a) {
  return z(a) === d;
};
var isProfiler = function (a) {
  return z(a) === g;
};
var isStrictMode = function (a) {
  return z(a) === f;
};
var isSuspense = function (a) {
  return z(a) === p;
};
var isValidElementType = function (a) {
  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
};
var typeOf = z;
var reactIs_production_min = {
  AsyncMode: AsyncMode,
  ConcurrentMode: ConcurrentMode,
  ContextConsumer: ContextConsumer,
  ContextProvider: ContextProvider,
  Element: Element,
  ForwardRef: ForwardRef,
  Fragment: Fragment,
  Lazy: Lazy,
  Memo: Memo,
  Portal: Portal,
  Profiler: Profiler,
  StrictMode: StrictMode,
  Suspense: Suspense,
  isAsyncMode: isAsyncMode,
  isConcurrentMode: isConcurrentMode,
  isContextConsumer: isContextConsumer,
  isContextProvider: isContextProvider,
  isElement: isElement,
  isForwardRef: isForwardRef,
  isFragment: isFragment,
  isLazy: isLazy,
  isMemo: isMemo,
  isPortal: isPortal,
  isProfiler: isProfiler,
  isStrictMode: isStrictMode,
  isSuspense: isSuspense,
  isValidElementType: isValidElementType,
  typeOf: typeOf
};

var reactIs_development = createCommonjsModule(function (module, exports) {

  if (process.env.NODE_ENV !== "production") {
    (function () {

      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;

      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
      function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' ||
        type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
      }
      function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;
              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;
                default:
                  var $$typeofType = type && type.$$typeof;
                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
        return undefined;
      }

      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false;

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;

            console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
          }
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }
      exports.AsyncMode = AsyncMode;
      exports.ConcurrentMode = ConcurrentMode;
      exports.ContextConsumer = ContextConsumer;
      exports.ContextProvider = ContextProvider;
      exports.Element = Element;
      exports.ForwardRef = ForwardRef;
      exports.Fragment = Fragment;
      exports.Lazy = Lazy;
      exports.Memo = Memo;
      exports.Portal = Portal;
      exports.Profiler = Profiler;
      exports.StrictMode = StrictMode;
      exports.Suspense = Suspense;
      exports.isAsyncMode = isAsyncMode;
      exports.isConcurrentMode = isConcurrentMode;
      exports.isContextConsumer = isContextConsumer;
      exports.isContextProvider = isContextProvider;
      exports.isElement = isElement;
      exports.isForwardRef = isForwardRef;
      exports.isFragment = isFragment;
      exports.isLazy = isLazy;
      exports.isMemo = isMemo;
      exports.isPortal = isPortal;
      exports.isProfiler = isProfiler;
      exports.isStrictMode = isStrictMode;
      exports.isSuspense = isSuspense;
      exports.isValidElementType = isValidElementType;
      exports.typeOf = typeOf;
    })();
  }
});

var reactIs = createCommonjsModule(function (module) {

  if (process.env.NODE_ENV === 'production') {
    module.exports = reactIs_production_min;
  } else {
    module.exports = reactIs_development;
  }
});

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }

    var test1 = new String('abc');
    test1[5] = 'de';
    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    }

    var test2 = {};
    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });
    if (order2.join('') !== '0123456789') {
      return false;
    }

    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }
  return to;
};

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var has = Function.call.bind(Object.prototype.hasOwnProperty);

var printWarning = function () {};
if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
  var loggedTypeFailures = {};
  var has$1 = has;
  printWarning = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };
}

function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has$1(typeSpecs, typeSpecName)) {
        var error;
        try {
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

checkPropTypes.resetWarningCache = function () {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
};
var checkPropTypes_1 = checkPropTypes;

var printWarning$1 = function () {};
if (process.env.NODE_ENV !== 'production') {
  printWarning$1 = function (text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };
}
function emptyFunctionThatReturnsNull() {
  return null;
}
var factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator';

  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  var ANONYMOUS = '<<anonymous>>';

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bigint: createPrimitiveTypeChecker('bigint'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };

  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function PropTypeError(message, data) {
    this.message = message;
    this.data = data && typeof data === 'object' ? data : {};
    this.stack = '';
  }
  PropTypeError.prototype = Error.prototype;
  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;
      if (secret !== ReactPropTypesSecret_1) {
        if (throwOnDirectAccess) {
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] &&
          manualPropTypeWarningCount < 3) {
            printWarning$1('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }
    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }
  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
          expectedType: expectedType
        });
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }
  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!reactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning$1('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
        } else {
          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }
      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning$1('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }
    function validate(props, propName, componentName, location, propFullName) {
      var expectedTypes = [];
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1);
        if (checkerResult == null) {
          return null;
        }
        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
          expectedTypes.push(checkerResult.data.expectedType);
        }
      }
      var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
    }
    return createChainableTypeChecker(validate);
  }
  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function invalidValidatorError(componentName, location, propFullName, key, type) {
    return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
  }
  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      var allKeys = objectAssign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (has(shapeTypes, key) && typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }
  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }
        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }
        return true;
      default:
        return false;
    }
  }
  function isSymbol(propType, propValue) {
    if (propType === 'symbol') {
      return true;
    }

    if (!propValue) {
      return false;
    }

    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }
    return false;
  }

  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }
  ReactPropTypes.checkPropTypes = checkPropTypes_1;
  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;
var factoryWithThrowingShims = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      return;
    }
    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  }
  shim.isRequired = shim;
  function getShim() {
    return shim;
  }
  var ReactPropTypes = {
    array: shim,
    bigint: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {

  if (process.env.NODE_ENV !== 'production') {
    var ReactIs = reactIs;

    var throwOnDirectAccess = true;
    module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  } else {
    module.exports = factoryWithThrowingShims();
  }
});

const SearchConnection = ({
  config: propsConfig,
  formData
}) => {
  var _Digit$Hooks$ws$usews;
  const {
    t
  } = useTranslation();
  let validation = {};
  const history = useHistory();
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const logginedUser = Digit.UserService.getUser();
  const [mobileNumber, setMobileNumber] = useState((formData === null || formData === void 0 ? void 0 : formData.mobileNumber) || "");
  const [consumerNumber, setconsumerNumber] = useState((formData === null || formData === void 0 ? void 0 : formData.consumerNumber) || "");
  const [oldconsumerNumber, setoldconsumerNumber] = useState((formData === null || formData === void 0 ? void 0 : formData.oldconsumerNumber) || "");
  const [doorNumber, setdoorNumber] = useState((formData === null || formData === void 0 ? void 0 : formData.doorNumber) || "");
  const [propertyId, setpropertyId] = useState((formData === null || formData === void 0 ? void 0 : formData.propertyId) || "");
  const [consumerName, setconsumerName] = useState((formData === null || formData === void 0 ? void 0 : formData.consumerName) || "");
  const [Servicecateogry, setServicecateogry] = useState((formData === null || formData === void 0 ? void 0 : formData.Servicecateogry) || "");
  const [city, setcity] = useState((formData === null || formData === void 0 ? void 0 : formData.city) || "");
  const [showToast, setShowToast] = useState(null);
  const [locality, setLocality] = useState((formData === null || formData === void 0 ? void 0 : formData.locality) || "");
  const [searchType, setSearchType] = useState((formData === null || formData === void 0 ? void 0 : formData.searchType) || {
    code: "CONSUMER_NUMBER",
    i18nKey: "WS_CONSUMER_NUMBER_SEARCH"
  });
  const allCities = (_Digit$Hooks$ws$usews = Digit.Hooks.ws.usewsTenants()) === null || _Digit$Hooks$ws$usews === void 0 ? void 0 : _Digit$Hooks$ws$usews.sort((a, b) => {
    var _a$i18nKey, _a$i18nKey$localeComp;
    return a === null || a === void 0 ? void 0 : (_a$i18nKey = a.i18nKey) === null || _a$i18nKey === void 0 ? void 0 : (_a$i18nKey$localeComp = _a$i18nKey.localeCompare) === null || _a$i18nKey$localeComp === void 0 ? void 0 : _a$i18nKey$localeComp.call(_a$i18nKey, b === null || b === void 0 ? void 0 : b.i18nKey);
  });
  const [mobileNumberError, setmobileNumberError] = useState(null);
  const {
    data: Menu,
    isLoading
  } = Digit.Hooks.mcollect.useMCollectMDMS(tenantId, "BillingService", "BusinessService");
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  const onConnectionSearch = async data => {
    if (searchType.code === "CONSUMER_NUMBER") {
      if (!city.code) setShowToast({
        key: true,
        label: "WS_PLEASE_PROVIDE_CITY"
      });else if (logginedUser == null && !locality) setShowToast({
        key: true,
        label: "WS_PLEASE_PROVIDE_LOCALITY"
      });else if (!mobileNumber && !consumerNumber && !oldconsumerNumber && !propertyId) {
        setShowToast({
          key: true,
          label: "WS_HOME_SEARCH_CONN_RESULTS_DESC"
        });
      } else {
        history.push(`/digit-ui/citizen/ws/search-results?mobileNumber=${mobileNumber}&consumerNumber=${consumerNumber}&oldconsumerNumber=${oldconsumerNumber}&propertyId=${propertyId}&tenantId=${city.code}&locality=${locality.code}`);
      }
    } else {
      if (!city.code) setShowToast({
        key: true,
        label: "WS_PLEASE_PROVIDE_CITY"
      });else if (logginedUser == null && !locality) setShowToast({
        key: true,
        label: "WS_PLEASE_PROVIDE_LOCALITY"
      });else if (!doorNumber && !consumerName) setShowToast({
        key: true,
        label: "WS_HOME_SEARCH_CONN_RESULTS_DESC"
      });else {
        history.push(`/digit-ui/citizen/ws/search-results?doorNumber=${doorNumber}&consumerName=${consumerName}&tenantId=${city.code}&locality=${locality.code}`);
      }
    }
  };
  let SearchTypes = [{
    code: "CONSUMER_NUMBER",
    i18nKey: "WS_CONSUMER_NUMBER_SEARCH"
  }, {
    code: "CONNECTION_DETAILS",
    i18nKey: "WS_CONNECTION_DETAILS_SEARCH"
  }];
  function setMobileNo(e) {
    setmobileNumberError(null);
    let validation = "^\\d{10}$";
    if (!e.target.value.match(validation)) {
      setmobileNumberError("CORE_COMMON_PHONENO_INVALIDMSG");
    }
    setMobileNumber(e.target.value);
  }
  function selectconsumerNumber(e) {
    setconsumerNumber(e.target.value);
  }
  function selectoldconsumerNumber(e) {
    setoldconsumerNumber(e.target.value);
  }
  function selectdoorNumber(e) {
    setdoorNumber(e.target.value);
  }
  function selectpropertyId(e) {
    setpropertyId(e.target.value);
  }
  function selectconsumerName(e) {
    setconsumerName(e.target.value);
  }
  function selectCity(value) {
    setcity(value);
    setLocality("");
  }
  function selectLocality(value) {
    setLocality(value);
  }
  function selectSearchType(value) {
    setSearchType(value);
  }
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "16px"
    }
  }, /*#__PURE__*/React.createElement(FormStep, {
    config: propsConfig,
    label: propsConfig.texts.submitButtonLabel,
    heading: propsConfig.texts.header,
    text: propsConfig.texts.text,
    cardStyle: {
      margin: "auto"
    },
    headingStyle: {
      fontSize: "32px",
      marginBottom: "16px"
    },
    onSelect: onConnectionSearch,
    componentInFront: /*#__PURE__*/React.createElement("div", {
      className: "employee-card-input employee-card-input--front"
    }, "+91"),
    isDisabled: false,
    forcedError: t(mobileNumberError)
    ,
    t: t
  }, /*#__PURE__*/React.createElement(RadioOrSelect, Object.assign({
    className: "form-field",
    isMandatory: true,
    t: t,
    optionKey: "code",
    name: "SearchType",
    options: SearchTypes,
    value: searchType,
    selectedOption: searchType,
    onSelect: selectSearchType
  }, validation = {
    isRequired: true,
    title: t("WS_SEARCH_TYPE_MANDATORY")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_PROP_DETAIL_CITY")}*`), /*#__PURE__*/React.createElement(RadioOrSelect, Object.assign({
    className: "form-field",
    isMandatory: true,
    t: t,
    optionKey: "code",
    name: "City",
    options: allCities,
    value: city,
    selectedOption: city,
    onSelect: selectCity
  }, validation = {
    isRequired: true,
    title: t("UC_CITY_MANDATORY")
  })), city && !logginedUser && /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_PROP_DETAIL_LOCALITY_LABEL")}*`), city && !logginedUser && /*#__PURE__*/React.createElement(Localities, {
    selectLocality: selectLocality,
    tenantId: city === null || city === void 0 ? void 0 : city.code,
    boundaryType: "revenue",
    keepNull: false,
    optionCardStyles: {
      height: "600px",
      overflow: "auto",
      zIndex: "10"
    },
    selected: locality
    ,
    disableLoader: false
  }), searchType && (searchType === null || searchType === void 0 ? void 0 : searchType.code) == "CONSUMER_NUMBER" && /*#__PURE__*/React.createElement("div", {
    style: {
      border: "solid",
      borderRadius: "5px",
      padding: "10px",
      paddingTop: "20px",
      marginTop: "10px",
      borderColor: "#f3f3f3",
      background: "#FAFAFA",
      marginBottom: "20px"
    }
  }, /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_CONSUMER_NUMBER_LABEL")}`), /*#__PURE__*/React.createElement("div", {
    className: "field-container"
  }, /*#__PURE__*/React.createElement("span", {
    className: "employee-card-input employee-card-input--front",
    style: {
      marginTop: "-1px"
    }
  }, "+91"), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    type: "mobileNumber",
    style: {
      background: "#FAFAFA"
    },
    t: t,
    isMandatory: false,
    optionKey: "i18nKey",
    name: "mobileNumber",
    value: mobileNumber,
    onChange: setMobileNo
  }, validation = {
    isRequired: false,
    pattern: "[6-9]{1}[0-9]{9}",
    type: "tel",
    title: t("CORE_COMMON_APPLICANT_MOBILE_NUMBER_INVALID")
  }))), /*#__PURE__*/React.createElement(CardLabel, {
    style: {
      textAlign: "center",
      color: "#505A5F"
    }
  }, `${t("(or)")}`), /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_MYCONNECTIONS_CONSUMER_NO")}`), /*#__PURE__*/React.createElement(TextInput, {
    t: t,
    type: "any",
    isMandatory: false,
    style: {
      background: "#FAFAFA"
    },
    name: "consumerNumber",
    value: consumerNumber,
    onChange: selectconsumerNumber
  }), logginedUser && /*#__PURE__*/React.createElement(CardLabel, {
    style: {
      textAlign: "center",
      color: "#505A5F"
    }
  }, `${t("(or)")}`), logginedUser && /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_SEARCH_CONNNECTION_OLD_CONSUMER_LABEL")}`), logginedUser && /*#__PURE__*/React.createElement(TextInput, {
    t: t,
    type: "any",
    isMandatory: false,
    style: {
      background: "#FAFAFA"
    }
    ,
    name: "oldconsumerNumber",
    value: oldconsumerNumber,
    onChange: selectoldconsumerNumber
  }), /*#__PURE__*/React.createElement(CardLabel, {
    style: {
      textAlign: "center",
      color: "#505A5F"
    }
  }, `${t("(or)")}`), /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_PROPERTY_ID_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, {
    t: t,
    type: "any",
    isMandatory: false,
    style: {
      background: "#FAFAFA"
    }
    ,
    name: "propertyId",
    value: propertyId,
    onChange: selectpropertyId
  })), searchType && (searchType === null || searchType === void 0 ? void 0 : searchType.code) == "CONNECTION_DETAILS" && /*#__PURE__*/React.createElement("div", {
    style: {
      border: "solid",
      borderRadius: "5px",
      padding: "10px",
      paddingTop: "20px",
      marginTop: "10px",
      borderColor: "#f3f3f3",
      background: "#FAFAFA",
      marginBottom: "20px"
    }
  }, /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_DOOR_NO_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, {
    t: t,
    type: "any",
    isMandatory: false,
    style: {
      background: "#FAFAFA"
    },
    name: "doorNumber",
    value: doorNumber,
    onChange: selectdoorNumber
  }), /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_CONSUMER_NAME_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, {
    t: t,
    type: "any",
    isMandatory: false,
    style: {
      background: "#FAFAFA"
    },
    name: "consumerName",
    value: consumerName,
    onChange: selectconsumerName
  }))), showToast && /*#__PURE__*/React.createElement(Toast, {
    isDleteBtn: true,
    error: showToast.key,
    label: t(showToast.label),
    onClose: () => {
      setShowToast(null);
    }
  }));
};
SearchConnection.propTypes = {
  loginParams: propTypes.any
};
SearchConnection.defaultProps = {
  loginParams: null
};

const SearchConnection$1 = () => {
  const {
    t
  } = useTranslation();
  const {
    path
  } = useRouteMatch();
  const params = useMemo(() => config.map(step => {
    const texts = {};
    for (const key in step.texts) {
      texts[key] = t(step.texts[key]);
    }
    return {
      ...step,
      texts
    };
  }, [config]));
  return /*#__PURE__*/React.createElement(Switch, null, /*#__PURE__*/React.createElement(Route, {
    path: `${path}`,
    exact: true
  }, /*#__PURE__*/React.createElement(SearchConnection, {
    config: params[0]
  })));
};

const config$1 = [{
  texts: {
    header: "CS_SEARCH_RESULTS",
    actionButtonLabel: "WS_VIEW_DETAILS_AND_PAY"
  },
  labels: [{
    label: "WS_COMMON_TABLE_COL_AMT_DUE_LABEL",
    key: "AmountDue",
    noteStyle: {
      fontSize: "24px",
      fontWeight: "bold"
    },
    notePrefix: "₹ "
  }, {
    label: "WS_MYCONNECTIONS_CONSUMER_NO",
    key: "ConsumerNumber"
  }, {
    label: "WS_CONSUMER_NAME_LABEL",
    key: "ConsumerName"
  }, {
    label: "WS_MYCONNECTION_ADDRESS",
    key: "Address"
  }, {
    label: "WS_VIEW_BILL_DUE_DATE_LABEL",
    key: "DueDate"
  }]
}];

var bind = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

var toString = Object.prototype.toString;

function isArray(val) {
  return toString.call(val) === '[object Array]';
}

function isUndefined(val) {
  return typeof val === 'undefined';
}

function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}

function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }
  return result;
}

function isString(val) {
  return typeof val === 'string';
}

function isNumber(val) {
  return typeof val === 'number';
}

function isObject(val) {
  return val !== null && typeof val === 'object';
}

function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }
  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

function isDate(val) {
  return toString.call(val) === '[object Date]';
}

function isFile(val) {
  return toString.call(val) === '[object File]';
}

function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
    return false;
  }
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}

function forEach(obj, fn) {
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  if (typeof obj !== 'object') {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

function merge(
) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }
  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}
var utils = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};

function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}

var buildURL = function buildURL(url, params, paramsSerializer) {
  if (!params) {
    return url;
  }
  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }
      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }
      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });
    serializedParams = parts.join('&');
  }
  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }
  return url;
};

function InterceptorManager() {
  this.handlers = [];
}

InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};
var InterceptorManager_1 = InterceptorManager;

var transformData = function transformData(data, headers, fns) {
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });
  return data;
};

var isCancel = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

var enhanceError = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  error.isAxiosError = true;
  error.toJSON = function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code
    };
  };
  return error;
};

var createError = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};

var settle = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};

var cookies = utils.isStandardBrowserEnv() ?
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));
      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }
      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }
      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }
      if (secure === true) {
        cookie.push('secure');
      }
      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() :
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();

var isAbsoluteURL = function isAbsoluteURL(url) {
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

var combineURLs = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};

var buildFullPath = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};

var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];

var parseHeaders = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;
  if (!headers) {
    return parsed;
  }
  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));
    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });
  return parsed;
};

var isURLSameOrigin = utils.isStandardBrowserEnv() ?
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;

  function resolveURL(url) {
    var href = url;
    if (msie) {
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute('href', href);

    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);

  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() :
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();

var xhr = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type'];
    }

    var request = new XMLHttpRequest();

    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }
    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    request.timeout = config.timeout;

    request.onreadystatechange = function handleLoad() {
      if (!request || request.readyState !== 4) {
        return;
      }

      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      settle(resolve, reject, response);

      request = null;
    };

    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      request = null;
    };

    request.onerror = function handleError() {
      reject(createError('Network Error', config, null, request));

      request = null;
    };

    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request));

      request = null;
    };

    if (utils.isStandardBrowserEnv()) {
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          delete requestHeaders[key];
        } else {
          request.setRequestHeader(key, val);
        }
      });
    }

    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }
    if (config.cancelToken) {
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }
        request.abort();
        reject(cancel);
        request = null;
      });
    }
    if (!requestData) {
      requestData = null;
    }

    request.send(requestData);
  });
};

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};
function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}
function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    adapter = xhr;
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    adapter = xhr;
  }
  return adapter;
}
var defaults = {
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {}
    }
    return data;
  }],
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};
defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_1 = defaults;

function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

var dispatchRequest = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = config.headers || {};

  config.data = transformData(config.data, config.headers, config.transformRequest);

  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults_1.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    response.data = transformData(response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }
    return Promise.reject(reason);
  });
};

var mergeConfig = function mergeConfig(config1, config2) {
  config2 = config2 || {};
  var config = {};
  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = ['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress', 'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'];
  var directMergeKeys = ['validateStatus'];
  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }
  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });
  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });
  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });
  var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
  var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
    return axiosKeys.indexOf(key) === -1;
  });
  utils.forEach(otherKeys, mergeDeepProperties);
  return config;
};

function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager_1(),
    response: new InterceptorManager_1()
  };
}

Axios.prototype.request = function request(config) {
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }
  config = mergeConfig(this.defaults, config);

  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });
  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }
  return promise;
};
Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  Axios.prototype[method] = function (url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});
utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  Axios.prototype[method] = function (url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});
var Axios_1 = Axios;

function Cancel(message) {
  this.message = message;
}
Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};
Cancel.prototype.__CANCEL__ = true;
var Cancel_1 = Cancel;

function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }
  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      return;
    }
    token.reason = new Cancel_1(message);
    resolvePromise(token.reason);
  });
}

CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};
var CancelToken_1 = CancelToken;

var spread = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

var isAxiosError = function isAxiosError(payload) {
  return typeof payload === 'object' && payload.isAxiosError === true;
};

function createInstance(defaultConfig) {
  var context = new Axios_1(defaultConfig);
  var instance = bind(Axios_1.prototype.request, context);

  utils.extend(instance, Axios_1.prototype, context);

  utils.extend(instance, context);
  return instance;
}

var axios = createInstance(defaults_1);

axios.Axios = Axios_1;

axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

axios.Cancel = Cancel_1;
axios.CancelToken = CancelToken_1;
axios.isCancel = isCancel;

axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;

axios.isAxiosError = isAxiosError;
var axios_1 = axios;

var _default = axios;
axios_1.default = _default;

const stringReplaceAll = (str = "", searcher = "", replaceWith = "") => {
  if (searcher == "") return str;
  while (str.includes(searcher)) {
    str = str.replace(searcher, replaceWith);
  }
  return str;
};

const ChallanSearchResults = ({
  template,
  header,
  actionButtonLabel
}) => {
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const {
    mobileNumber,
    consumerNumber,
    oldconsumerNumber,
    tenantId,
    propertyId,
    locality,
    doorNumber,
    consumerName
  } = Digit.Hooks.useQueryParams();
  let filters = {};
  if (mobileNumber) filters.mobileNumber = mobileNumber;
  if (consumerNumber) filters.connectionNumber = consumerNumber;
  if (oldconsumerNumber) filters.oldConnectionNumber = oldconsumerNumber;
  if (propertyId) filters.propertyId = propertyId;
  if (locality !== "undefined") filters.locality = locality;
  if (doorNumber) filters.doorNumber = doorNumber;
  if (consumerName) filters.consumerName = consumerName;
  filters = {
    ...filters,
    searchType: "CONNECTION"
  };
  const Waterresult = Digit.Hooks.ws.useWaterSearch({
    tenantId,
    filters: {
      ...filters
    },
    BusinessService: "WS",
    t
  });
  const Sewarageresult = Digit.Hooks.ws.useSewarageSearch({
    tenantId,
    filters: {
      ...filters
    },
    BusinessService: "SW",
    t
  });
  if (Waterresult !== null && Waterresult !== void 0 && Waterresult.isLoading || Sewarageresult !== null && Sewarageresult !== void 0 && Sewarageresult.isLoading || Waterresult == undefined || Sewarageresult == undefined) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  const onSubmit = data => {
    history.push(`/digit-ui/citizen/payment/my-bills/${data === null || data === void 0 ? void 0 : data.ConsumerNumber.split("/")[0]}/${stringReplaceAll(data === null || data === void 0 ? void 0 : data.ConsumerNumber, "/", "+")}?workflow=WNS&tenantId=${tenantId}`);
  };
  const searchResults = Waterresult && Sewarageresult ? Waterresult.concat(Sewarageresult) : [];
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: "16px"
    }
  }, /*#__PURE__*/React.createElement("div", null, header && /*#__PURE__*/React.createElement(Header, {
    style: {
      marginLeft: "8px"
    }
  }, t(header), " (", searchResults === null || searchResults === void 0 ? void 0 : searchResults.length, ")"), /*#__PURE__*/React.createElement(ResponseComposer, {
    data: searchResults,
    template: template,
    actionButtonLabel: actionButtonLabel,
    onSubmit: onSubmit
  })));
};
ChallanSearchResults.propTypes = {
  template: propTypes.any,
  header: propTypes.string,
  actionButtonLabel: propTypes.string
};
ChallanSearchResults.defaultProps = {
  template: [],
  header: null,
  actionButtonLabel: null
};

const CitizenSearchResults = () => {
  const {
    t
  } = useTranslation();
  const {
    path
  } = useRouteMatch();
  const params = useMemo(() => config$1.map(step => {
    const texts = {};
    for (const key in step.texts) {
      texts[key] = t(step.texts[key]);
    }
    return {
      ...step,
      texts
    };
  }, [config$1]));
  return /*#__PURE__*/React.createElement(Switch, null, /*#__PURE__*/React.createElement(Route, {
    path: `${path}`,
    exact: true
  }, /*#__PURE__*/React.createElement(ChallanSearchResults, {
    template: params[0].labels,
    header: params[0].texts.header,
    actionButtonLabel: params[0].texts.actionButtonLabel,
    t: t
  })));
};

const App = ({
  path
}) => {
  const location = useLocation();
  const {
    t
  } = useTranslation();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BackButton, {
    style: {
      border: "none"
    }
  }, t("CS_COMMON_BACK")), /*#__PURE__*/React.createElement(Switch, null, /*#__PURE__*/React.createElement(PrivateRoute, {
    path: `${path}/create-application`,
    component: WSCreate
  }), /*#__PURE__*/React.createElement(Route, {
    path: `${path}/search`,
    component: SearchConnection$1
  }), /*#__PURE__*/React.createElement(Route, {
    path: `${path}/search-results`,
    component: CitizenSearchResults
  })));
};

let actions = [];
const getAction = flow => {
  switch (flow) {
    default:
      actions = ['WS_COMMON_PROPERTY_DETAILS', 'WS_COMMON_CONNECTION_DETAIL', 'WS_COMMON_DOCUMENT_DETAILS', 'WS_COMMON_SUMMARY'];
  }
};
const Timeline = ({
  currentStep: _currentStep = 1,
  flow: _flow = ""
}) => {
  const {
    t
  } = useTranslation();
  const isMobile = window.Digit.Utils.browser.isMobile();
  getAction(_flow);
  return /*#__PURE__*/React.createElement("div", {
    className: "timeline-container",
    style: isMobile ? {} : {
      maxWidth: "960px",
      minWidth: "640px",
      marginRight: "auto"
    }
  }, actions.map((action, index, arr) => /*#__PURE__*/React.createElement("div", {
    className: "timeline-checkpoint",
    key: index
  }, /*#__PURE__*/React.createElement("div", {
    className: "timeline-content"
  }, /*#__PURE__*/React.createElement("span", {
    className: `circle ${index <= _currentStep - 1 && 'active'}`
  }, index < _currentStep - 1 ? /*#__PURE__*/React.createElement(TickMark, null) : index + 1), /*#__PURE__*/React.createElement("span", {
    className: "secondary-color"
  }, t(action))), index < arr.length - 1 && /*#__PURE__*/React.createElement("span", {
    className: `line ${index < _currentStep - 1 && 'active'}`
  }))));
};

const WSServiceName = ({
  t,
  config,
  onSelect,
  formData
}) => {
  const [serviceName, setServiceName] = useState((formData === null || formData === void 0 ? void 0 : formData.serviceName) || "");
  const [formDetails, setFormDetails] = useState(formData || {});
  const serviceNameList = [{
    i18nKey: "WS_WATER_CONNECTION_ONLY",
    code: "WATER"
  }, {
    i18nKey: "WS_SEWERAGE_CONNECTION_ONLY",
    code: "SEWERAGE"
  }, {
    i18nKey: "WS_BOTH_WATER_AND_SEWERAGE",
    code: "BOTH"
  }];
  function onAdd() {}
  function onServiceNameSelect(value) {
    setServiceName(value);
  }
  const onSkip = () => onSelect();
  const handleSubmit = () => {
    var _formDetails$serviceN;
    if ((serviceName === null || serviceName === void 0 ? void 0 : serviceName.code) == "WATER") sessionStorage.setItem("serviceName", "WATER");else if ((serviceName === null || serviceName === void 0 ? void 0 : serviceName.code) == "SEWERAGE") sessionStorage.setItem("serviceName", "SEWERAGE");else sessionStorage.setItem("serviceName", "");
    if ((serviceName === null || serviceName === void 0 ? void 0 : serviceName.code) != "BOTH" && (formDetails === null || formDetails === void 0 ? void 0 : (_formDetails$serviceN = formDetails.serviceName) === null || _formDetails$serviceN === void 0 ? void 0 : _formDetails$serviceN.code) != (serviceName === null || serviceName === void 0 ? void 0 : serviceName.code)) {
      let data = formDetails;
      data.waterConectionDetails = {};
      data.sewerageConnectionDetails = {};
      data.serviceName = serviceName;
      onSelect("", data);
    } else {
      onSelect(config.key, serviceName);
    }
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Timeline, {
    currentStep: 2
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: handleSubmit,
    onSkip: onSkip,
    isDisabled: !serviceName,
    onAdd: onAdd
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("WS_SELECT_SERVICE_TYPE_WANT_TO_APPLY"), "*"), /*#__PURE__*/React.createElement(RadioOrSelect, {
    name: "gender",
    options: serviceNameList,
    selectedOption: serviceName,
    optionKey: "i18nKey",
    onSelect: onServiceNameSelect,
    t: t
  })));
};

const WSWaterConnectionDetails = ({
  t,
  config,
  onSelect,
  formData
}) => {
  var _formData$waterConect, _formData$waterConect2;
  const tenantId = Digit.ULBService.getStateId();
  const [proposedTaps, setProposedTaps] = useState((formData === null || formData === void 0 ? void 0 : (_formData$waterConect = formData.waterConectionDetails) === null || _formData$waterConect === void 0 ? void 0 : _formData$waterConect.proposedTaps) || "");
  const [proposedPipeSize, setProposedPipeSize] = useState((formData === null || formData === void 0 ? void 0 : (_formData$waterConect2 = formData.waterConectionDetails) === null || _formData$waterConect2 === void 0 ? void 0 : _formData$waterConect2.proposedPipeSize) || "");
  const [proposedPipeSizeList, setProposedPipeSizeList] = useState([]);
  let validation = {};
  const {
    isLoading: wsServiceCalculationLoading,
    data: wsServiceCalculation
  } = Digit.Hooks.ws.WSSearchMdmsTypes.useWSServicesCalculation(tenantId);
  useEffect(() => {
    var _wsServiceCalculation;
    if ((wsServiceCalculation === null || wsServiceCalculation === void 0 ? void 0 : (_wsServiceCalculation = wsServiceCalculation.PipeSize) === null || _wsServiceCalculation === void 0 ? void 0 : _wsServiceCalculation.length) > 0) {
      let pipeLists = [];
      wsServiceCalculation === null || wsServiceCalculation === void 0 ? void 0 : wsServiceCalculation.PipeSize.forEach(type => {
        pipeLists.push({
          i18nKey: `${type.size} ${t("WS_INCHES_LABEL")}`,
          code: type.size,
          id: type.id,
          size: type.size
        });
      });
      setProposedPipeSizeList(pipeLists);
    }
  }, [wsServiceCalculation]);
  function onAdd() {}
  function setNumberOfProposedTaps(e) {
    setProposedTaps(e.target.value);
  }
  function setProposedPipeSizeSelect(value) {
    setProposedPipeSize(value);
  }
  const onSkip = () => onSelect();
  const handleSubmit = () => {
    let details = {};
    details.proposedTaps = proposedTaps;
    details.proposedPipeSize = proposedPipeSize;
    onSelect(config.key, details);
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Timeline, {
    currentStep: 2
  }), !wsServiceCalculationLoading ? /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: handleSubmit,
    onSkip: onSkip,
    isDisabled: !proposedTaps || !proposedPipeSize,
    onAdd: onAdd
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("WS_NO_OF_TAPS_PROPOSED"), "*"), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "proposedTaps",
    onChange: setNumberOfProposedTaps,
    value: proposedTaps
  }, validation = {
    isRequired: true,
    pattern: "^[0-9]*$",
    title: t("ERR_DEFAULT_INPUT_FIELD_MSG"),
    type: "text"
  })), /*#__PURE__*/React.createElement(CardLabel, null, t("WS_PROPOSED_PIPE_SIZE"), "*"), /*#__PURE__*/React.createElement(RadioOrSelect, {
    name: "proposedPipeSize",
    options: proposedPipeSizeList,
    selectedOption: proposedPipeSize,
    optionKey: "i18nKey",
    onSelect: setProposedPipeSizeSelect,
    t: t
  })) : /*#__PURE__*/React.createElement(Loader, null));
};

const WSDocsRequired = ({
  onSelect,
  onSkip,
  config
}) => {
  var _wsDocs$Documents;
  const {
    t
  } = useTranslation();
  const tenantId = Digit.ULBService.getStateId();
  const goNext = () => {
    onSelect("DocsReq", "");
  };
  const {
    isLoading: wsDocsLoading,
    data: wsDocs
  } = Digit.Hooks.ws.WSSearchMdmsTypes.useWSServicesMasters(tenantId);
  return /*#__PURE__*/React.createElement(Fragment$1, null, /*#__PURE__*/React.createElement(Card, null, /*#__PURE__*/React.createElement(CardHeader, null, t(`WS_COMMON_APPL_NEW_CONNECTION`)), /*#__PURE__*/React.createElement(CitizenInfoLabel, {
    style: {
      margin: "0px"
    },
    textStyle: {
      color: "#0B0C0C"
    },
    text: t(`OBPS_DOCS_REQUIRED_TIME`),
    showInfo: false
  }), /*#__PURE__*/React.createElement(CardText, {
    style: {
      color: "#0B0C0C",
      marginTop: "12px"
    }
  }, t(`WS_NEW_CONNECTION_TEST_1`)), /*#__PURE__*/React.createElement(CardText, {
    style: {
      color: "#0B0C0C",
      marginTop: "12px"
    }
  }, t(`WS_NEW_CONNECTION_TEST_2`)), /*#__PURE__*/React.createElement(CardSubHeader, null, t("WS_DOC_REQ_SCREEN_LABEL")), /*#__PURE__*/React.createElement(CardText, {
    style: {
      color: "#0B0C0C",
      marginTop: "12px"
    }
  }, t(`WS_NEW_CONNECTION_TEST_3`)), wsDocsLoading ? /*#__PURE__*/React.createElement(Loader, null) : /*#__PURE__*/React.createElement(Fragment$1, null, wsDocs === null || wsDocs === void 0 ? void 0 : (_wsDocs$Documents = wsDocs.Documents) === null || _wsDocs$Documents === void 0 ? void 0 : _wsDocs$Documents.map((doc, index) => {
    var _doc$dropdownData;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
      style: {
        fontWeight: 700,
        marginBottom: "8px"
      },
      key: index
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        display: "flex"
      }
    }, /*#__PURE__*/React.createElement("div", null, `${index + 1}.`, "\xA0"), /*#__PURE__*/React.createElement("div", null, ` ${t(doc === null || doc === void 0 ? void 0 : doc.code.replace('.', '_'))}`))), /*#__PURE__*/React.createElement("div", {
      style: {
        marginBottom: "16px",
        marginLeft: "18px"
      }
    }, doc === null || doc === void 0 ? void 0 : (_doc$dropdownData = doc.dropdownData) === null || _doc$dropdownData === void 0 ? void 0 : _doc$dropdownData.map((value, index) => {
      var _doc$dropdownData2;
      return (doc === null || doc === void 0 ? void 0 : (_doc$dropdownData2 = doc.dropdownData) === null || _doc$dropdownData2 === void 0 ? void 0 : _doc$dropdownData2.length) !== index + 1 ? /*#__PURE__*/React.createElement("span", null, `${t(value === null || value === void 0 ? void 0 : value.i18nKey)}, `) : /*#__PURE__*/React.createElement("span", null, `${t(value === null || value === void 0 ? void 0 : value.i18nKey)}`);
    })));
  })), /*#__PURE__*/React.createElement(SubmitBar, {
    label: t(`CS_COMMON_NEXT`),
    onSubmit: goNext
  })));
};

const WSDocumentDetails = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  setError: setFormError,
  clearErrors: clearFormErrors,
  formState
}) => {
  var _formData$documents, _wsDocs$Documents;
  const tenantId = Digit.ULBService.getStateId();
  const [documents, setDocuments] = useState((formData === null || formData === void 0 ? void 0 : (_formData$documents = formData.documents) === null || _formData$documents === void 0 ? void 0 : _formData$documents.documents) || []);
  const [error, setError] = useState(null);
  const [enableSubmit, setEnableSubmit] = useState(true);
  const [checkRequiredFields, setCheckRequiredFields] = useState(false);
  const {
    isLoading: wsDocsLoading,
    data: wsDocs
  } = Digit.Hooks.ws.WSSearchMdmsTypes.useWSServicesMasters(tenantId);
  const handleSubmit = () => {
    let document = formData.documents;
    let documentStep;
    documentStep = {
      ...document,
      documents: documents
    };
    onSelect(config.key, documentStep);
  };
  const onSkip = () => onSelect();
  function onAdd() {}
  useEffect(() => {
    let count = 0;
    wsDocs === null || wsDocs === void 0 ? void 0 : wsDocs.Documents.map(doc => {
      let isRequired = false;
      documents.map(data => {
        if (doc.required && data !== null && data !== void 0 && data.documentType.includes(doc.code)) isRequired = true;
      });
      if (!isRequired && doc.required) count = count + 1;
    });
    if ((count == "0" || count == 0) && documents.length > 0) setEnableSubmit(false);else setEnableSubmit(true);
  }, [documents, checkRequiredFields]);
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Timeline, {
    currentStep: 3
  }), !wsDocsLoading ? /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: handleSubmit,
    onSkip: onSkip,
    isDisabled: enableSubmit,
    onAdd: onAdd
  }, wsDocs === null || wsDocs === void 0 ? void 0 : (_wsDocs$Documents = wsDocs.Documents) === null || _wsDocs$Documents === void 0 ? void 0 : _wsDocs$Documents.map((document, index) => {
    return /*#__PURE__*/React.createElement(SelectDocument, {
      key: index,
      document: document,
      t: t,
      error: error,
      setError: setError,
      setDocuments: setDocuments,
      documents: documents,
      setCheckRequiredFields: setCheckRequiredFields
    });
  }), error && /*#__PURE__*/React.createElement(Toast, {
    label: error,
    onClose: () => setError(null),
    error: true
  })) : /*#__PURE__*/React.createElement(Loader, null));
};
function SelectDocument({
  t,
  key,
  document: doc,
  setDocuments,
  error,
  setError,
  documents,
  setCheckRequiredFields
}) {
  var _doc$dropdownData;
  const filteredDocument = documents === null || documents === void 0 ? void 0 : documents.filter(item => {
    var _item$documentType;
    return item === null || item === void 0 ? void 0 : (_item$documentType = item.documentType) === null || _item$documentType === void 0 ? void 0 : _item$documentType.includes(doc === null || doc === void 0 ? void 0 : doc.code);
  })[0];
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const [selectedDocument, setSelectedDocument] = useState(filteredDocument ? {
    ...filteredDocument,
    active: true,
    code: filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.documentType,
    i18nKey: filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.documentType
  } : (doc === null || doc === void 0 ? void 0 : (_doc$dropdownData = doc.dropdownData) === null || _doc$dropdownData === void 0 ? void 0 : _doc$dropdownData.length) === 1 ? doc === null || doc === void 0 ? void 0 : doc.dropdownData[0] : {});
  const [file, setFile] = useState(null);
  const [uploadedFile, setUploadedFile] = useState(() => (filteredDocument === null || filteredDocument === void 0 ? void 0 : filteredDocument.fileStoreId) || null);
  const handleSelectDocument = value => setSelectedDocument(value);
  function selectfile(e) {
    setFile(e.target.files[0]);
  }
  useEffect(() => {
    if (selectedDocument !== null && selectedDocument !== void 0 && selectedDocument.code) {
      setDocuments(prev => {
        const filteredDocumentsByDocumentType = prev === null || prev === void 0 ? void 0 : prev.filter(item => (item === null || item === void 0 ? void 0 : item.documentType) !== (selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code));
        if ((uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.length) === 0 || uploadedFile === null) return filteredDocumentsByDocumentType;
        const filteredDocumentsByFileStoreId = filteredDocumentsByDocumentType === null || filteredDocumentsByDocumentType === void 0 ? void 0 : filteredDocumentsByDocumentType.filter(item => (item === null || item === void 0 ? void 0 : item.fileStoreId) !== uploadedFile);
        return [...filteredDocumentsByFileStoreId, {
          documentType: selectedDocument === null || selectedDocument === void 0 ? void 0 : selectedDocument.code,
          fileStoreId: uploadedFile,
          documentUid: uploadedFile,
          fileName: (file === null || file === void 0 ? void 0 : file.name) || ""
        }];
      });
    }
  }, [uploadedFile, selectedDocument]);
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        if (file.size >= 5242880) {
          setError(t("CS_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            setUploadedFile(null);
            const response = await Digit.UploadServices.Filestorage("WS", file, tenantId === null || tenantId === void 0 ? void 0 : tenantId.split(".")[0]);
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("CS_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {
            setError(t("CS_FILE_UPLOAD_ERROR"));
          }
        }
      }
    })();
  }, [file]);
  return /*#__PURE__*/React.createElement("div", {
    style: {
      marginBottom: "24px"
    }
  }, /*#__PURE__*/React.createElement(CardLabel, null, doc !== null && doc !== void 0 && doc.required ? `${t(doc === null || doc === void 0 ? void 0 : doc.i18nKey)} *` : `${t(doc === null || doc === void 0 ? void 0 : doc.i18nKey)}`), /*#__PURE__*/React.createElement(Dropdown, {
    t: t,
    isMandatory: false,
    option: doc === null || doc === void 0 ? void 0 : doc.dropdownData,
    selected: selectedDocument,
    optionKey: "i18nKey",
    select: handleSelectDocument
  }), /*#__PURE__*/React.createElement(UploadFile, {
    id: `noc-doc-${key}`,
    extraStyleName: "propertyCreate",
    accept: ".jpg,.png,.pdf",
    onUpload: selectfile,
    onDelete: () => {
      setUploadedFile(null);
      setCheckRequiredFields(true);
    },
    message: uploadedFile ? `1 ${t(`CS_ACTION_FILEUPLOADED`)}` : t(`ES_NO_FILE_SELECTED_LABEL`),
    error: error
  }));
}

const WSSewerageConnectionDetails = ({
  t,
  config,
  onSelect,
  formData
}) => {
  var _formData$sewerageCon, _formData$sewerageCon2;
  const [proposedWaterClosets, setProposedWaterClosets] = useState((formData === null || formData === void 0 ? void 0 : (_formData$sewerageCon = formData.sewerageConnectionDetails) === null || _formData$sewerageCon === void 0 ? void 0 : _formData$sewerageCon.proposedWaterClosets) || "");
  const [proposedToilets, setProposedToilets] = useState((formData === null || formData === void 0 ? void 0 : (_formData$sewerageCon2 = formData.sewerageConnectionDetails) === null || _formData$sewerageCon2 === void 0 ? void 0 : _formData$sewerageCon2.proposedToilets) || "");
  let validation = {};
  function onAdd() {}
  function setNumberOfProposedWaterClosets(e) {
    setProposedWaterClosets(e.target.value);
  }
  function setNumberOfProposedToilets(e) {
    setProposedToilets(e.target.value);
  }
  const onSkip = () => onSelect();
  const handleSubmit = () => {
    let details = {};
    details.proposedWaterClosets = proposedWaterClosets;
    details.proposedToilets = proposedToilets;
    onSelect(config.key, details);
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Timeline, {
    currentStep: 2
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: handleSubmit,
    onSkip: onSkip,
    isDisabled: !proposedWaterClosets || !proposedToilets,
    onAdd: onAdd
  }, /*#__PURE__*/React.createElement(CardLabel, null, t("WS_NO_OF_WATER_CLOSETS"), "*"), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    type: "number",
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "proposedWaterClosets",
    onChange: setNumberOfProposedWaterClosets,
    value: proposedWaterClosets
  }, validation = {
    isRequired: true,
    pattern: "^[0-9]*$",
    title: t("ERR_DEFAULT_INPUT_FIELD_MSG")
  })), /*#__PURE__*/React.createElement(CardLabel, null, t("WS_SERV_DETAIL_NO_OF_TOILETS"), "*"), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    type: "number",
    isMandatory: false,
    optionKey: "i18nKey",
    t: t,
    name: "proposedToilets",
    onChange: setNumberOfProposedToilets,
    value: proposedToilets
  }, validation = {
    isRequired: true,
    pattern: "^[0-9]*$",
    title: t("ERR_DEFAULT_INPUT_FIELD_MSG")
  }))));
};

const WSPlumberPreference = ({
  t,
  config,
  onSelect,
  formData
}) => {
  const [plumberPreference, setPlumberPreference] = useState((formData === null || formData === void 0 ? void 0 : formData.plumberPreference) || "");
  const plumberPreferenceList = [{
    i18nKey: "WS_I_WOULD_PREFER_FROM_MUNICIPAL_OFFICE",
    code: "ULB"
  }, {
    i18nKey: "WS_I_WILL_ARRAGE_THE_PLUMBER_MYSELF",
    code: "Self"
  }];
  function onAdd() {}
  function onPlumberPreferenceSelect(value) {
    setPlumberPreference(value);
  }
  const onSkip = () => onSelect();
  const handleSubmit = () => {
    onSelect(config.key, plumberPreference);
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Timeline, {
    currentStep: 2
  }), /*#__PURE__*/React.createElement(FormStep, {
    t: t,
    config: config,
    onSelect: handleSubmit,
    onSkip: onSkip,
    isDisabled: !plumberPreference,
    onAdd: onAdd
  }, /*#__PURE__*/React.createElement(RadioOrSelect, {
    name: "plumberPreference",
    options: plumberPreferenceList,
    selectedOption: plumberPreference,
    optionKey: "i18nKey",
    onSelect: onPlumberPreferenceSelect,
    t: t
  })));
};

const ConnectionHolder = ({
  t,
  config,
  onSelect,
  userType,
  formData,
  ownerIndex
}) => {
  var _formData$ConnectionH, _formData$formData, _formData$formData$Co, _formData$ConnectionH2, _formData$formData2, _formData$formData2$C, _formData$ConnectionH3, _formData$formData3, _formData$formData3$C, _formData$ConnectionH4, _formData$formData4, _formData$formData4$C, _formData$ConnectionH5, _formData$formData5, _formData$formData5$C, _formData$ConnectionH6, _formData$formData6, _formData$formData6$C, _formData$ConnectionH7, _formData$formData7, _formData$formData7$C, _formData$ConnectionH8, _formData$formData8, _formData$formData8$C, _formData$config$key, _formData$ConnectionH9, _formData$ConnectionH10, _Documentsob$Property;
  let validation = {};
  const [name, setName] = useState((formData === null || formData === void 0 ? void 0 : (_formData$ConnectionH = formData.ConnectionHolderDetails) === null || _formData$ConnectionH === void 0 ? void 0 : _formData$ConnectionH.name) || (formData === null || formData === void 0 ? void 0 : (_formData$formData = formData.formData) === null || _formData$formData === void 0 ? void 0 : (_formData$formData$Co = _formData$formData.ConnectionHolderDetails) === null || _formData$formData$Co === void 0 ? void 0 : _formData$formData$Co.name) || "");
  const [guardian, setguardian] = useState((formData === null || formData === void 0 ? void 0 : (_formData$ConnectionH2 = formData.ConnectionHolderDetails) === null || _formData$ConnectionH2 === void 0 ? void 0 : _formData$ConnectionH2.guardian) || (formData === null || formData === void 0 ? void 0 : (_formData$formData2 = formData.formData) === null || _formData$formData2 === void 0 ? void 0 : (_formData$formData2$C = _formData$formData2.ConnectionHolderDetails) === null || _formData$formData2$C === void 0 ? void 0 : _formData$formData2$C.guardian) || "");
  const [gender, setGender] = useState((formData === null || formData === void 0 ? void 0 : (_formData$ConnectionH3 = formData.ConnectionHolderDetails) === null || _formData$ConnectionH3 === void 0 ? void 0 : _formData$ConnectionH3.gender) || (formData === null || formData === void 0 ? void 0 : (_formData$formData3 = formData.formData) === null || _formData$formData3 === void 0 ? void 0 : (_formData$formData3$C = _formData$formData3.ConnectionHolderDetails) === null || _formData$formData3$C === void 0 ? void 0 : _formData$formData3$C.gender));
  const [relationship, setrelationship] = useState((formData === null || formData === void 0 ? void 0 : (_formData$ConnectionH4 = formData.ConnectionHolderDetails) === null || _formData$ConnectionH4 === void 0 ? void 0 : _formData$ConnectionH4.relationship) || (formData === null || formData === void 0 ? void 0 : (_formData$formData4 = formData.formData) === null || _formData$formData4 === void 0 ? void 0 : (_formData$formData4$C = _formData$formData4.ConnectionHolderDetails) === null || _formData$formData4$C === void 0 ? void 0 : _formData$formData4$C.relationship));
  const [mobileNumber, setMobileNumber] = useState((formData === null || formData === void 0 ? void 0 : (_formData$ConnectionH5 = formData.ConnectionHolderDetails) === null || _formData$ConnectionH5 === void 0 ? void 0 : _formData$ConnectionH5.mobileNumber) || (formData === null || formData === void 0 ? void 0 : (_formData$formData5 = formData.formData) === null || _formData$formData5 === void 0 ? void 0 : (_formData$formData5$C = _formData$formData5.ConnectionHolderDetails) === null || _formData$formData5$C === void 0 ? void 0 : _formData$formData5$C.mobileNumber) || "");
  const [address, setaddress] = useState((formData === null || formData === void 0 ? void 0 : (_formData$ConnectionH6 = formData.ConnectionHolderDetails) === null || _formData$ConnectionH6 === void 0 ? void 0 : _formData$ConnectionH6.address) || (formData === null || formData === void 0 ? void 0 : (_formData$formData6 = formData.formData) === null || _formData$formData6 === void 0 ? void 0 : (_formData$formData6$C = _formData$formData6.ConnectionHolderDetails) === null || _formData$formData6$C === void 0 ? void 0 : _formData$formData6$C.address) || "");
  const [documentId, setdocumentId] = useState((formData === null || formData === void 0 ? void 0 : (_formData$ConnectionH7 = formData.ConnectionHolderDetails) === null || _formData$ConnectionH7 === void 0 ? void 0 : _formData$ConnectionH7.documentId) || (formData === null || formData === void 0 ? void 0 : (_formData$formData7 = formData.formData) === null || _formData$formData7 === void 0 ? void 0 : (_formData$formData7$C = _formData$formData7.ConnectionHolderDetails) === null || _formData$formData7$C === void 0 ? void 0 : _formData$formData7$C.documentId) || "");
  const [isOwnerSame, setisOwnerSame] = useState(!(formData !== null && formData !== void 0 && (_formData$ConnectionH8 = formData.ConnectionHolderDetails) !== null && _formData$ConnectionH8 !== void 0 && _formData$ConnectionH8.isOwnerSame || formData !== null && formData !== void 0 && (_formData$formData8 = formData.formData) !== null && _formData$formData8 !== void 0 && (_formData$formData8$C = _formData$formData8.ConnectionHolderDetails) !== null && _formData$formData8$C !== void 0 && _formData$formData8$C.isOwnerSame) ? false : true);
  const [uploadedFile, setUploadedFile] = useState((formData === null || formData === void 0 ? void 0 : (_formData$config$key = formData[config.key]) === null || _formData$config$key === void 0 ? void 0 : _formData$config$key.fileStoreId) || null);
  const [file, setFile] = useState(null);
  const [error, setError] = useState(null);
  const [dropdownValue, setDropdownValue] = useState((formData === null || formData === void 0 ? void 0 : (_formData$ConnectionH9 = formData.ConnectionHolderDetails) === null || _formData$ConnectionH9 === void 0 ? void 0 : _formData$ConnectionH9.documentType) || "");
  const [ownerType, setOwnerType] = useState((formData === null || formData === void 0 ? void 0 : (_formData$ConnectionH10 = formData.ConnectionHolderDetails) === null || _formData$ConnectionH10 === void 0 ? void 0 : _formData$ConnectionH10.specialCategoryType) || {});
  const tenantId = Digit.ULBService.getCurrentTenantId();
  const stateId = Digit.ULBService.getStateId();
  let dropdownData = [];
  const {
    data: Documentsob = {}
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "Documents");
  const docs = Documentsob === null || Documentsob === void 0 ? void 0 : (_Documentsob$Property = Documentsob.PropertyTax) === null || _Documentsob$Property === void 0 ? void 0 : _Documentsob$Property.Documents;
  const specialProofIdentity = Array.isArray(docs) && docs.filter(doc => doc.code.includes("SPECIALCATEGORYPROOF"));
  if (specialProofIdentity.length > 0) {
    var _specialProofIdentity, _dropdownData;
    dropdownData = (_specialProofIdentity = specialProofIdentity[0]) === null || _specialProofIdentity === void 0 ? void 0 : _specialProofIdentity.dropdownData;
    dropdownData.forEach(data => {
      data.i18nKey = stringReplaceAll(data.code, ".", "_");
    });
    dropdownData = (_dropdownData = dropdownData) === null || _dropdownData === void 0 ? void 0 : _dropdownData.filter(dropdown => dropdown.parentValue.includes(ownerType === null || ownerType === void 0 ? void 0 : ownerType.code));
    if (dropdownData.length == 1 && dropdownValue != dropdownData[0]) {
      setTypeOfDropdownValue(dropdownData[0]);
    }
  }
  const GuardianOptions = [{
    name: "HUSBAND",
    code: "HUSBAND",
    i18nKey: "COMMON_MASTERS_OWNERTYPE_HUSBAND"
  }, {
    name: "Father",
    code: "FATHER",
    i18nKey: "COMMON_MASTERS_OWNERTYPE_FATHER"
  }];
  const {
    isLoading,
    data: genderTypeData
  } = Digit.Hooks.obps.useMDMS(stateId, "common-masters", ["GenderType"]);
  const {
    data: Menu,
    isLoading: isSpecialcategoryLoading
  } = Digit.Hooks.pt.usePropertyMDMS(stateId, "PropertyTax", "OwnerType");
  Menu ? Menu.sort((a, b) => a.name.localeCompare(b.name)) : "";
  let menu = [];
  genderTypeData && genderTypeData["common-masters"].GenderType.filter(data => data.active).map(genderDetails => {
    menu.push({
      i18nKey: `COMMON_GENDER_${genderDetails.code}`,
      code: `${genderDetails.code}`,
      value: `${genderDetails.code}`
    });
  });
  useEffect(() => {
    (async () => {
      setError(null);
      if (file) {
        if (file.size >= 2000000) {
          setError(t("PT_MAXIMUM_UPLOAD_SIZE_EXCEEDED"));
        } else {
          try {
            var _response$data, _response$data$files;
            const response = await Digit.UploadServices.Filestorage("property-upload", file, Digit.ULBService.getStateId());
            if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$files = _response$data.files) === null || _response$data$files === void 0 ? void 0 : _response$data$files.length) > 0) {
              var _response$data2, _response$data2$files;
              setUploadedFile(response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : (_response$data2$files = _response$data2.files[0]) === null || _response$data2$files === void 0 ? void 0 : _response$data2$files.fileStoreId);
            } else {
              setError(t("PT_FILE_UPLOAD_ERROR"));
            }
          } catch (err) {}
        }
      }
    })();
  }, [file]);
  function selectChecked(e) {
    setisOwnerSame(!isOwnerSame);
  }
  function setTypeOfDropdownValue(dropdownValue) {
    setDropdownValue(dropdownValue);
  }
  function SelectName(e) {
    setName(e.target.value);
  }
  function selectguardian(e) {
    setguardian(e.target.value);
  }
  function setGenderName(value) {
    setGender(value);
  }
  function setRelationshipName(value) {
    setrelationship(value);
  }
  function setMobileNo(e) {
    setMobileNumber(e.target.value);
  }
  function selectaddress(e) {
    setaddress(e.target.value);
  }
  function selectdocumentId(e) {
    setdocumentId(e.target.value);
  }
  function setTypeOfOwner(value) {
    setOwnerType(value);
  }
  function selectfile(e) {
    setFile(e.target.files[0]);
  }
  const goNext = () => {
    if (isOwnerSame == true) {
      onSelect(config.key, {
        "property ID": "PT-23-45-677903",
        isOwnerSame: isOwnerSame
      });
    } else {
      let ConnectionDet = {
        isOwnerSame: isOwnerSame,
        name: name,
        mobileNumber: mobileNumber,
        gender: gender,
        guardian: guardian,
        address: address,
        relationship: relationship,
        specialCategoryType: ownerType,
        documentId: documentId,
        fileStoreId: uploadedFile,
        documentType: dropdownValue
      };
      onSelect(config.key, ConnectionDet);
    }
  };
  const onSkip = () => onSelect();
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Timeline, {
    currentStep: 2
  }), !isLoading ? /*#__PURE__*/React.createElement(FormStep, {
    config: config,
    onSelect: goNext,
    onSkip: onSkip,
    t: t,
    isDisabled: !isOwnerSame && (!name || !mobileNumber || !gender)
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CheckBox, {
    label: t("WS_CONN_HOLDER_SAME_AS_OWNER_DETAILS"),
    onChange: e => selectChecked()
    ,
    checked: isOwnerSame,
    style: {
      paddingBottom: "10px",
      paddingTop: "10px"
    }
  })), !isOwnerSame && /*#__PURE__*/React.createElement("div", {
    style: {
      border: "solid",
      borderRadius: "5px",
      padding: "10px",
      paddingTop: "20px",
      marginTop: "10px",
      borderColor: "#f3f3f3",
      background: "#FAFAFA"
    }
  }, /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_OWN_DETAIL_NAME")}*`), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    type: "text",
    style: {
      background: "#FAFAFA"
    },
    isMandatory: false,
    optionKey: "i18nKey",
    name: "name",
    value: name,
    onChange: SelectName
  }, validation = {
    isRequired: true,
    pattern: "^[a-zA-Z-.`' ]*$",
    type: "text",
    title: t("WS_NAME_ERROR_MESSAGE")
  })), /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_OWN_DETAIL_GENDER_LABEL")}*`), /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    options: menu,
    optionsKey: "code",
    name: "gender",
    value: gender,
    selectedOption: gender,
    onSelect: setGenderName,
    isDependent: true,
    labelKey: "COMMON_GENDER"
  }), /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_OWN_MOBILE_NO")}*`), /*#__PURE__*/React.createElement(MobileNumber, Object.assign({
    value: mobileNumber,
    name: "mobileNumber",
    onChange: value => setMobileNo({
      target: {
        value
      }
    }),
    style: {
      background: "#FAFAFA"
    }
  }, {
    required: true,
    pattern: "[6-9]{1}[0-9]{9}",
    type: "tel",
    title: t("CORE_COMMON_APPLICANT_MOBILE_NUMBER_INVALID")
  })), /*#__PURE__*/React.createElement(CardLabel, null, t("WS_OWN_DETAIL_GUARDIAN_LABEL")), /*#__PURE__*/React.createElement(TextInput, Object.assign({
    t: t,
    type: "text",
    isMandatory: false,
    optionKey: "i18nKey",
    name: "guardian",
    value: guardian,
    style: {
      background: "#FAFAFA"
    },
    onChange: selectguardian
  }, validation = {
    isRequired: true,
    pattern: "^[a-zA-Z-.`' ]*$",
    type: "text",
    title: t("WS_NAME_ERROR_MESSAGE")
  })), /*#__PURE__*/React.createElement(RadioButtons, {
    t: t,
    optionsKey: "i18nKey",
    name: "relationship",
    options: GuardianOptions,
    value: relationship,
    selectedOption: relationship,
    onSelect: setRelationshipName,
    isDependent: true,
    labelKey: "COMMON_MASTERS_OWNERTYPE"
  }), /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_COMMON_TABLE_COL_ADDRESS")}`), /*#__PURE__*/React.createElement(TextInput, {
    t: t,
    type: "text",
    style: {
      background: "#FAFAFA"
    },
    isMandatory: false,
    optionKey: "i18nKey",
    name: "address",
    value: address,
    onChange: selectaddress
  }), /*#__PURE__*/React.createElement(CardLabel, null, t("WS_OWN_SPECIAL_CAT_LABEL")), /*#__PURE__*/React.createElement(Dropdown, {
    className: "form-field",
    selected: ownerType
    ,
    option: Menu,
    select: setTypeOfOwner,
    optionKey: "i18nKey",
    t: t
  }), ownerType && Object.entries(ownerType).length > 0 && (ownerType === null || ownerType === void 0 ? void 0 : ownerType.code) !== "NONE" && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_DOCUMENT_ID_LABEL")}`), /*#__PURE__*/React.createElement(TextInput, {
    t: t,
    type: "text",
    style: {
      background: "#FAFAFA"
    },
    isMandatory: false,
    optionKey: "i18nKey",
    name: "documentId",
    value: documentId,
    onChange: selectdocumentId
  }), /*#__PURE__*/React.createElement(CardLabel, null, `${t("WS_DOCUMENT_TYPE_LABEL")}`), /*#__PURE__*/React.createElement(Dropdown, {
    t: t,
    isMandatory: false,
    option: dropdownData,
    selected: dropdownValue,
    optionKey: "i18nKey",
    select: setTypeOfDropdownValue
  }), /*#__PURE__*/React.createElement(UploadFile, {
    id: "ptm-doc"
    ,
    accept: ".jpg,.png,.pdf",
    onUpload: selectfile,
    onDelete: () => {
      setUploadedFile(null);
    },
    message: uploadedFile ? `1 ${t(`WS_ACTION_FILEUPLOADED`)}` : t(`WS_ACTION_NO_FILEUPLOADED`),
    error: error
  }), error ? /*#__PURE__*/React.createElement("div", {
    style: {
      height: "20px",
      width: "100%",
      fontSize: "20px",
      color: "red",
      marginTop: "5px"
    }
  }, error) : ""))) : /*#__PURE__*/React.createElement(Loader, null));
};

const CheckPage = ({
  onSubmit,
  value
}) => {
  var _ConnectionHolderDeta, _ConnectionHolderDeta2, _ConnectionHolderDeta3, _waterConectionDetail;
  const {
    t
  } = useTranslation();
  const history = useHistory();
  const match = useRouteMatch();
  const {
    ConnectionHolderDetails,
    plumberPreference,
    serviceName,
    waterConectionDetails,
    sewerageConnectionDetails,
    documents
  } = value;
  let routeLink = `/digit-ui/citizen/ws/create-application`;
  function routeTo(jumpTo) {
    location.href = jumpTo;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Timeline, {
    currentStep: 4
  }), /*#__PURE__*/React.createElement(Header, null, t("WS_COMMON_SUMMARY")), /*#__PURE__*/React.createElement(Card, {
    style: {
      paddingRight: "16px"
    }
  }, /*#__PURE__*/React.createElement(CardHeader, null, t(`WS_BASIC_DETAILS_HEADER`)), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_PROPERTY_ID_LABEL"),
    text: "PT-767-23-0654553"
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_OWNERS_NAME_LABEL"),
    text: t(`NS Prasad`)
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_COMMON_TABLE_COL_ADDRESS"),
    text: "NA"
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_CONNECTION_DETAILS_STATUS_LABEL"),
    text: "NA"
  }))), /*#__PURE__*/React.createElement(Card, {
    style: {
      paddingRight: "16px"
    }
  }, /*#__PURE__*/React.createElement(CardHeader, null, t("WS_COMMON_CONNECTION_HOLDER_DETAILS_HEADER")), /*#__PURE__*/React.createElement(LinkButton, {
    label: /*#__PURE__*/React.createElement(EditIcon, {
      style: {
        marginTop: "-10px",
        float: "right",
        position: "relative",
        bottom: "32px"
      }
    }),
    style: {
      width: "100px",
      display: "inline"
    },
    onClick: () => routeTo(`${routeLink}/connection-holder`)
  }), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_OWN_MOBILE_NO"),
    text: ConnectionHolderDetails === null || ConnectionHolderDetails === void 0 ? void 0 : ConnectionHolderDetails.mobileNumber
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_OWN_DETAIL_NAME"),
    text: ConnectionHolderDetails === null || ConnectionHolderDetails === void 0 ? void 0 : ConnectionHolderDetails.name
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_OWN_DETAIL_GENDER_LABEL"),
    text: t(ConnectionHolderDetails === null || ConnectionHolderDetails === void 0 ? void 0 : (_ConnectionHolderDeta = ConnectionHolderDetails.gender) === null || _ConnectionHolderDeta === void 0 ? void 0 : _ConnectionHolderDeta.i18nKey)
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_FATHERS_HUSBAND_NAME"),
    text: ConnectionHolderDetails === null || ConnectionHolderDetails === void 0 ? void 0 : ConnectionHolderDetails.guardian
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_CONN_HOLDER_OWN_DETAIL_RELATION_LABEL"),
    text: t(ConnectionHolderDetails === null || ConnectionHolderDetails === void 0 ? void 0 : (_ConnectionHolderDeta2 = ConnectionHolderDetails.relationship) === null || _ConnectionHolderDeta2 === void 0 ? void 0 : _ConnectionHolderDeta2.i18nKey)
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_OWN_DETAIL_CROSADD"),
    text: ConnectionHolderDetails === null || ConnectionHolderDetails === void 0 ? void 0 : ConnectionHolderDetails.address
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_OWN_DETAIL_SPECIAL_APPLICANT_LABEL"),
    text: t(ConnectionHolderDetails === null || ConnectionHolderDetails === void 0 ? void 0 : (_ConnectionHolderDeta3 = ConnectionHolderDetails.specialCategoryType) === null || _ConnectionHolderDeta3 === void 0 ? void 0 : _ConnectionHolderDeta3.i18nKey)
  }))), /*#__PURE__*/React.createElement(Card, {
    style: {
      paddingRight: "16px"
    }
  }, /*#__PURE__*/React.createElement(CardHeader, null, t("WS_COMMON_CONNECTION_DETAIL")), /*#__PURE__*/React.createElement(LinkButton, {
    label: /*#__PURE__*/React.createElement(EditIcon, {
      style: {
        marginTop: "-10px",
        float: "right",
        position: "relative",
        bottom: "32px"
      }
    }),
    style: {
      width: "100px",
      display: "inline"
    },
    onClick: () => routeTo(`${routeLink}/service-name`)
  }), /*#__PURE__*/React.createElement(StatusTable, null, /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_SERVICE_NAME_LABEL"),
    text: t(serviceName === null || serviceName === void 0 ? void 0 : serviceName.i18nKey)
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_SERV_DETAIL_CONN_TYPE"),
    text: "Metered"
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_NO_OF_TAPS"),
    text: waterConectionDetails === null || waterConectionDetails === void 0 ? void 0 : waterConectionDetails.proposedTaps
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_SERV_DETAIL_PIPE_SIZE"),
    text: t(waterConectionDetails === null || waterConectionDetails === void 0 ? void 0 : (_waterConectionDetail = waterConectionDetails.proposedPipeSize) === null || _waterConectionDetail === void 0 ? void 0 : _waterConectionDetail.i18nKey)
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_NO_OF_WATER_CLOSETS_LABEL"),
    text: sewerageConnectionDetails === null || sewerageConnectionDetails === void 0 ? void 0 : sewerageConnectionDetails.proposedWaterClosets
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_SERV_DETAIL_NO_OF_TOILETS"),
    text: sewerageConnectionDetails === null || sewerageConnectionDetails === void 0 ? void 0 : sewerageConnectionDetails.proposedToilets
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_SERV_DETAIL_WATER_SOURCE"),
    text: "NA"
  }), /*#__PURE__*/React.createElement(Row, {
    className: "border-none",
    label: t("WS_SERV_DETAIL_WATER_SUB_SOURCE"),
    text: "NA"
  }))), /*#__PURE__*/React.createElement(Card, {
    style: {
      paddingRight: "16px"
    }
  }, /*#__PURE__*/React.createElement(CardHeader, null, t("WS_COMMON_DOCUMENT_DETAILS")), /*#__PURE__*/React.createElement(LinkButton, {
    label: /*#__PURE__*/React.createElement(EditIcon, {
      style: {
        marginTop: "-10px",
        float: "right",
        position: "relative",
        bottom: "32px"
      }
    }),
    style: {
      width: "100px",
      display: "inline"
    },
    onClick: () => routeTo(`${routeLink}/document-details`)
  }), documents && documents.map((doc, index) => {
    var _doc$documentType;
    return /*#__PURE__*/React.createElement("div", {
      key: `doc-${index}`
    }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(CardSectionHeader, null, t(doc === null || doc === void 0 ? void 0 : (_doc$documentType = doc.documentType) === null || _doc$documentType === void 0 ? void 0 : _doc$documentType.split('.').slice(0, 2).join('_'))), /*#__PURE__*/React.createElement(StatusTable, null, (documents === null || documents === void 0 ? void 0 : documents.length) != index + 1 ? /*#__PURE__*/React.createElement("hr", {
      style: {
        color: "#cccccc",
        backgroundColor: "#cccccc",
        height: "2px",
        marginTop: "20px",
        marginBottom: "20px"
      }
    }) : null)));
  })), /*#__PURE__*/React.createElement(SubmitBar, {
    label: t("CS_COMMON_SUBMIT"),
    onSubmit: onSubmit
  }));
};

const WSModule = ({
  stateCode,
  userType,
  tenants
}) => {
  const moduleCode = "ws";
  const {
    path,
    url
  } = useRouteMatch();
  const language = Digit.StoreData.getCurrentLanguage();
  const {
    isLoading,
    data: store
  } = Digit.Services.useStore({
    stateCode,
    moduleCode,
    language
  });
  Digit.SessionStorage.set("WS_TENANTS", tenants);
  if (isLoading) {
    return /*#__PURE__*/React.createElement(Loader, null);
  }
  if (userType === "citizen") {
    return /*#__PURE__*/React.createElement(App, {
      path: path,
      stateCode: stateCode
    });
  }

};

const WSLinks = ({
  matchPath,
  userType
}) => {
  const {
    t
  } = useTranslation();
  const links = [{
    link: ``,
    i18nKey: t("ACTION_TEST_WATER_AND_SEWERAGE_BILL")
  }, {
    link: ``,
    i18nKey: t("ACTION_TEST_MY_CONNECTIONS")
  }, {
    link: `${matchPath}/create-application`,
    i18nKey: t("ACTION_TEST_APPLY_NEW_CONNECTION")
  }, {
    link: `${matchPath}/search`,
    i18nKey: t("ACTION_TEXT_WS_SEARCH_AND_PAY")
  }];
  return /*#__PURE__*/React.createElement(CitizenHomeCard, {
    header: t("ACTION_TEST_WATER_AND_SEWERAGE"),
    links: links,
    Icon: () => /*#__PURE__*/React.createElement(WSICon, null)
  });
};
const componentsToRegister = {
  WSModule,
  WSLinks,
  WSDocsRequired,
  WSDocumentDetails,
  WSServiceName,
  WSWaterConnectionDetails,
  WSSewerageConnectionDetails,
  WSPlumberPreference,
  ConnectionHolder,
  WSCheckPage: CheckPage
};
const initWSComponents = () => {
  Object.entries(componentsToRegister).forEach(([key, value]) => {
    Digit.ComponentRegistryService.setComponent(key, value);
  });
};

export { initWSComponents };
//# sourceMappingURL=index.modern.js.map
