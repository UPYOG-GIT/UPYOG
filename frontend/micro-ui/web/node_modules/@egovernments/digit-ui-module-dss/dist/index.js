function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var reactI18next = require('react-i18next');
var digitUiReactComponents = require('@egovernments/digit-ui-react-components');
var reactRouterDom = require('react-router-dom');
var reactDateRange = require('react-date-range');
var recharts = require('recharts');

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);

  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");

      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  var dayOfMonth = date.getDate();

  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();
  if (dayOfMonth >= daysInMonth) {
    return endOfDesiredMonth;
  } else {
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}

function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

function startOfWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  var date = toDate(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

var MILLISECONDS_IN_DAY = 86400000;

function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var startOfDayLeft = startOfDay(dirtyDateLeft);
  var startOfDayRight = startOfDay(dirtyDateRight);
  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);
  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight);

  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);
}

function addSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * 1000);
}

function addYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, amount * 12);
}

function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}

function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}

function compareLocalAsc(dateLeft, dateRight) {
  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1;
  } else {
    return diff;
  }
}

function differenceInDays(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign = compareLocalAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));
  dateLeft.setDate(dateLeft.getDate() - sign * difference);

  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);
  var result = sign * (difference - isLastDayNotFull);

  return result === 0 ? 0 : result;
}

function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}

function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var month = date.getMonth();
  date.setFullYear(date.getFullYear(), month + 1, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

function startOfQuarter(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var currentMonth = date.getMonth();
  var month = currentMonth - currentMonth % 3;
  date.setMonth(month, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}

function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate);
  var date = new Date(0);
  date.setFullYear(cleanDate.getFullYear(), 0, 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

function endOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  date.setFullYear(year + 1, 0, 0);
  date.setHours(23, 59, 59, 999);
  return date;
}

function endOfToday() {
  return endOfDay(Date.now());
}

function endOfYesterday() {
  var now = new Date();
  var year = now.getFullYear();
  var month = now.getMonth();
  var day = now.getDate();
  var date = new Date(0);
  date.setFullYear(year, month, day - 1);
  date.setHours(23, 59, 59, 999);
  return date;
}

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};
var formatDistance = function formatDistance(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }
  return result;
};

function buildFormatLongFn(args) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
var formatRelative = function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};

function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;
    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;

    return valuesArray[index];
  };
}

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
};

var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};
var ordinalNumber = function ordinalNumber(dirtyNumber, _options) {
  var number = Number(dirtyNumber);

  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';
      case 2:
        return number + 'nd';
      case 3:
        return number + 'rd';
    }
  }
  return number + 'th';
};
var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};

function buildMatchFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}
function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
  return undefined;
}
function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return undefined;
}

function buildMatchPatternFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};

var locale = {
  code: 'en-US',
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0
    ,

    firstWeekContainsDate: 1
  }
};

function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}

var MILLISECONDS_IN_DAY$1 = 86400000;

function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY$1) + 1;
}

function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}

var MILLISECONDS_IN_WEEK = 604800000;

function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

function startOfUTCWeek(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

function getUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  requiredArgs(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date;
}

var MILLISECONDS_IN_WEEK$1 = 604800000;

function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();

  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}

function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = '0' + output;
  }
  return sign + output;
}

var formatters = {
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();

    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);
  },
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';
    switch (token) {
      case 'a':
      case 'aa':
        return dayPeriodEnumValue.toUpperCase();
      case 'aaa':
        return dayPeriodEnumValue;
      case 'aaaaa':
        return dayPeriodEnumValue[0];
      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  S: function S(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};

var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
};

var formatters$1 = {
  G: function G(date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated'
        });

      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow'
        });

      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide'
        });
    }
  },
  y: function y(date, token, localize) {
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear();

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year'
      });
    }
    return formatters.y(date, token);
  },
  Y: function Y(date, token, localize, options) {
    var signedWeekYear = getUTCWeekYear(date, options);

    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }

    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year'
      });
    }

    return addLeadingZeros(weekYear, token.length);
  },
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);

    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function Q(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case 'Q':
        return String(quarter);

      case 'QQ':
        return addLeadingZeros(quarter, 2);

      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });

      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  q: function q(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case 'q':
        return String(quarter);

      case 'qq':
        return addLeadingZeros(quarter, 2);

      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });

      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone'
        });

      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone'
        });

      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  M: function M(date, token, localize) {
    var month = date.getUTCMonth();
    switch (token) {
      case 'M':
      case 'MM':
        return formatters.M(date, token);

      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });

      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  L: function L(date, token, localize) {
    var month = date.getUTCMonth();
    switch (token) {
      case 'L':
        return String(month + 1);

      case 'LL':
        return addLeadingZeros(month + 1, 2);

      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });

      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone'
        });

      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone'
        });

      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  w: function w(date, token, localize, options) {
    var week = getUTCWeek(date, options);
    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week'
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function I(date, token, localize) {
    var isoWeek = getUTCISOWeek(date);
    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week'
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function d(date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date'
      });
    }
    return formatters.d(date, token);
  },
  D: function D(date, token, localize) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear'
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function E(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });

      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  e: function e(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case 'e':
        return String(localDayOfWeek);

      case 'ee':
        return addLeadingZeros(localDayOfWeek, 2);

      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });
      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });

      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  c: function c(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case 'c':
        return String(localDayOfWeek);

      case 'cc':
        return addLeadingZeros(localDayOfWeek, token.length);

      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });
      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone'
        });

      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone'
        });

      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone'
        });

      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  i: function i(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case 'i':
        return String(isoDayOfWeek);

      case 'ii':
        return addLeadingZeros(isoDayOfWeek, token.length);

      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day'
        });

      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });

      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  a: function a(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    switch (token) {
      case 'a':
      case 'aa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });
      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();
      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });
      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  b: function b(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }
    switch (token) {
      case 'b':
      case 'bb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });
      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();
      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });
      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  B: function B(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });
      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });
      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  h: function h(date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }
    return formatters.h(date, token);
  },
  H: function H(date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour'
      });
    }
    return formatters.H(date, token);
  },
  K: function K(date, token, localize) {
    var hours = date.getUTCHours() % 12;
    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function k(date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;
    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function m(date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute'
      });
    }
    return formatters.m(date, token);
  },
  s: function s(date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second'
      });
    }
    return formatters.s(date, token);
  },
  S: function S(date, token) {
    return formatters.S(date, token);
  },
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return 'Z';
    }
    switch (token) {
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      case 'XXXX':
      case 'XX':
        return formatTimezone(timezoneOffset);

      case 'XXXXX':
      case 'XXX':

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);

      case 'xxxx':
      case 'xx':
        return formatTimezone(timezoneOffset);

      case 'xxxxx':
      case 'xxx':

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');

      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');

      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });
    case 'PP':
      return formatLong.date({
        width: 'medium'
      });
    case 'PPP':
      return formatLong.date({
        width: 'long'
      });
    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
}
function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });
    case 'pp':
      return formatLong.time({
        width: 'medium'
      });
    case 'ppp':
      return formatLong.time({
        width: 'long'
      });
    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
}
function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;
    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;
    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;
    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }
  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};

var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}

var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;

function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale$1 = options.locale || locale;
  var localeFirstWeekContainsDate = locale$1.options && locale$1.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }
  var localeWeekStartsOn = locale$1.options && locale$1.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }
  if (!locale$1.localize) {
    throw new RangeError('locale must contain localize property');
  }
  if (!locale$1.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError('Invalid time value');
  }

  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale$1,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale$1.formatLong, formatterOptions);
    }
    return substring;
  }).join('').match(formattingTokensRegExp).map(function (substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters$1[firstCharacter];
    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, dirtyDate);
      }
      return formatter(utcDate, substring, locale$1.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
    }
    return substring;
  }).join('');
  return result;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

function getDaysInMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

function getTime(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  return timestamp;
}

function startOfToday() {
  return startOfDay(Date.now());
}

function startOfYesterday() {
  var now = new Date();
  var year = now.getFullYear();
  var month = now.getMonth();
  var day = now.getDate();
  var date = new Date(0);
  date.setFullYear(year, month, day - 1);
  date.setHours(0, 0, 0, 0);
  return date;
}

function subSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addSeconds(dirtyDate, -amount);
}

function subYears(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addYears(dirtyDate, -amount);
}

var nationalScreenURLs = {
  overview: {
    key: "national-overview",
    stateKey: "overview",
    label: "NURT_OVERVIEW",
    active: false,
    nActive: true
  },
  propertytax: {
    key: "national-propertytax",
    stateKey: "propertytax",
    label: "NURT_PROPERTY_TAX",
    active: false,
    nActive: true
  },
  tradelicense: {
    key: "national-tradelicense",
    stateKey: "tradelicense",
    label: "NURT_TRADE_LICENCE",
    active: false,
    nActive: true
  },
  pgr: {
    key: "national-pgr",
    stateKey: "pgr",
    label: "NURT_COMPLAINS",
    active: false,
    nActive: true
  },
  fsm: {
    key: "fsm",
    stateKey: "fsm",
    label: "CS_HOME_FSM_SERVICES",
    active: true,
    nActive: false
  },
  mCollect: {
    key: "national-mcollect",
    stateKey: "mCollect",
    label: "NURT_MCOLLECT",
    active: true,
    nActive: true
  },
  ws: {
    key: "national-ws",
    stateKey: "ws",
    label: "NURT_WATER_SEWERAGE",
    active: true,
    nActive: true
  },
  obps: {
    key: "nss-obps",
    stateKey: "obps",
    label: "DSS_BUILDING_PERMISSION",
    active: true,
    nActive: true
  },
  noc: {
    key: "national-firenoc",
    stateKey: "noc",
    label: "NURT_FIRENOC",
    active: true,
    nActive: true
  },
  bnd: {
    key: "nss-birth-death",
    stateKey: "birth-death",
    label: "BIRTH_AND_DEATH",
    active: true,
    nActive: true
  }
};
var checkCurrentScreen = function checkCurrentScreen() {
  var moduleName = Digit.Utils.dss.getCurrentModuleName();
  var nationalURLS = Object.keys(nationalScreenURLs).map(function (key) {
    return nationalScreenURLs[key].key;
  });
  return nationalURLS.filter(function (ele) {
    return ele !== "fsm";
  }).some(function (e) {
    return moduleName === null || moduleName === void 0 ? void 0 : moduleName.includes(e);
  });
};
var NDSSCard = function NDSSCard() {
  var NATADMIN = Digit.UserService.hasAccess("NATADMIN");
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  if (!NATADMIN) {
    return null;
  }
  var links = Object.values(nationalScreenURLs).filter(function (ele) {
    return ele["nActive"] == true;
  }).map(function (obj) {
    return {
      label: t(obj === null || obj === void 0 ? void 0 : obj.label),
      link: "/digit-ui/employee/dss/dashboard/" + (obj === null || obj === void 0 ? void 0 : obj.key)
    };
  });
  var propsForModuleCard = {
    headerStyle: {
      border: "none",
      height: "48px"
    },
    moduleName: t("ACTION_TEST_NATDASHBOARD"),
    subHeader: t("ACTION_TEST_NATDASHBOARD"),
    subHeaderLink: "/digit-ui/employee/payment/integration/dss/NURT_DASHBOARD",
    className: "employeeCard card-home customEmployeeCard full-width-card full-employee-card-height",
    links: [].concat(links)
  };
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.ModuleCardFullWidth, propsForModuleCard);
};
var DSSCard = function DSSCard() {
  var STADMIN = Digit.UserService.hasAccess("STADMIN");
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  if (!STADMIN) {
    return null;
  }
  var links = Object.values(nationalScreenURLs)
  .map(function (obj) {
    return {
      label: t(obj === null || obj === void 0 ? void 0 : obj.label),
      link: obj.active ? "/digit-ui/employee/dss/dashboard/" + (obj === null || obj === void 0 ? void 0 : obj.stateKey) : "/employee/integration/dss/" + (obj === null || obj === void 0 ? void 0 : obj.stateKey)
    };
  });
  var propsForModuleCard = {
    headerStyle: {
      border: "none",
      height: "48px"
    },
    moduleName: t("ES_TITLE_DSS"),
    subHeader: t("ACTION_TEST_SURE_DASHBOARD"),
    subHeaderLink: "/employee/integration/dss/home",
    className: "employeeCard card-home customEmployeeCard full-width-card full-employee-card-height",
    links: [].concat(links)
  };
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.ModuleCardFullWidth, _extends({}, propsForModuleCard, {
    styles: {
      width: "100%"
    }
  }));
};

var FilterContext = React__default.createContext({});

function isEndDateFocused(focusNumber) {
  return focusNumber === 1;
}
function isStartDateFocused(focusNumber) {
  return focusNumber === 0;
}
var DateRange = function DateRange(_ref) {
  var values = _ref.values,
    onFilterChange = _ref.onFilterChange,
    t = _ref.t;
  var _useState = React.useState(false),
    isModalOpen = _useState[0],
    setIsModalOpen = _useState[1];
  var _useState2 = React.useState([0, 0]),
    focusedRange = _useState2[0],
    setFocusedRange = _useState2[1];
  var _useState3 = React.useState(values),
    selectionRange = _useState3[0],
    setSelectionRange = _useState3[1];
  var wrapperRef = React.useRef(null);
  React.useEffect(function () {
    var handleClickOutside = function handleClickOutside(event) {
      if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
        setIsModalOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return function () {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [wrapperRef]);
  React.useEffect(function () {
    if (!isModalOpen) {
      var startDate = selectionRange === null || selectionRange === void 0 ? void 0 : selectionRange.startDate;
      var endDate = selectionRange === null || selectionRange === void 0 ? void 0 : selectionRange.endDate;
      var interval = getDuration(selectionRange === null || selectionRange === void 0 ? void 0 : selectionRange.startDate, selectionRange === null || selectionRange === void 0 ? void 0 : selectionRange.endDate);
      var title = format(selectionRange === null || selectionRange === void 0 ? void 0 : selectionRange.startDate, "MMM d, yyyy") + " - " + format(selectionRange === null || selectionRange === void 0 ? void 0 : selectionRange.endDate, "MMM d, yyyy");
      onFilterChange({
        range: {
          startDate: startDate,
          endDate: endDate,
          interval: interval,
          title: title
        },
        requestDate: {
          startDate: startDate,
          endDate: endDate,
          interval: interval,
          title: title
        }
      });
    }
  }, [selectionRange, isModalOpen]);
  var staticRanges = React.useMemo(function () {
    return reactDateRange.createStaticRanges([{
      label: t("DSS_TODAY"),
      range: function range() {
        return {
          startDate: startOfToday(),
          endDate: endOfToday()
        };
      }
    }, {
      label: t("DSS_YESTERDAY"),
      range: function range() {
        return {
          startDate: startOfYesterday(),
          endDate: subSeconds(endOfYesterday(), 1)
        };
      }
    }, {
      label: t("DSS_THIS_WEEK"),
      range: function range() {
        return {
          startDate: startOfWeek(new Date()),
          endDate: endOfToday()
        };
      }
    }, {
      label: t("DSS_THIS_MONTH"),
      range: function range() {
        return {
          startDate: startOfMonth(new Date()),
          endDate: endOfToday()
        };
      }
    }, {
      label: t("DSS_THIS_QUARTER"),
      range: function range() {
        return {
          startDate: startOfQuarter(new Date()),
          endDate: subSeconds(endOfToday(), 1)
        };
      }
    }, {
      label: t("DSS_PREVIOUS_YEAR"),
      range: function range() {
        if (new Date().getMonth() < 3) {
          return {
            startDate: subYears(addMonths(startOfYear(new Date()), 3), 2),
            endDate: subSeconds(subYears(addMonths(endOfYear(new Date()), 3), 2), 1)
          };
        } else {
          return {
            startDate: subYears(addMonths(startOfYear(new Date()), 3), 1),
            endDate: subSeconds(subYears(addMonths(endOfYear(new Date()), 3), 1), 1)
          };
        }
      }
    }, {
      label: t("DSS_THIS_YEAR"),
      range: function range() {
        return {
          startDate: Digit.Utils.dss.getDefaultFinacialYear().startDate,
          endDate: Digit.Utils.dss.getDefaultFinacialYear().endDate
        };
      }
    }]);
  }, []);
  var getDuration = function getDuration(startDate, endDate) {
    var noOfDays = (new Date(endDate).getTime() - new Date(startDate).getTime()) / (1000 * 3600 * 24);
    if (noOfDays > 91) {
      return "month";
    }
    if (noOfDays < 90 && noOfDays >= 14) {
      return "week";
    }
    if (noOfDays <= 14) {
      return "day";
    }
  };
  var handleSelect = function handleSelect(ranges, e) {
    var _selection;
    var selection = ranges.range1;
    selection = _extends({}, selection, {
      endDate: endOfDay((_selection = selection) === null || _selection === void 0 ? void 0 : _selection.endDate)
    });
    var _selection2 = selection,
      startDate = _selection2.startDate,
      endDate = _selection2.endDate,
      title = _selection2.title,
      interval = _selection2.interval;
    if (staticRanges.some(function (range) {
      var newRange = range.range();
      return differenceInDays(newRange.startDate, startDate) === 0 && differenceInDays(newRange.endDate, endDate) === 0;
    })) {
      setSelectionRange(selection);
      setIsModalOpen(false);
    } else if (isStartDateFocused(focusedRange[1])) {
      setSelectionRange(selection);
    } else if (isEndDateFocused(focusedRange[1])) {
      setSelectionRange({
        title: title,
        interval: interval,
        startDate: startDate,
        endDate: endDate
      });
      setIsModalOpen(false);
    }
  };
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: "mbsm"
  }, t("ES_DSS_DATE_RANGE")), /*#__PURE__*/React__default.createElement("div", {
    className: "employee-select-wrap",
    ref: wrapperRef
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "select " + (isModalOpen ? "dss-input-active-border" : "")
  }, /*#__PURE__*/React__default.createElement("input", {
    className: "employee-select-wrap--elipses",
    type: "text",
    value: values !== null && values !== void 0 && values.title ? "" + (values === null || values === void 0 ? void 0 : values.title) : "",
    readOnly: true,
    onClick: function onClick() {
      return setIsModalOpen(function (prevState) {
        return !prevState;
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.Calender, {
    className: "cursorPointer",
    onClick: function onClick() {
      return setIsModalOpen(function (prevState) {
        return !prevState;
      });
    }
  })), isModalOpen && /*#__PURE__*/React__default.createElement("div", {
    className: "options-card",
    style: {
      overflow: "visible",
      width: "unset",
      maxWidth: "unset"
    }
  }, /*#__PURE__*/React__default.createElement(reactDateRange.DateRangePicker, {
    className: "pickerShadow",
    focusedRange: focusedRange,
    ranges: [selectionRange],
    rangeColors: ["#9E9E9E"],
    onChange: handleSelect,
    onRangeFocusChange: setFocusedRange,
    retainEndDateOnFirstSelection: true,
    showSelectionPreview: true,
    staticRanges: staticRanges,
    inputRanges: []
  }))));
};

var denominations = ["Cr", "Lac", "Unit"];
var Switch = function Switch(_ref) {
  var onSelect = _ref.onSelect,
    t = _ref.t;
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value;
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement("div", {
    className: "mbsm"
  }, t("ES_DSS_DENOMINATION")), /*#__PURE__*/React__default.createElement("div", {
    className: "switch-wrapper"
  }, denominations.map(function (label, idx) {
    return /*#__PURE__*/React__default.createElement("div", {
      key: idx
    }, /*#__PURE__*/React__default.createElement("input", {
      type: "radio",
      id: label,
      className: "radio-switch",
      name: "unit",
      checked: label === (value === null || value === void 0 ? void 0 : value.denomination),
      onClick: function onClick() {
        return onSelect({
          denomination: label
        });
      }
    }), /*#__PURE__*/React__default.createElement("label", {
      className: "cursorPointer",
      htmlFor: label
    }, t(Digit.Utils.locale.getTransformedLocale("ES_DSS_" + label))));
  })));
};

var Filters = function Filters(_ref) {
  var _value$filters3, _ulbTenants$ddr, _ulbTenants$ulb2;
  var t = _ref.t,
    ulbTenants = _ref.ulbTenants,
    isOpen = _ref.isOpen,
    closeFilters = _ref.closeFilters,
    _ref$showDateRange = _ref.showDateRange,
    showDateRange = _ref$showDateRange === void 0 ? true : _ref$showDateRange,
    _ref$showDDR = _ref.showDDR,
    showDDR = _ref$showDDR === void 0 ? true : _ref$showDDR,
    _ref$showUlb = _ref.showUlb,
    showUlb = _ref$showUlb === void 0 ? true : _ref$showUlb,
    _ref$showDenomination = _ref.showDenomination,
    showDenomination = _ref$showDenomination === void 0 ? true : _ref$showDenomination,
    _ref$isNational = _ref.isNational,
    isNational = _ref$isNational === void 0 ? false : _ref$isNational;
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value,
    setValue = _useContext.setValue;
  var _useState = React.useState(function () {
      return ulbTenants === null || ulbTenants === void 0 ? void 0 : ulbTenants.ulb.filter(function (tenant) {
        var _value$filters, _value$filters$tenant;
        return value === null || value === void 0 ? void 0 : (_value$filters = value.filters) === null || _value$filters === void 0 ? void 0 : (_value$filters$tenant = _value$filters.tenantId) === null || _value$filters$tenant === void 0 ? void 0 : _value$filters$tenant.find(function (selectedTenant) {
          return selectedTenant === (tenant === null || tenant === void 0 ? void 0 : tenant.code);
        });
      });
    }),
    selected = _useState[0],
    setSelected = _useState[1];
  React.useEffect(function () {
    var _ulbTenants$ulb;
    setSelected(ulbTenants === null || ulbTenants === void 0 ? void 0 : (_ulbTenants$ulb = ulbTenants.ulb) === null || _ulbTenants$ulb === void 0 ? void 0 : _ulbTenants$ulb.filter(function (tenant) {
      var _value$filters2, _value$filters2$tenan;
      return value === null || value === void 0 ? void 0 : (_value$filters2 = value.filters) === null || _value$filters2 === void 0 ? void 0 : (_value$filters2$tenan = _value$filters2.tenantId) === null || _value$filters2$tenan === void 0 ? void 0 : _value$filters2$tenan.find(function (selectedTenant) {
        return selectedTenant === (tenant === null || tenant === void 0 ? void 0 : tenant.code);
      });
    }));
  }, [value === null || value === void 0 ? void 0 : (_value$filters3 = value.filters) === null || _value$filters3 === void 0 ? void 0 : _value$filters3.tenantId]);
  var handleFilterChange = function handleFilterChange(data) {
    setValue(_extends({}, value, data));
  };
  var selectFilters = function selectFilters(e, data) {
    setValue(_extends({}, value, {
      filters: {
        tenantId: e.map(function (allPropsData) {
          var _allPropsData$;
          return allPropsData === null || allPropsData === void 0 ? void 0 : (_allPropsData$ = allPropsData[1]) === null || _allPropsData$ === void 0 ? void 0 : _allPropsData$.code;
        })
      }
    }));
  };
  var selectDDR = function selectDDR(e, data) {
    var DDRsSelectedByUser = ulbTenants.ulb.filter(function (ulb) {
      return !!e.find(function (tenant) {
        return ulb.ddrKey === (tenant === null || tenant === void 0 ? void 0 : tenant[1].ddrKey);
      });
    });
    setValue(_extends({}, value, {
      filters: {
        tenantId: DDRsSelectedByUser.map(function (allPropsData) {
          return allPropsData === null || allPropsData === void 0 ? void 0 : allPropsData.code;
        })
      }
    }));
  };
  var selectedDDRs = React.useMemo(function () {
    return selected.map(function (ulb) {
      return ulbTenants.ulb.filter(function (e) {
        return e.code === ulb.code;
      })[0];
    }).filter(function (item, i, arr) {
      return i === arr.findIndex(function (t) {
        return t.ddrKey === item.ddrKey;
      });
    });
  }, [selected, ulbTenants]);
  var handleClear = function handleClear() {
    setValue({
      denomination: "Unit",
      range: Digit.Utils.dss.getInitialRange()
    });
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: "filters-wrapper " + (isOpen ? "filters-modal" : "")
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "filter-close",
    onClick: function onClick() {
      return closeFilters();
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null)), isOpen && /*#__PURE__*/React__default.createElement("div", {
    className: "filter-header"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.FilterIcon, null), /*#__PURE__*/React__default.createElement("p", null, t("DSS_FILTERS")), /*#__PURE__*/React__default.createElement("span", {
    onClick: handleClear
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.RefreshIcon, null))), showDateRange && /*#__PURE__*/React__default.createElement("div", {
    className: "filters-input"
  }, /*#__PURE__*/React__default.createElement(DateRange, {
    onFilterChange: handleFilterChange,
    values: value === null || value === void 0 ? void 0 : value.range,
    t: t
  })), showDDR && /*#__PURE__*/React__default.createElement("div", {
    className: "filters-input"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "mbsm"
  }, t(isNational ? "ES_DSS_STATE" : "ES_DSS_DDR")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiSelectDropdown, {
    options: (ulbTenants === null || ulbTenants === void 0 ? void 0 : ulbTenants.ddr) && ((_ulbTenants$ddr = ulbTenants.ddr) === null || _ulbTenants$ddr === void 0 ? void 0 : _ulbTenants$ddr.sort(function (x, y) {
      var _x$ddrKey;
      return x === null || x === void 0 ? void 0 : (_x$ddrKey = x.ddrKey) === null || _x$ddrKey === void 0 ? void 0 : _x$ddrKey.localeCompare(y === null || y === void 0 ? void 0 : y.ddrKey);
    })),
    optionsKey: "ddrKey",
    onSelect: selectDDR,
    selected: selectedDDRs,
    defaultLabel: t(isNational ? "ES_DSS_ALL_STATE_SELECTED" : "ES_DSS_ALL_DDR_SELECTED"),
    defaultUnit: t(isNational ? "ES_DSS_STATE_SELECTED" : "ES_DSS_DDR_SELECTED")
  })), showUlb && /*#__PURE__*/React__default.createElement("div", {
    className: "filters-input"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "mbsm"
  }, t("ES_DSS_ULB")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiSelectDropdown, {
    options: ulbTenants === null || ulbTenants === void 0 ? void 0 : (_ulbTenants$ulb2 = ulbTenants.ulb) === null || _ulbTenants$ulb2 === void 0 ? void 0 : _ulbTenants$ulb2.sort(function (x, y) {
      var _x$ulbKey;
      return x === null || x === void 0 ? void 0 : (_x$ulbKey = x.ulbKey) === null || _x$ulbKey === void 0 ? void 0 : _x$ulbKey.localeCompare(y === null || y === void 0 ? void 0 : y.ulbKey);
    }),
    optionsKey: "ulbKey",
    onSelect: selectFilters,
    selected: selected,
    defaultLabel: t("ES_DSS_ALL_ULB_SELECTED"),
    defaultUnit: t("ES_DSS_DDR_SELECTED")
  })), showDenomination && /*#__PURE__*/React__default.createElement("div", {
    className: "filters-input",
    style: {
      flexBasis: "16%"
    }
  }, /*#__PURE__*/React__default.createElement(Switch, {
    onSelect: handleFilterChange,
    t: t
  })));
};

var Filters$1 = function Filters(_ref) {
  var _ulbTenants$ddr3, _ulbTenants$ddr3$sort, _ulbTenants$ulb3, _ulbTenants$ulb3$filt;
  var t = _ref.t,
    ulbTenants = _ref.ulbTenants,
    isOpen = _ref.isOpen,
    closeFilters = _ref.closeFilters,
    _ref$showDateRange = _ref.showDateRange,
    showDateRange = _ref$showDateRange === void 0 ? true : _ref$showDateRange,
    _ref$showDenomination = _ref.showDenomination,
    showDenomination = _ref$showDenomination === void 0 ? true : _ref$showDenomination,
    _ref$isNational = _ref.isNational,
    isNational = _ref$isNational === void 0 ? false : _ref$isNational;
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value,
    setValue = _useContext.setValue;
  var _useState = React.useState(function () {
      var _ulbTenants$ulb;
      return ulbTenants === null || ulbTenants === void 0 ? void 0 : (_ulbTenants$ulb = ulbTenants.ulb) === null || _ulbTenants$ulb === void 0 ? void 0 : _ulbTenants$ulb.filter(function (tenant) {
        var _value$filters, _value$filters$ulb;
        return value === null || value === void 0 ? void 0 : (_value$filters = value.filters) === null || _value$filters === void 0 ? void 0 : (_value$filters$ulb = _value$filters.ulb) === null || _value$filters$ulb === void 0 ? void 0 : _value$filters$ulb.find(function (selectedTenant) {
          return selectedTenant === (tenant === null || tenant === void 0 ? void 0 : tenant.code);
        });
      });
    }),
    selected = _useState[0],
    setSelected = _useState[1];
  var _useState2 = React.useState(function () {
      var _ulbTenants$ddr;
      return ulbTenants === null || ulbTenants === void 0 ? void 0 : (_ulbTenants$ddr = ulbTenants.ddr) === null || _ulbTenants$ddr === void 0 ? void 0 : _ulbTenants$ddr.filter(function (tenant) {
        var _value$filters2, _value$filters2$state;
        return value === null || value === void 0 ? void 0 : (_value$filters2 = value.filters) === null || _value$filters2 === void 0 ? void 0 : (_value$filters2$state = _value$filters2.state) === null || _value$filters2$state === void 0 ? void 0 : _value$filters2$state.find(function (selectedTenant) {
          return selectedTenant === (tenant === null || tenant === void 0 ? void 0 : tenant.code);
        });
      });
    }),
    selectedSt = _useState2[0],
    setSelectedSt = _useState2[1];
  React.useEffect(function () {
    var _ulbTenants$ulb2, _ulbTenants$ddr2;
    setSelected(ulbTenants === null || ulbTenants === void 0 ? void 0 : (_ulbTenants$ulb2 = ulbTenants.ulb) === null || _ulbTenants$ulb2 === void 0 ? void 0 : _ulbTenants$ulb2.filter(function (tenant) {
      var _value$filters3, _value$filters3$ulb;
      return value === null || value === void 0 ? void 0 : (_value$filters3 = value.filters) === null || _value$filters3 === void 0 ? void 0 : (_value$filters3$ulb = _value$filters3.ulb) === null || _value$filters3$ulb === void 0 ? void 0 : _value$filters3$ulb.find(function (selectedTenant) {
        return selectedTenant === (tenant === null || tenant === void 0 ? void 0 : tenant.code);
      });
    }));
    setSelectedSt(ulbTenants === null || ulbTenants === void 0 ? void 0 : (_ulbTenants$ddr2 = ulbTenants.ddr) === null || _ulbTenants$ddr2 === void 0 ? void 0 : _ulbTenants$ddr2.filter(function (tenant) {
      var _value$filters4, _value$filters4$state;
      return value === null || value === void 0 ? void 0 : (_value$filters4 = value.filters) === null || _value$filters4 === void 0 ? void 0 : (_value$filters4$state = _value$filters4.state) === null || _value$filters4$state === void 0 ? void 0 : _value$filters4$state.find(function (selectedTenant) {
        return selectedTenant === (tenant === null || tenant === void 0 ? void 0 : tenant.code);
      });
    }));
  }, [value]);
  var handleFilterChange = function handleFilterChange(data) {
    setValue(_extends({}, value, data));
  };
  var selectFilters = function selectFilters(e, data) {
    var _value$filters5, _value$filters5$state;
    var ulbs = e.map(function (allPropsData) {
      var _allPropsData$;
      return allPropsData === null || allPropsData === void 0 ? void 0 : (_allPropsData$ = allPropsData[1]) === null || _allPropsData$ === void 0 ? void 0 : _allPropsData$.code;
    });
    var states = ulbTenants === null || ulbTenants === void 0 ? void 0 : ulbTenants.ulb.filter(function (ele) {
      return ulbs.includes(ele.code);
    }).map(function (e) {
      return e.ddrKey;
    });
    var newStates = ulbTenants === null || ulbTenants === void 0 ? void 0 : ulbTenants.ddr.filter(function (ele) {
      return states.includes(ele.ddrKey);
    }).map(function (e) {
      return e.code;
    });
    if ((value === null || value === void 0 ? void 0 : (_value$filters5 = value.filters) === null || _value$filters5 === void 0 ? void 0 : (_value$filters5$state = _value$filters5.state) === null || _value$filters5$state === void 0 ? void 0 : _value$filters5$state.length) > 0) {
      var _value$filters6;
      value === null || value === void 0 ? void 0 : (_value$filters6 = value.filters) === null || _value$filters6 === void 0 ? void 0 : _value$filters6.state.map(function (stt) {
        if (!newStates.includes(stt)) {
          newStates.push(stt);
        }
      });
    }
    setValue(_extends({}, value, {
      filters: _extends({}, value.filters, {
        ulb: ulbs,
        state: newStates
      })
    }));
  };
  var selectStFilters = function selectStFilters(e, data) {
    setValue(_extends({}, value, {
      filters: _extends({}, value.filters, {
        state: e.map(function (allPropsData) {
          var _allPropsData$2;
          return allPropsData === null || allPropsData === void 0 ? void 0 : (_allPropsData$2 = allPropsData[1]) === null || _allPropsData$2 === void 0 ? void 0 : _allPropsData$2.code;
        })
      })
    }));
  };
  var handleClear = function handleClear() {
    setValue({
      denomination: "Unit",
      range: Digit.Utils.dss.getInitialRange()
    });
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: "filters-wrapper " + (isOpen ? "filters-modal" : "")
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "filter-close",
    onClick: function onClick() {
      return closeFilters();
    }
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.CloseSvg, null)), isOpen && /*#__PURE__*/React__default.createElement("div", {
    className: "filter-header"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.FilterIcon, null), /*#__PURE__*/React__default.createElement("p", null, t("DSS_FILTERS")), /*#__PURE__*/React__default.createElement("span", {
    onClick: handleClear
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.RefreshIcon, null))), showDateRange && /*#__PURE__*/React__default.createElement("div", {
    className: "filters-input"
  }, /*#__PURE__*/React__default.createElement(DateRange, {
    onFilterChange: handleFilterChange,
    values: value === null || value === void 0 ? void 0 : value.range,
    t: t
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "filters-input"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "mbsm"
  }, t(isNational ? "ES_DSS_STATE" : "ES_DSS_DDR")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiSelectDropdown, {
    options: (ulbTenants === null || ulbTenants === void 0 ? void 0 : ulbTenants.ddr) && ((_ulbTenants$ddr3 = ulbTenants.ddr) === null || _ulbTenants$ddr3 === void 0 ? void 0 : (_ulbTenants$ddr3$sort = _ulbTenants$ddr3.sort(function (x, y) {
      var _x$ddrKey;
      return x === null || x === void 0 ? void 0 : (_x$ddrKey = x.ddrKey) === null || _x$ddrKey === void 0 ? void 0 : _x$ddrKey.localeCompare(y === null || y === void 0 ? void 0 : y.ddrKey);
    })) === null || _ulbTenants$ddr3$sort === void 0 ? void 0 : _ulbTenants$ddr3$sort.map(function (ele) {
      return _extends({}, ele, {
        i18Key: "DSS_TB_" + Digit.Utils.locale.getTransformedLocale(ele === null || ele === void 0 ? void 0 : ele.ddrKey)
      });
    })),
    optionsKey: "i18Key",
    onSelect: selectStFilters,
    selected: selectedSt === null || selectedSt === void 0 ? void 0 : selectedSt.map(function (ele) {
      return _extends({}, ele, {
        i18Key: "DSS_TB_" + Digit.Utils.locale.getTransformedLocale(ele === null || ele === void 0 ? void 0 : ele.ddrKey)
      });
    }),
    defaultLabel: t(isNational ? "ES_DSS_ALL_STATE_SELECTED" : "ES_DSS_ALL_DDR_SELECTED"),
    defaultUnit: t(isNational ? "ES_DSS_STATE_SELECTED" : "ES_DSS_DDR_SELECTED")
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "filters-input"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "mbsm"
  }, t("ES_DSS_ULB")), /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiSelectDropdown, {
    options: ulbTenants === null || ulbTenants === void 0 ? void 0 : (_ulbTenants$ulb3 = ulbTenants.ulb) === null || _ulbTenants$ulb3 === void 0 ? void 0 : (_ulbTenants$ulb3$filt = _ulbTenants$ulb3.filter(function (e) {
      return Digit.Utils.dss.checkSelected(e, selectedSt);
    }).sort(function (x, y) {
      var _x$ulbKey;
      return x === null || x === void 0 ? void 0 : (_x$ulbKey = x.ulbKey) === null || _x$ulbKey === void 0 ? void 0 : _x$ulbKey.localeCompare(y === null || y === void 0 ? void 0 : y.ulbKey);
    })) === null || _ulbTenants$ulb3$filt === void 0 ? void 0 : _ulbTenants$ulb3$filt.map(function (ele) {
      return _extends({}, ele, {
        i18Key: "DSS_TB_" + Digit.Utils.locale.getTransformedLocale(ele === null || ele === void 0 ? void 0 : ele.ulbKey)
      });
    }),
    optionsKey: "i18Key",
    onSelect: selectFilters,
    selected: selected === null || selected === void 0 ? void 0 : selected.map(function (ele) {
      return _extends({}, ele, {
        i18Key: "DSS_TB_" + Digit.Utils.locale.getTransformedLocale(ele === null || ele === void 0 ? void 0 : ele.ulbKey)
      });
    }),
    defaultLabel: t("ES_DSS_ALL_ULB_SELECTED"),
    defaultUnit: t("ES_DSS_DDR_SELECTED")
  })), showDenomination && /*#__PURE__*/React__default.createElement("div", {
    className: "filters-input",
    style: {
      flexBasis: "16%"
    }
  }, /*#__PURE__*/React__default.createElement(Switch, {
    onSelect: handleFilterChange,
    t: t
  })));
};

var NoData = function NoData(_ref) {
  var t = _ref.t;
  return /*#__PURE__*/React__default.createElement("div", {
    className: "no-data"
  }, /*#__PURE__*/React__default.createElement("p", null, t("DSS_NO_DATA")));
};

var COLORS = ["#048BD0", "#FBC02D", "#8E29BF", "#EA8A3B", "#0BABDE", "#6E8459", "#D4351C", "#0CF7E4", "#F80BF4", "#22F80B"];
var increasedHeightCharts = ["nssOBPSTotalPermitsVsTotalOCSubmittedVsTotalOCIssued", "nssNOCApplicationVsProvisionalVsActual", "nocApplicationVsProvisionalVsActual", "permitsandOCissued"];
var getColors = function getColors(index) {
  if (index === void 0) {
    index = 0;
  }
  index = COLORS.length > index ? index : 0;
  return COLORS[index];
};
var getDenominatedValue = function getDenominatedValue(denomination, plotValue) {
  switch (denomination) {
    case "Unit":
      return plotValue;
    case "Lac":
      return Number((plotValue / 100000).toFixed(2));
    case "Cr":
      return Number((plotValue / 10000000).toFixed(2));
    default:
      return "";
  }
};
var CustomAreaChart = function CustomAreaChart(_ref) {
  var _value$range, _value$range$startDat, _value$range2, _value$range2$endDate;
  var _ref$xDataKey = _ref.xDataKey,
    xDataKey = _ref$xDataKey === void 0 ? "name" : _ref$xDataKey,
    data = _ref.data,
    setChartDenomination = _ref.setChartDenomination;
  var lineLegend = {
    margin: "10px"
  };
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var id = data.id;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value;
  var _useState = React.useState(0),
    totalCapacity = _useState[0],
    setTotalCapacity = _useState[1];
  var _useState2 = React.useState(0),
    totalWaste = _useState2[0],
    setTotalWaste = _useState2[1];
  var _useState3 = React.useState([]),
    keysArr = _useState3[0],
    setKeysArr = _useState3[1];
  var _useState4 = React.useState("Area"),
    manageChart = _useState4[0],
    setmanageChart = _useState4[1];
  var stateTenant = Digit.ULBService.getStateId();
  var _Digit$Hooks$useCommo = Digit.Hooks.useCommonMDMS(stateTenant, "FSM", "FSTPPlantInfo", {
      enabled: id === "fsmCapacityUtilization"
    }),
    mdmsData = _Digit$Hooks$useCommo.data;
  var _Digit$Hooks$dss$useG = Digit.Hooks.dss.useGetChart({
      key: id,
      type: "metric",
      tenantId: tenantId,
      requestDate: _extends({}, value === null || value === void 0 ? void 0 : value.requestDate, {
        startDate: value === null || value === void 0 ? void 0 : (_value$range = value.range) === null || _value$range === void 0 ? void 0 : (_value$range$startDat = _value$range.startDate) === null || _value$range$startDat === void 0 ? void 0 : _value$range$startDat.getTime(),
        endDate: value === null || value === void 0 ? void 0 : (_value$range2 = value.range) === null || _value$range2 === void 0 ? void 0 : (_value$range2$endDate = _value$range2.endDate) === null || _value$range2$endDate === void 0 ? void 0 : _value$range2$endDate.getTime()
      }),
      filters: value === null || value === void 0 ? void 0 : value.filters
    }),
    isLoading = _Digit$Hooks$dss$useG.isLoading,
    response = _Digit$Hooks$dss$useG.data;
  React.useEffect(function () {
    if (mdmsData) {
      var _value$filters, _value$filters$tenant;
      var fstpPlants = mdmsData;
      if ((value === null || value === void 0 ? void 0 : (_value$filters = value.filters) === null || _value$filters === void 0 ? void 0 : (_value$filters$tenant = _value$filters.tenantId) === null || _value$filters$tenant === void 0 ? void 0 : _value$filters$tenant.length) > 0) {
        fstpPlants = mdmsData.filter(function (plant) {
          var _value$filters2, _value$filters2$tenan;
          return value === null || value === void 0 ? void 0 : (_value$filters2 = value.filters) === null || _value$filters2 === void 0 ? void 0 : (_value$filters2$tenan = _value$filters2.tenantId) === null || _value$filters2$tenan === void 0 ? void 0 : _value$filters2$tenan.some(function (tenant) {
            return plant === null || plant === void 0 ? void 0 : plant.ULBS.includes(tenant);
          });
        });
      }
      var _totalCapacity = fstpPlants.reduce(function (acc, plant) {
        return acc + Number(plant === null || plant === void 0 ? void 0 : plant.PlantOperationalCapacityKLD);
      }, 0);
      setTotalCapacity(_totalCapacity);
    }
  }, [mdmsData, value]);
  React.useEffect(function () {
    if (response) {
      var _response$responseDat, _response$responseDat2, _response$responseDat3, _response$responseDat4, _response$responseDat5, _response$responseDat6, _response$responseDat7, _response$responseDat8, _response$responseDat9, _response$responseDat10;
      var _totalWaste = Math.round(response === null || response === void 0 ? void 0 : (_response$responseDat = response.responseData) === null || _response$responseDat === void 0 ? void 0 : (_response$responseDat2 = _response$responseDat.data) === null || _response$responseDat2 === void 0 ? void 0 : (_response$responseDat3 = _response$responseDat2[0]) === null || _response$responseDat3 === void 0 ? void 0 : (_response$responseDat4 = _response$responseDat3.plots[(response === null || response === void 0 ? void 0 : (_response$responseDat5 = response.responseData) === null || _response$responseDat5 === void 0 ? void 0 : (_response$responseDat6 = _response$responseDat5.data) === null || _response$responseDat6 === void 0 ? void 0 : (_response$responseDat7 = _response$responseDat6[0]) === null || _response$responseDat7 === void 0 ? void 0 : _response$responseDat7.plots.length) - 1]) === null || _response$responseDat4 === void 0 ? void 0 : _response$responseDat4.value);
      setTotalWaste(_totalWaste);
      setChartDenomination(response === null || response === void 0 ? void 0 : (_response$responseDat8 = response.responseData) === null || _response$responseDat8 === void 0 ? void 0 : (_response$responseDat9 = _response$responseDat8.data) === null || _response$responseDat9 === void 0 ? void 0 : (_response$responseDat10 = _response$responseDat9[0]) === null || _response$responseDat10 === void 0 ? void 0 : _response$responseDat10.headerSymbol);
    }
  }, [response]);
  var chartData = React.useMemo(function () {
    var _response$responseDat11, _response$responseDat12, _response$responseDat19, _response$responseDat20;
    if ((response === null || response === void 0 ? void 0 : (_response$responseDat11 = response.responseData) === null || _response$responseDat11 === void 0 ? void 0 : (_response$responseDat12 = _response$responseDat11.data) === null || _response$responseDat12 === void 0 ? void 0 : _response$responseDat12.length) == 1) {
      var _response$responseDat16, _response$responseDat17, _response$responseDat18;
      setmanageChart("Area");
      if (id !== "fsmCapacityUtilization") {
        var _response$responseDat13, _response$responseDat14, _response$responseDat15;
        return response === null || response === void 0 ? void 0 : (_response$responseDat13 = response.responseData) === null || _response$responseDat13 === void 0 ? void 0 : (_response$responseDat14 = _response$responseDat13.data) === null || _response$responseDat14 === void 0 ? void 0 : (_response$responseDat15 = _response$responseDat14[0]) === null || _response$responseDat15 === void 0 ? void 0 : _response$responseDat15.plots;
      }
      return response === null || response === void 0 ? void 0 : (_response$responseDat16 = response.responseData) === null || _response$responseDat16 === void 0 ? void 0 : (_response$responseDat17 = _response$responseDat16.data) === null || _response$responseDat17 === void 0 ? void 0 : (_response$responseDat18 = _response$responseDat17[0]) === null || _response$responseDat18 === void 0 ? void 0 : _response$responseDat18.plots.map(function (plot) {
        var _plot$name$split = plot === null || plot === void 0 ? void 0 : plot.name.split("-"),
          month = _plot$name$split[0],
          year = _plot$name$split[1];
        var totalDays = getDaysInMonth(Date.parse(month + " 1, " + year));
        var value = Math.round((plot === null || plot === void 0 ? void 0 : plot.value) / (totalCapacity * totalDays) * 100);
        return _extends({}, plot, {
          value: value
        });
      });
    } else if ((response === null || response === void 0 ? void 0 : (_response$responseDat19 = response.responseData) === null || _response$responseDat19 === void 0 ? void 0 : (_response$responseDat20 = _response$responseDat19.data) === null || _response$responseDat20 === void 0 ? void 0 : _response$responseDat20.length) > 1) {
      var _response$responseDat21, _response$responseDat22, _response$responseDat23;
      setmanageChart("Line");
      var keys = {};
      var mergeObj = response === null || response === void 0 ? void 0 : (_response$responseDat21 = response.responseData) === null || _response$responseDat21 === void 0 ? void 0 : (_response$responseDat22 = _response$responseDat21.data) === null || _response$responseDat22 === void 0 ? void 0 : (_response$responseDat23 = _response$responseDat22[0]) === null || _response$responseDat23 === void 0 ? void 0 : _response$responseDat23.plots.map(function (x, index) {
        var _response$responseDat24, _response$responseDat25, _response$responseDat26, _response$responseDat27, _response$responseDat28, _response$responseDat29, _response$responseDat30;
        var newObj = {};
        response === null || response === void 0 ? void 0 : (_response$responseDat24 = response.responseData) === null || _response$responseDat24 === void 0 ? void 0 : _response$responseDat24.data.map(function (ob) {
          keys[t(Digit.Utils.locale.getTransformedLocale(ob.headerName))] = t(Digit.Utils.locale.getTransformedLocale(ob.headerName));
          newObj[t(Digit.Utils.locale.getTransformedLocale(ob.headerName))] = ob === null || ob === void 0 ? void 0 : ob.plots[index].value;
        });
        return _extends({
          label: null,
          name: response === null || response === void 0 ? void 0 : (_response$responseDat25 = response.responseData) === null || _response$responseDat25 === void 0 ? void 0 : (_response$responseDat26 = _response$responseDat25.data) === null || _response$responseDat26 === void 0 ? void 0 : (_response$responseDat27 = _response$responseDat26[0]) === null || _response$responseDat27 === void 0 ? void 0 : _response$responseDat27.plots[index].name,
          strValue: null,
          symbol: response === null || response === void 0 ? void 0 : (_response$responseDat28 = response.responseData) === null || _response$responseDat28 === void 0 ? void 0 : (_response$responseDat29 = _response$responseDat28.data) === null || _response$responseDat29 === void 0 ? void 0 : (_response$responseDat30 = _response$responseDat29[0]) === null || _response$responseDat30 === void 0 ? void 0 : _response$responseDat30.plots[index].symbol
        }, newObj);
      });
      setKeysArr(Object.values(keys));
      return mergeObj;
    }
  }, [response, totalCapacity]);
  var renderPlot = function renderPlot(plot, key) {
    var _plot$symbol, _plot$symbol2;
    var plotValue = key ? plot === null || plot === void 0 ? void 0 : plot[key] : (plot === null || plot === void 0 ? void 0 : plot.value) || 0;
    if (id === "fsmCapacityUtilization") {
      return Number(plotValue.toFixed(1));
    }
    if ((plot === null || plot === void 0 ? void 0 : (_plot$symbol = plot.symbol) === null || _plot$symbol === void 0 ? void 0 : _plot$symbol.toLowerCase()) === "amount") {
      var denomination = value.denomination;
      return getDenominatedValue(denomination, plotValue);
    } else if ((plot === null || plot === void 0 ? void 0 : (_plot$symbol2 = plot.symbol) === null || _plot$symbol2 === void 0 ? void 0 : _plot$symbol2.toLowerCase()) === "number") {
      return Number(plotValue.toFixed(1));
    } else {
      return plotValue;
    }
  };
  var renderLegend = function renderLegend() {
    return /*#__PURE__*/React__default.createElement("span", {
      style: {
        fontSize: "14px",
        color: "#505A5F"
      }
    }, t("DSS_" + Digit.Utils.locale.getTransformedLocale(id)));
  };
  var renderLegendForLine = function renderLegendForLine(ss, sss, index) {
    return /*#__PURE__*/React__default.createElement("span", {
      style: {
        fontSize: "14px",
        color: "#505A5F"
      }
    }, keysArr === null || keysArr === void 0 ? void 0 : keysArr[index]);
  };
  var tickFormatter = function tickFormatter(value) {
    if (typeof value === "string") {
      return value.replace("-", ", ");
    }
    return value;
  };
  var renderTooltip = function renderTooltip(_ref2) {
    var _payloadObj$payload, _payloadObj$payload$s, _payloadObj$payload2, _payloadObj$payload2$, _payloadObj$payload3, _payloadObj$payload3$, _payloadObj$payload4;
    var payload = _ref2.payload,
      label = _ref2.label;
    var formattedLabel = tickFormatter(label);
    var payloadObj = (payload === null || payload === void 0 ? void 0 : payload[0]) || {};
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        margin: "0px",
        padding: "10px",
        backgroundColor: "rgb(255, 255, 255)",
        border: "1px solid rgb(204, 204, 204)",
        whiteSpace: "nowrap"
      }
    }, (payloadObj === null || payloadObj === void 0 ? void 0 : (_payloadObj$payload = payloadObj.payload) === null || _payloadObj$payload === void 0 ? void 0 : (_payloadObj$payload$s = _payloadObj$payload.symbol) === null || _payloadObj$payload$s === void 0 ? void 0 : _payloadObj$payload$s.toLowerCase()) === "amount" && /*#__PURE__*/React__default.createElement("p", null, formattedLabel + " : " + ((value === null || value === void 0 ? void 0 : value.denomination) === "Unit" ? " ₹" : "") + " " + (payloadObj === null || payloadObj === void 0 ? void 0 : payloadObj.value) + ((value === null || value === void 0 ? void 0 : value.denomination) !== "Unit" ? t(Digit.Utils.locale.getTransformedLocale("ES_DSS_" + (value === null || value === void 0 ? void 0 : value.denomination))) : "")), (payloadObj === null || payloadObj === void 0 ? void 0 : (_payloadObj$payload2 = payloadObj.payload) === null || _payloadObj$payload2 === void 0 ? void 0 : (_payloadObj$payload2$ = _payloadObj$payload2.symbol) === null || _payloadObj$payload2$ === void 0 ? void 0 : _payloadObj$payload2$.toLowerCase()) === "percentage" && /*#__PURE__*/React__default.createElement("p", null, formattedLabel + " : " + (payloadObj === null || payloadObj === void 0 ? void 0 : payloadObj.value) + " %"), (payloadObj === null || payloadObj === void 0 ? void 0 : (_payloadObj$payload3 = payloadObj.payload) === null || _payloadObj$payload3 === void 0 ? void 0 : (_payloadObj$payload3$ = _payloadObj$payload3.symbol) === null || _payloadObj$payload3$ === void 0 ? void 0 : _payloadObj$payload3$.toLowerCase()) === "number" && /*#__PURE__*/React__default.createElement("p", null, formattedLabel + " : " + (payloadObj === null || payloadObj === void 0 ? void 0 : payloadObj.value) + " "), !(payloadObj !== null && payloadObj !== void 0 && (_payloadObj$payload4 = payloadObj.payload) !== null && _payloadObj$payload4 !== void 0 && _payloadObj$payload4.symbol) && /*#__PURE__*/React__default.createElement("p", null, formattedLabel + " : " + (payloadObj === null || payloadObj === void 0 ? void 0 : payloadObj.value) + " "));
  };
  var renderTooltipForLine = function renderTooltipForLine(_ref3) {
    var _payloadObj$payload5, _payloadObj$payload5$, _payloadObj$payload6, _payloadObj$payload6$, _payloadObj$payload7, _payloadObj$payload7$;
    var payload = _ref3.payload;
    var payloadObj = (payload === null || payload === void 0 ? void 0 : payload[0]) || {};
    var prefix = (payloadObj === null || payloadObj === void 0 ? void 0 : (_payloadObj$payload5 = payloadObj.payload) === null || _payloadObj$payload5 === void 0 ? void 0 : (_payloadObj$payload5$ = _payloadObj$payload5.symbol) === null || _payloadObj$payload5$ === void 0 ? void 0 : _payloadObj$payload5$.toLowerCase()) === "amount" && (value === null || value === void 0 ? void 0 : value.denomination) === "Unit" ? " ₹" : " ";
    var postfix = (payloadObj === null || payloadObj === void 0 ? void 0 : (_payloadObj$payload6 = payloadObj.payload) === null || _payloadObj$payload6 === void 0 ? void 0 : (_payloadObj$payload6$ = _payloadObj$payload6.symbol) === null || _payloadObj$payload6$ === void 0 ? void 0 : _payloadObj$payload6$.toLowerCase()) === "percentage" ? " %" : (payloadObj === null || payloadObj === void 0 ? void 0 : (_payloadObj$payload7 = payloadObj.payload) === null || _payloadObj$payload7 === void 0 ? void 0 : (_payloadObj$payload7$ = _payloadObj$payload7.symbol) === null || _payloadObj$payload7$ === void 0 ? void 0 : _payloadObj$payload7$.toLowerCase()) === "amount" && (value === null || value === void 0 ? void 0 : value.denomination) !== "Unit" ? t(Digit.Utils.locale.getTransformedLocale("ES_DSS_" + (value === null || value === void 0 ? void 0 : value.denomination))) : "";
    var newPayload = _extends({}, payloadObj === null || payloadObj === void 0 ? void 0 : payloadObj.payload);
    newPayload === null || newPayload === void 0 ? true : delete newPayload.label;
    newPayload === null || newPayload === void 0 ? true : delete newPayload.strValue;
    newPayload === null || newPayload === void 0 ? true : delete newPayload.symbol;
    var newObjArray = [newPayload === null || newPayload === void 0 ? void 0 : newPayload.name];
    newPayload === null || newPayload === void 0 ? true : delete newPayload.name;
    Object.keys(newPayload).map(function (key) {
      var _payloadObj$payload8, _payloadObj$payload8$;
      newObjArray.push(key + " -" + prefix + ((payloadObj === null || payloadObj === void 0 ? void 0 : (_payloadObj$payload8 = payloadObj.payload) === null || _payloadObj$payload8 === void 0 ? void 0 : (_payloadObj$payload8$ = _payloadObj$payload8.symbol) === null || _payloadObj$payload8$ === void 0 ? void 0 : _payloadObj$payload8$.toLowerCase()) === "amount" ? getDenominatedValue(value === null || value === void 0 ? void 0 : value.denomination, newPayload === null || newPayload === void 0 ? void 0 : newPayload[key]) : newPayload === null || newPayload === void 0 ? void 0 : newPayload[key]) + " " + postfix);
    });
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        margin: "0px",
        padding: "10px",
        backgroundColor: "rgb(255, 255, 255)",
        border: "1px solid rgb(204, 204, 204)",
        whiteSpace: "nowrap"
      }
    }, newObjArray.map(function (ele, i) {
      return /*#__PURE__*/React__default.createElement("p", {
        key: i
      }, ele);
    }));
  };
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      height: "100%"
    }
  }, id === "fsmCapacityUtilization" && /*#__PURE__*/React__default.createElement("p", null, t("DSS_FSM_TOTAL_SLUDGE_TREATED"), " - ", totalWaste, " ", t("DSS_KL")), /*#__PURE__*/React__default.createElement(recharts.ResponsiveContainer, {
    width: "94%",
    height: increasedHeightCharts.includes(id) ? 700 : 450
  }, !chartData || (chartData === null || chartData === void 0 ? void 0 : chartData.length) === 0 ? /*#__PURE__*/React__default.createElement(NoData, {
    t: t
  }) : manageChart == "Area" ? /*#__PURE__*/React__default.createElement(recharts.AreaChart, {
    width: "100%",
    height: "100%",
    data: chartData,
    margin: {
      left: 30,
      top: 10
    }
  }, /*#__PURE__*/React__default.createElement("defs", null, /*#__PURE__*/React__default.createElement("linearGradient", {
    id: "colorUv",
    x1: ".5",
    x2: ".5",
    y2: "1"
  }, /*#__PURE__*/React__default.createElement("stop", {
    stopColor: "#048BD0",
    stopOpacity: 0.5
  }), /*#__PURE__*/React__default.createElement("stop", {
    offset: "1",
    stopColor: "#048BD0",
    stopOpacity: 0
  }))), /*#__PURE__*/React__default.createElement(recharts.CartesianGrid, {
    strokeDasharray: "3 3"
  }), /*#__PURE__*/React__default.createElement(recharts.Tooltip, {
    content: renderTooltip
  }), /*#__PURE__*/React__default.createElement(recharts.XAxis, {
    dataKey: xDataKey,
    tick: {
      fontSize: "14px",
      fill: "#505A5F"
    },
    tickFormatter: tickFormatter
  }), /*#__PURE__*/React__default.createElement(recharts.YAxis
  , {
    tick: {
      fontSize: "14px",
      fill: "#505A5F"
    }
  }), /*#__PURE__*/React__default.createElement(recharts.Legend, {
    formatter: renderLegend,
    iconType: "circle"
  }), /*#__PURE__*/React__default.createElement(recharts.Area, {
    type: "monotone",
    dataKey: renderPlot,
    stroke: "#048BD0",
    fill: "url(#colorUv)",
    dot: true
  })) : /*#__PURE__*/React__default.createElement(recharts.LineChart, {
    width: 500,
    height: 300,
    data: chartData,
    margin: {
      top: 15,
      right: 5,
      left: 20,
      bottom: 5
    }
  }, /*#__PURE__*/React__default.createElement(recharts.CartesianGrid, {
    strokeDasharray: "3 3"
  }), /*#__PURE__*/React__default.createElement(recharts.XAxis, {
    dataKey: "name"
  }), /*#__PURE__*/React__default.createElement(recharts.YAxis
  , null), /*#__PURE__*/React__default.createElement(recharts.Tooltip, {
    content: renderTooltipForLine
  }), /*#__PURE__*/React__default.createElement(recharts.Legend, {
    layout: "horizontal",
    formatter: renderLegendForLine,
    verticalAlign: "bottom",
    align: "center",
    iconType: "circle",
    className: lineLegend
  }), keysArr === null || keysArr === void 0 ? void 0 : keysArr.map(function (key, i) {
    return /*#__PURE__*/React__default.createElement(recharts.Line, {
      type: "monotone",
      dataKey: function dataKey(plot) {
        return renderPlot(plot, key);
      },
      stroke: getColors(i),
      activeDot: {
        r: 8
      },
      strokeWidth: 2,
      key: i,
      dot: {
        stroke: getColors(i),
        strokeWidth: 1,
        r: 2,
        fill: getColors(i)
      }
    });
  }))));
};

var formatValue = function formatValue(value, symbol) {
  if ((symbol === null || symbol === void 0 ? void 0 : symbol.toLowerCase()) === "percentage") {
    return "" + Number(value).toFixed();
  } else {
    return value;
  }
};
var CustomLabel = function CustomLabel(_ref) {
  var x = _ref.x,
    y = _ref.y,
    name = _ref.name,
    stroke = _ref.stroke,
    maxValue = _ref.maxValue;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement("text", {
    x: x,
    y: y,
    dx: -55,
    dy: 10,
    fill: stroke,
    width: "35",
    style: {
      fontSize: "medium",
      textAlign: "right",
      fontVariantNumeric: "proportional-nums"
    }
  }, (maxValue === null || maxValue === void 0 ? void 0 : maxValue[t(name)]) + "%"), /*#__PURE__*/React__default.createElement("text", {
    x: x,
    y: y,
    dx: -200,
    dy: 10
  }, t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(name))));
};
var COLORS$1 = {
  RED: "#00703C",
  GREEN: "#D4351C",
  default: "#00703C"
};
var CustomBarChart = function CustomBarChart(_ref2) {
  var _value$range, _value$range$startDat, _value$range2, _value$range2$endDate;
  var _ref2$xDataKey = _ref2.xDataKey,
    xDataKey = _ref2$xDataKey === void 0 ? "value" : _ref2$xDataKey,
    _ref2$xAxisType = _ref2.xAxisType,
    xAxisType = _ref2$xAxisType === void 0 ? "number" : _ref2$xAxisType,
    _ref2$yAxisType = _ref2.yAxisType,
    yAxisType = _ref2$yAxisType === void 0 ? "category" : _ref2$yAxisType,
    _ref2$yDataKey = _ref2.yDataKey,
    yDataKey = _ref2$yDataKey === void 0 ? "name" : _ref2$yDataKey,
    _ref2$hideAxis = _ref2.hideAxis,
    hideAxis = _ref2$hideAxis === void 0 ? true : _ref2$hideAxis,
    _ref2$layout = _ref2.layout,
    layout = _ref2$layout === void 0 ? "vertical" : _ref2$layout,
    _ref2$fillColor = _ref2.fillColor,
    fillColor = _ref2$fillColor === void 0 ? "default" : _ref2$fillColor,
    _ref2$showGrid = _ref2.showGrid,
    showGrid = _ref2$showGrid === void 0 ? false : _ref2$showGrid,
    _ref2$showDrillDown = _ref2.showDrillDown,
    showDrillDown = _ref2$showDrillDown === void 0 ? false : _ref2$showDrillDown,
    data = _ref2.data,
    title = _ref2.title,
    setChartDenomination = _ref2.setChartDenomination;
  var id = data.id;
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  var history = reactRouterDom.useHistory();
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value;
  var _useState = React.useState({}),
    maxValue = _useState[0],
    setMaxValue = _useState[1];
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _Digit$Hooks$dss$useG = Digit.Hooks.dss.useGetChart({
      key: id,
      type: "metric",
      tenantId: tenantId,
      requestDate: _extends({}, value === null || value === void 0 ? void 0 : value.requestDate, {
        startDate: value === null || value === void 0 ? void 0 : (_value$range = value.range) === null || _value$range === void 0 ? void 0 : (_value$range$startDat = _value$range.startDate) === null || _value$range$startDat === void 0 ? void 0 : _value$range$startDat.getTime(),
        endDate: value === null || value === void 0 ? void 0 : (_value$range2 = value.range) === null || _value$range2 === void 0 ? void 0 : (_value$range2$endDate = _value$range2.endDate) === null || _value$range2$endDate === void 0 ? void 0 : _value$range2$endDate.getTime()
      }),
      filters: value === null || value === void 0 ? void 0 : value.filters
    }),
    isLoading = _Digit$Hooks$dss$useG.isLoading,
    response = _Digit$Hooks$dss$useG.data;
  var chartData = React.useMemo(function () {
    var _response$responseDat, _response$responseDat2, _response$responseDat3, _response$responseDat4, _response$responseDat5;
    if (!response) return null;
    setChartDenomination(response === null || response === void 0 ? void 0 : (_response$responseDat = response.responseData) === null || _response$responseDat === void 0 ? void 0 : (_response$responseDat2 = _response$responseDat.data) === null || _response$responseDat2 === void 0 ? void 0 : (_response$responseDat3 = _response$responseDat2[0]) === null || _response$responseDat3 === void 0 ? void 0 : _response$responseDat3.headerSymbol);
    var dd = response === null || response === void 0 ? void 0 : (_response$responseDat4 = response.responseData) === null || _response$responseDat4 === void 0 ? void 0 : (_response$responseDat5 = _response$responseDat4.data) === null || _response$responseDat5 === void 0 ? void 0 : _response$responseDat5.map(function (bar) {
      var _bar$plots, _bar$plots2, _bar$plots3;
      var plotValue = (bar === null || bar === void 0 ? void 0 : (_bar$plots = bar.plots) === null || _bar$plots === void 0 ? void 0 : _bar$plots[0].value) || 0;
      return {
        name: t(bar === null || bar === void 0 ? void 0 : (_bar$plots2 = bar.plots) === null || _bar$plots2 === void 0 ? void 0 : _bar$plots2[0].name),
        value: formatValue(plotValue, bar === null || bar === void 0 ? void 0 : (_bar$plots3 = bar.plots) === null || _bar$plots3 === void 0 ? void 0 : _bar$plots3[0].symbol)
      };
    });

    var newMax = Math.max.apply(Math, dd.map(function (e) {
      return Number(e.value);
    }));
    var newObj = {};
    var newReturn = dd.map(function (ele) {
      newObj[ele.name] = ele.value;
      return _extends({}, ele, {
        value: Number(ele.value) / newMax * 100
      });
    });
    setMaxValue(newObj);
    return newReturn;
  }, [response]);
  var goToDrillDownCharts = function goToDrillDownCharts() {
    var _response$responseDat6, _value$filters;
    history.push("/digit-ui/employee/dss/drilldown?chart=" + (response === null || response === void 0 ? void 0 : (_response$responseDat6 = response.responseData) === null || _response$responseDat6 === void 0 ? void 0 : _response$responseDat6.visualizationCode) + "&ulb=" + (value === null || value === void 0 ? void 0 : (_value$filters = value.filters) === null || _value$filters === void 0 ? void 0 : _value$filters.tenantId) + "&title=" + title + "&fromModule=" + Digit.Utils.dss.getCurrentModuleName() + "&type=performing-metric&fillColor=" + fillColor + "&isNational=" + (checkCurrentScreen() ? "YES" : "NO"));
  };
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  if ((chartData === null || chartData === void 0 ? void 0 : chartData.length) === 0 || !chartData) {
    return /*#__PURE__*/React__default.createElement(NoData, {
      t: t
    });
  }
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(recharts.ResponsiveContainer, {
    width: "98%",
    height: 320
  }, /*#__PURE__*/React__default.createElement(recharts.BarChart, {
    width: "70%",
    height: "100%",
    data: showDrillDown ? chartData === null || chartData === void 0 ? void 0 : chartData.slice(0, 3) : chartData,
    layout: layout,
    maxBarSize: 8,
    margin: {
      left: 200
    },
    barGap: 50
  }, showGrid && /*#__PURE__*/React__default.createElement(recharts.CartesianGrid, null), /*#__PURE__*/React__default.createElement(recharts.XAxis, {
    hide: hideAxis,
    dataKey: xDataKey,
    type: xAxisType,
    domain: [0, 90]
  }), /*#__PURE__*/React__default.createElement(recharts.YAxis, {
    dataKey: yDataKey,
    hide: hideAxis,
    type: yAxisType,
    padding: {
      right: 60
    }
  }), /*#__PURE__*/React__default.createElement(recharts.Bar, {
    dataKey: xDataKey,
    fill: COLORS$1[fillColor],
    background: {
      fill: "#D6D5D4",
      radius: 8
    },
    label: /*#__PURE__*/React__default.createElement(CustomLabel, {
      stroke: COLORS$1[fillColor],
      maxValue: maxValue
    }),
    radius: [8, 8, 8, 8],
    isAnimationActive: false,
    maxBarSize: 8
  }))), (chartData === null || chartData === void 0 ? void 0 : chartData.length) > 3 && showDrillDown && /*#__PURE__*/React__default.createElement("p", {
    className: "showMore",
    onClick: goToDrillDownCharts
  }, t("DSS_SHOW_MORE")));
};

var barColors = ["#048BD0", "#FBC02D", "#8E29BF", "#EA8A3B", "#0BABDE", "#6E8459", "#D4351C", "#0CF7E4", "#F80BF4", "#22F80B"];
var renderPlot = function renderPlot(plot, key, denomination) {
  var _plot$symbol, _plot$symbol2;
  var plotValue = key ? plot === null || plot === void 0 ? void 0 : plot[key] : (plot === null || plot === void 0 ? void 0 : plot.value) || 0;
  if ((plot === null || plot === void 0 ? void 0 : (_plot$symbol = plot.symbol) === null || _plot$symbol === void 0 ? void 0 : _plot$symbol.toLowerCase()) === "amount") {
    switch (denomination) {
      case "Unit":
        return plotValue;
      case "Lac":
        return Number((plotValue / 100000).toFixed(2));
      case "Cr":
        return Number((plotValue / 10000000).toFixed(2));
      default:
        return "";
    }
  } else if ((plot === null || plot === void 0 ? void 0 : (_plot$symbol2 = plot.symbol) === null || _plot$symbol2 === void 0 ? void 0 : _plot$symbol2.toLowerCase()) === "number") {
    return Number(plotValue.toFixed(1));
  } else {
    return plotValue;
  }
};
var CustomHorizontalBarChart = function CustomHorizontalBarChart(_ref) {
  var _value$range, _value$range$startDat, _value$range2, _value$range2$endDate, _response$responseDat6, _response$responseDat7;
  var data = _ref.data,
    _ref$xAxisType = _ref.xAxisType,
    xAxisType = _ref$xAxisType === void 0 ? "category" : _ref$xAxisType,
    _ref$yAxisType = _ref.yAxisType,
    yAxisType = _ref$yAxisType === void 0 ? "number" : _ref$yAxisType,
    _ref$xDataKey = _ref.xDataKey,
    xDataKey = _ref$xDataKey === void 0 ? "name" : _ref$xDataKey,
    _ref$yDataKey = _ref.yDataKey,
    yDataKey = _ref$yDataKey === void 0 ? "" : _ref$yDataKey,
    _ref$yAxisLabel = _ref.yAxisLabel,
    yAxisLabel = _ref$yAxisLabel === void 0 ? "" : _ref$yAxisLabel,
    _ref$layout = _ref.layout,
    layout = _ref$layout === void 0 ? "horizontal" : _ref$layout,
    title = _ref.title,
    _ref$showDrillDown = _ref.showDrillDown,
    showDrillDown = _ref$showDrillDown === void 0 ? false : _ref$showDrillDown,
    setChartDenomination = _ref.setChartDenomination;
  var id = data.id;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var history = reactRouterDom.useHistory();
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _Digit$Hooks$dss$useG = Digit.Hooks.dss.useGetChart({
      key: id,
      type: "metric",
      tenantId: tenantId,
      requestDate: _extends({}, value === null || value === void 0 ? void 0 : value.requestDate, {
        startDate: value === null || value === void 0 ? void 0 : (_value$range = value.range) === null || _value$range === void 0 ? void 0 : (_value$range$startDat = _value$range.startDate) === null || _value$range$startDat === void 0 ? void 0 : _value$range$startDat.getTime(),
        endDate: value === null || value === void 0 ? void 0 : (_value$range2 = value.range) === null || _value$range2 === void 0 ? void 0 : (_value$range2$endDate = _value$range2.endDate) === null || _value$range2$endDate === void 0 ? void 0 : _value$range2$endDate.getTime()
      }),
      filters: value === null || value === void 0 ? void 0 : value.filters
    }),
    isLoading = _Digit$Hooks$dss$useG.isLoading,
    response = _Digit$Hooks$dss$useG.data;
  var constructChartData = function constructChartData(data, denomination) {
    var result = {};
    for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i++) {
      var row = data[i];
      for (var j = 0; j < row.plots.length; j++) {
        var _extends2;
        var plot = row.plots[j];
        result[plot.name] = _extends({}, result[plot.name], (_extends2 = {}, _extends2[t(row.headerName)] = renderPlot(plot, 'value', denomination), _extends2.name = t(plot.name), _extends2));
      }
    }
    return Object.keys(result).map(function (key) {
      return _extends({
        name: key
      }, result[key]);
    });
  };
  var goToDrillDownCharts = function goToDrillDownCharts() {
    var _response$responseDat, _value$filters;
    history.push("/digit-ui/employee/dss/drilldown?chart=" + (response === null || response === void 0 ? void 0 : (_response$responseDat = response.responseData) === null || _response$responseDat === void 0 ? void 0 : _response$responseDat.drillDownChartId) + "&ulb=" + (value === null || value === void 0 ? void 0 : (_value$filters = value.filters) === null || _value$filters === void 0 ? void 0 : _value$filters.tenantId) + "&title=" + title);
  };
  var tooltipFormatter = function tooltipFormatter(value, name) {
    if (id === "fsmMonthlyWasteCal") {
      return [Math.round((value + Number.EPSILON) * 100) / 100 + " " + t("DSS_KL"), name];
    }
    return [Math.round((value + Number.EPSILON) * 100) / 100, name];
  };
  React.useEffect(function () {
    var _response$responseDat2, _response$responseDat3, _response$responseDat4;
    if (response) setChartDenomination(response === null || response === void 0 ? void 0 : (_response$responseDat2 = response.responseData) === null || _response$responseDat2 === void 0 ? void 0 : (_response$responseDat3 = _response$responseDat2.data) === null || _response$responseDat3 === void 0 ? void 0 : (_response$responseDat4 = _response$responseDat3[0]) === null || _response$responseDat4 === void 0 ? void 0 : _response$responseDat4.headerSymbol);
  }, [response]);
  var chartData = React.useMemo(function () {
    var _response$responseDat5;
    return constructChartData(response === null || response === void 0 ? void 0 : (_response$responseDat5 = response.responseData) === null || _response$responseDat5 === void 0 ? void 0 : _response$responseDat5.data, value === null || value === void 0 ? void 0 : value.denomination);
  }, [response, value === null || value === void 0 ? void 0 : value.denomination]);
  var renderLegend = function renderLegend(value) {
    return /*#__PURE__*/React__default.createElement("span", {
      style: {
        fontSize: "14px",
        color: "#505A5F"
      }
    }, value);
  };
  var tickFormatter = function tickFormatter(value) {
    if (typeof value === "string") {
      return value.replace("-", ", ");
    }
    return value;
  };
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  var formatXAxis = function formatXAxis(tickFormat) {
    return "" + tickFormat;
  };
  var bars = response === null || response === void 0 ? void 0 : (_response$responseDat6 = response.responseData) === null || _response$responseDat6 === void 0 ? void 0 : (_response$responseDat7 = _response$responseDat6.data) === null || _response$responseDat7 === void 0 ? void 0 : _response$responseDat7.map(function (bar) {
    return bar === null || bar === void 0 ? void 0 : bar.headerName;
  });
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement(recharts.ResponsiveContainer, {
    width: "94%",
    height: 450,
    margin: {
      top: 5,
      right: 5,
      left: 5,
      bottom: 5
    }
  }, (chartData === null || chartData === void 0 ? void 0 : chartData.length) === 0 || !chartData ? /*#__PURE__*/React__default.createElement(NoData, {
    t: t
  }) : /*#__PURE__*/React__default.createElement(recharts.BarChart, {
    width: "100%",
    height: "100%",
    margin: {
      top: 5,
      right: 5,
      left: 5,
      bottom: 5
    },
    layout: layout,
    data: chartData,
    barGap: 12,
    barSize: 12
  }, /*#__PURE__*/React__default.createElement(recharts.CartesianGrid, {
    strokeDasharray: "2 2"
  }), /*#__PURE__*/React__default.createElement(recharts.YAxis, {
    dataKey: yDataKey,
    type: yAxisType,
    tick: {
      fontSize: "12px",
      fill: "#505A5F"
    },
    label: {
      value: yAxisLabel,
      angle: -90,
      position: "insideLeft",
      dy: 50,
      fontSize: "12px",
      fill: "#505A5F"
    },
    tickCount: 10,
    tickFormatter: function tickFormatter(value) {
      return formatXAxis(value);
    },
    unit: id === "fsmCapacityUtilization" ? "%" : "",
    width: layout === "vertical" ? 120 : 60
  }), /*#__PURE__*/React__default.createElement(recharts.XAxis, {
    dataKey: xDataKey,
    type: xAxisType,
    tick: {
      fontSize: "14px",
      fill: "#505A5F"
    },
    tickCount: 10,
    tickFormatter: tickFormatter
  }), bars === null || bars === void 0 ? void 0 : bars.map(function (bar, id) {
    return /*#__PURE__*/React__default.createElement(recharts.Bar, {
      key: id,
      dataKey: t(bar),
      fill: barColors[id],
      stackId: (bars === null || bars === void 0 ? void 0 : bars.length) > 2 ? 1 : id
    });
  }), /*#__PURE__*/React__default.createElement(recharts.Legend, {
    formatter: renderLegend,
    iconType: "circle"
  }), /*#__PURE__*/React__default.createElement(recharts.Tooltip, {
    cursor: false,
    formatter: tooltipFormatter
  }))), showDrillDown && /*#__PURE__*/React__default.createElement("p", {
    className: "showMore",
    onClick: goToDrillDownCharts
  }, t("DSS_SHOW_MORE")));
};

var COLORS$2 = ["#048BD0", "#FBC02D", "#8E29BF", "#EA8A3B", "#0BABDE", "#6E8459", "#D4351C", "#0CF7E4", "#F80BF4", "#22F80B"];
var mobileView = innerWidth <= 640;
var CustomPieChart = function CustomPieChart(_ref) {
  var _value$range, _value$range$startDat, _value$range2, _value$range2$endDate, _response$responseDat15, _response$responseDat16, _response$responseDat17, _response$responseDat18, _response$responseDat19, _response$responseDat20, _response$responseDat21, _response$responseDat22;
  var _ref$dataKey = _ref.dataKey,
    dataKey = _ref$dataKey === void 0 ? "value" : _ref$dataKey,
    data = _ref.data,
    setChartDenomination = _ref.setChartDenomination;
  var id = data.id;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value;
  var _useState = React.useState(false),
    isPieClicked = _useState[0],
    setIsPieClicked = _useState[1];
  var _useState2 = React.useState(null),
    pieSelected = _useState2[0],
    setPieSelected = _useState2[1];
  var _useState3 = React.useState(null),
    drillDownId = _useState3[0],
    setdrillDownId = _useState3[1];
  var _Digit$Hooks$dss$useG = Digit.Hooks.dss.useGetChart({
      key: isPieClicked ? drillDownId : id,
      type: "metric",
      tenantId: tenantId,
      requestDate: _extends({}, value === null || value === void 0 ? void 0 : value.requestDate, {
        startDate: value === null || value === void 0 ? void 0 : (_value$range = value.range) === null || _value$range === void 0 ? void 0 : (_value$range$startDat = _value$range.startDate) === null || _value$range$startDat === void 0 ? void 0 : _value$range$startDat.getTime(),
        endDate: value === null || value === void 0 ? void 0 : (_value$range2 = value.range) === null || _value$range2 === void 0 ? void 0 : (_value$range2$endDate = _value$range2.endDate) === null || _value$range2$endDate === void 0 ? void 0 : _value$range2$endDate.getTime()
      }),
      filters: isPieClicked ? _extends({}, value === null || value === void 0 ? void 0 : value.filters, {
        selectedType: pieSelected
      }) : value === null || value === void 0 ? void 0 : value.filters
    }),
    isLoading = _Digit$Hooks$dss$useG.isLoading,
    response = _Digit$Hooks$dss$useG.data;
  var chartData = React.useMemo(function () {
    var _response$responseDat, _response$responseDat2, _response$responseDat3, _response$responseDat4, _response$responseDat5, _response$responseDat6, _response$responseDat7, _response$responseDat8, _response$responseDat9, _response$responseDat10;
    if (!response) return null;
    setChartDenomination(response === null || response === void 0 ? void 0 : (_response$responseDat = response.responseData) === null || _response$responseDat === void 0 ? void 0 : (_response$responseDat2 = _response$responseDat.data) === null || _response$responseDat2 === void 0 ? void 0 : (_response$responseDat3 = _response$responseDat2[0]) === null || _response$responseDat3 === void 0 ? void 0 : _response$responseDat3.headerSymbol);
    var compareFn = function compareFn(a, b) {
      return b.value - a.value;
    };
    return drillDownId === "deathByCategoryDrilldownAge" || (response === null || response === void 0 ? void 0 : (_response$responseDat4 = response.responseData) === null || _response$responseDat4 === void 0 ? void 0 : _response$responseDat4.visualizationCode) === "nssNumberOfDeathsByAge" ? response === null || response === void 0 ? void 0 : (_response$responseDat5 = response.responseData) === null || _response$responseDat5 === void 0 ? void 0 : (_response$responseDat6 = _response$responseDat5.data) === null || _response$responseDat6 === void 0 ? void 0 : (_response$responseDat7 = _response$responseDat6[0]) === null || _response$responseDat7 === void 0 ? void 0 : _response$responseDat7.plots.reduce(function (acc, plot, index) {
      acc = acc.concat(plot);
      return acc;
    }, []) : response === null || response === void 0 ? void 0 : (_response$responseDat8 = response.responseData) === null || _response$responseDat8 === void 0 ? void 0 : (_response$responseDat9 = _response$responseDat8.data) === null || _response$responseDat9 === void 0 ? void 0 : (_response$responseDat10 = _response$responseDat9[0]) === null || _response$responseDat10 === void 0 ? void 0 : _response$responseDat10.plots.sort(compareFn).reduce(function (acc, plot, index) {
      acc = acc.concat(plot);
      return acc;
    }, []);
  }, [response]);
  var renderLegend = function renderLegend(value) {
    return /*#__PURE__*/React__default.createElement("span", {
      style: {
        fontSize: "14px",
        color: "#505A5F"
      }
    }, t("COMMON_MASTERS_" + (value && Digit.Utils.locale.getTransformedLocale(value))));
  };
  var renderTooltip = function renderTooltip(_ref2) {
    var _payload$, _payload$2, _payload$3, _payload$4, _payload$4$payload, _payload$4$payload$pa, _payload$5, _response$responseDat11, _response$responseDat12, _response$responseDat13;
    var payload = _ref2.payload;
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        margin: "0px",
        padding: "10px",
        backgroundColor: "rgb(255, 255, 255)",
        border: "1px solid rgb(204, 204, 204)",
        whiteSpace: "nowrap"
      }
    }, /*#__PURE__*/React__default.createElement("p", {
      className: "recharts-tooltip-label"
    }, t("COMMON_MASTERS_" + ((payload === null || payload === void 0 ? void 0 : (_payload$ = payload[0]) === null || _payload$ === void 0 ? void 0 : _payload$.name) && Digit.Utils.locale.getTransformedLocale(payload === null || payload === void 0 ? void 0 : (_payload$2 = payload[0]) === null || _payload$2 === void 0 ? void 0 : _payload$2.name))) + ": " + Digit.Utils.dss.formatter(payload === null || payload === void 0 ? void 0 : (_payload$3 = payload[0]) === null || _payload$3 === void 0 ? void 0 : _payload$3.value, payload === null || payload === void 0 ? void 0 : (_payload$4 = payload[0]) === null || _payload$4 === void 0 ? void 0 : (_payload$4$payload = _payload$4.payload) === null || _payload$4$payload === void 0 ? void 0 : (_payload$4$payload$pa = _payload$4$payload.payload) === null || _payload$4$payload$pa === void 0 ? void 0 : _payload$4$payload$pa.symbol, value === null || value === void 0 ? void 0 : value.denomination, false)), /*#__PURE__*/React__default.createElement("p", null, "(" + Number((payload === null || payload === void 0 ? void 0 : (_payload$5 = payload[0]) === null || _payload$5 === void 0 ? void 0 : _payload$5.value) / (response === null || response === void 0 ? void 0 : (_response$responseDat11 = response.responseData) === null || _response$responseDat11 === void 0 ? void 0 : (_response$responseDat12 = _response$responseDat11.data) === null || _response$responseDat12 === void 0 ? void 0 : (_response$responseDat13 = _response$responseDat12[0]) === null || _response$responseDat13 === void 0 ? void 0 : _response$responseDat13.headerValue) * 100).toFixed(1) + "%)"));
  };

  var chartIDArray = ["mcCollectionByPaymentModev2", "mcRceiptsByPaymentModev2", "nssWsCollectionByChannel", "nssWsCollectionByUsage", "nssOBPSPermitIssuedByOccupancyType", "nssOBPSPermitIssuedByRiskType", "mcCollectionByPaymentType", "mcReceiptsByPaymentMode", "wscollectionByUsage", "wscollectionByChannel", "permitIssuedByOccupancyType", "permitIssuedByRiskType"];

  var checkChartID = function checkChartID(chartID) {
    return chartIDArray.includes(chartID);
  };
  var onPieClick = function onPieClick(_ref3) {
    var _response$responseDat14;
    var payload = _ref3.payload;
    setIsPieClicked(true);
    setdrillDownId(response === null || response === void 0 ? void 0 : (_response$responseDat14 = response.responseData) === null || _response$responseDat14 === void 0 ? void 0 : _response$responseDat14.drillDownChartId);
    setPieSelected(payload.name);
  };
  var removeFilter = function removeFilter() {
    setIsPieClicked(false);
  };
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, id === "deathByCategory" &&
  /*#__PURE__*/
  React__default.createElement("span", {
    className: "dss-pie-subheader",
    style: {
      position: "sticky",
      left: 0
    }
  }, t('DSS_CMN_PIE_INFO')), isPieClicked && /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("div", {
    className: "tag-container",
    style: {
      marginBottom: "unset"
    }
  }, /*#__PURE__*/React__default.createElement("span", {
    style: {
      marginTop: "20px"
    }
  }, t("DSS_FILTERS_APPLIED"), ": "), /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
    key: id,
    text: "" + t("COMMON_MASTERS_" + Digit.Utils.locale.getTransformedLocale(pieSelected)),
    onClick: removeFilter
  }))), (chartData === null || chartData === void 0 ? void 0 : chartData.length) === 0 || !chartData ? /*#__PURE__*/React__default.createElement(NoData, {
    t: t
  }) : /*#__PURE__*/React__default.createElement(recharts.ResponsiveContainer, {
    width: "99%",
    height: 340
  }, /*#__PURE__*/React__default.createElement(recharts.PieChart, {
    cy: 100
  }, /*#__PURE__*/React__default.createElement(recharts.Pie, {
    data: chartData,
    dataKey: dataKey,
    cy: 150,
    style: {
      cursor: (response === null || response === void 0 ? void 0 : (_response$responseDat15 = response.responseData) === null || _response$responseDat15 === void 0 ? void 0 : _response$responseDat15.drillDownChartId) !== "none" ? "pointer" : "default"
    },
    innerRadius: checkChartID(id) && !mobileView ? 90 : 70,
    outerRadius: checkChartID(id) && !mobileView ? 110 : 90,
    margin: {
      top: isPieClicked ? 0 : 5
    },
    fill: "#8884d8"
    ,
    labelLine: false,
    isAnimationActive: false,
    onClick: (response === null || response === void 0 ? void 0 : (_response$responseDat16 = response.responseData) === null || _response$responseDat16 === void 0 ? void 0 : _response$responseDat16.drillDownChartId) !== "none" ? onPieClick : null
  }, response === null || response === void 0 ? void 0 : (_response$responseDat17 = response.responseData) === null || _response$responseDat17 === void 0 ? void 0 : (_response$responseDat18 = _response$responseDat17.data) === null || _response$responseDat18 === void 0 ? void 0 : (_response$responseDat19 = _response$responseDat18[0]) === null || _response$responseDat19 === void 0 ? void 0 : _response$responseDat19.plots.map(function (entry, index) {
    return /*#__PURE__*/React__default.createElement(recharts.Cell, {
      key: "cell-",
      fill: COLORS$2[index % COLORS$2.length]
    });
  })), /*#__PURE__*/React__default.createElement(recharts.Tooltip, {
    content: renderTooltip
  }), /*#__PURE__*/React__default.createElement(recharts.Legend, {
    layout: "vertical",
    verticalAlign: "middle",
    align: "right",
    iconType: "circle",
    formatter: renderLegend,
    iconSize: 10,
    wrapperStyle: (chartData === null || chartData === void 0 ? void 0 : chartData.length) > 6 ? {
      paddingRight: checkChartID(id) && !mobileView ? 60 : 0,
      overflowY: "scroll",
      height: 250,
      width: "35%",
      overflowX: "auto",
      paddingTop: -20
    } : {
      paddingRight: checkChartID(id) && !mobileView ? 60 : 0,
      width: "27%",
      overflowX: "auto",
      paddingTop: -20
    }
  }))), isPieClicked && /*#__PURE__*/React__default.createElement("div", {
    style: {
      marginTop: "-4%",
      position: "absolute",
      width: "30%",
      textAlign: "center"
    }
  }, t(Digit.Utils.locale.getTransformedLocale((response === null || response === void 0 ? void 0 : (_response$responseDat20 = response.responseData) === null || _response$responseDat20 === void 0 ? void 0 : (_response$responseDat21 = _response$responseDat20.data) === null || _response$responseDat21 === void 0 ? void 0 : (_response$responseDat22 = _response$responseDat21[0]) === null || _response$responseDat22 === void 0 ? void 0 : _response$responseDat22.headerName) + "_" + pieSelected))));
};

var _g;
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function SvgArrowDownward(props) {
  return /*#__PURE__*/React.createElement("svg", _extends$1({
    width: 16,
    height: 16,
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g || (_g = /*#__PURE__*/React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M20 20H-4V-4h24z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#E54D42",
    fillRule: "nonzero",
    d: "M16 8l-1.41-1.41L9 12.17V0H7v12.17L1.42 6.58 0 8l8 8z"
  }))));
}

function ArrowDownwardElement(marginRight, marginLeft) {
  return /*#__PURE__*/React__default.createElement(SvgArrowDownward, {
    style: {
      display: "inline-block",
      verticalAlign: "baseline",
      marginRight: !marginRight ? "0px" : marginRight,
      marginLeft: !marginLeft ? "0px" : marginLeft
    }
  });
}

var _g$1;
function _extends$2() {
  _extends$2 = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
function SvgArrowUpward(props) {
  return /*#__PURE__*/React.createElement("svg", _extends$2({
    width: 16,
    height: 16,
    xmlns: "http://www.w3.org/2000/svg"
  }, props), _g$1 || (_g$1 = /*#__PURE__*/React.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M-4-4h24v24H-4z"
  }), /*#__PURE__*/React.createElement("path", {
    fill: "#259B24",
    fillRule: "nonzero",
    d: "M0 8l1.41 1.41L7 3.83V16h2V3.83l5.58 5.59L16 8 8 0z"
  }))));
}

function ArrowUpwardElement(marginRight, marginLeft) {
  return /*#__PURE__*/React__default.createElement(SvgArrowUpward, {
    style: {
      display: "inline-block",
      verticalAlign: "baseline",
      marginRight: !marginRight ? "0px" : marginRight,
      marginLeft: !marginLeft ? "0px" : marginLeft
    }
  });
}

var rowNamesToBeLocalised = ["Department", "", "Usage Type", "Ward", "Wards"];
var InsightView = function InsightView(_ref) {
  var rowValue = _ref.rowValue,
    insight = _ref.insight;
  return /*#__PURE__*/React__default.createElement("span", null, rowValue, " ", insight >= 0 ? ArrowUpwardElement() : ArrowDownwardElement(), " ", isNaN(insight) ? "0%" : Math.abs(insight) + "%");
};
var calculateFSTPCapacityUtilization = function calculateFSTPCapacityUtilization(value, totalCapacity, numberOfDays) {
  if (numberOfDays === void 0) {
    numberOfDays = 1;
  }
  if (value === undefined) return value;
  return Math.round(value / (totalCapacity * numberOfDays) * 100);
};
var CustomTable = function CustomTable(_ref2) {
  var _value$range, _value$range2, _filterStack, _filterStack2, _extends2, _value$range3, _value$range3$startDa, _value$range4, _value$range4$endDate, _filterStack3, _filterStack4, _extends3, _tableColumns$filter;
  var _ref2$data = _ref2.data,
    data = _ref2$data === void 0 ? {} : _ref2$data,
    onSearch = _ref2.onSearch,
    setChartData = _ref2.setChartData,
    setChartDenomination = _ref2.setChartDenomination;
  var id = data.id;
  var _useState = React.useState(id),
    chartKey = _useState[0],
    setChartKey = _useState[1];
  var _useState2 = React.useState([{
      id: chartKey
    }]),
    filterStack = _useState2[0],
    setFilterStack = _useState2[1];
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value,
    fstpMdmsData = _useContext.fstpMdmsData;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var dssTenants = Digit.SessionStorage.get("DSS_TENANTS");
  var lastYearDate = {
    startDate: subYears(value === null || value === void 0 ? void 0 : (_value$range = value.range) === null || _value$range === void 0 ? void 0 : _value$range.startDate, 1).getTime(),
    endDate: subYears(value === null || value === void 0 ? void 0 : (_value$range2 = value.range) === null || _value$range2 === void 0 ? void 0 : _value$range2.endDate, 1).getTime(),
    interval: "month",
    title: ""
  };
  var _Digit$Hooks$dss$useG = Digit.Hooks.dss.useGetChart({
      key: chartKey,
      type: "metric",
      tenantId: tenantId,
      requestDate: _extends({}, lastYearDate),
      filters: id === chartKey ? value === null || value === void 0 ? void 0 : value.filters : _extends({}, value === null || value === void 0 ? void 0 : value.filters, (_extends2 = {}, _extends2[(_filterStack = filterStack[filterStack.length - 1]) === null || _filterStack === void 0 ? void 0 : _filterStack.filterKey] = (_filterStack2 = filterStack[filterStack.length - 1]) === null || _filterStack2 === void 0 ? void 0 : _filterStack2.filterValue, _extends2))
    }),
    isRequestLoading = _Digit$Hooks$dss$useG.isLoading,
    lastYearResponse = _Digit$Hooks$dss$useG.data;
  var _Digit$Hooks$dss$useG2 = Digit.Hooks.dss.useGetChart({
      key: chartKey,
      type: "metric",
      tenantId: tenantId,
      requestDate: _extends({}, value === null || value === void 0 ? void 0 : value.requestDate, {
        startDate: value === null || value === void 0 ? void 0 : (_value$range3 = value.range) === null || _value$range3 === void 0 ? void 0 : (_value$range3$startDa = _value$range3.startDate) === null || _value$range3$startDa === void 0 ? void 0 : _value$range3$startDa.getTime(),
        endDate: value === null || value === void 0 ? void 0 : (_value$range4 = value.range) === null || _value$range4 === void 0 ? void 0 : (_value$range4$endDate = _value$range4.endDate) === null || _value$range4$endDate === void 0 ? void 0 : _value$range4$endDate.getTime()
      }),
      filters: id === chartKey ? value === null || value === void 0 ? void 0 : value.filters : _extends({}, value === null || value === void 0 ? void 0 : value.filters, (_extends3 = {}, _extends3[(_filterStack3 = filterStack[filterStack.length - 1]) === null || _filterStack3 === void 0 ? void 0 : _filterStack3.filterKey] = (_filterStack4 = filterStack[filterStack.length - 1]) === null || _filterStack4 === void 0 ? void 0 : _filterStack4.filterValue, _extends3))
    }),
    isLoading = _Digit$Hooks$dss$useG2.isLoading,
    response = _Digit$Hooks$dss$useG2.data;
  React.useEffect(function () {
    var id = data.id;
    setChartKey(id);
    setFilterStack([{
      id: id
    }]);
  }, [data, value]);
  var tableData = React.useMemo(function () {
    var _response$responseDat, _response$responseDat2, _response$responseDat3, _response$responseDat4, _response$responseDat5;
    if (!response || !lastYearResponse) return;
    setChartDenomination(response === null || response === void 0 ? void 0 : (_response$responseDat = response.responseData) === null || _response$responseDat === void 0 ? void 0 : (_response$responseDat2 = _response$responseDat.data) === null || _response$responseDat2 === void 0 ? void 0 : (_response$responseDat3 = _response$responseDat2[0]) === null || _response$responseDat3 === void 0 ? void 0 : _response$responseDat3.headerSymbol);
    return response === null || response === void 0 ? void 0 : (_response$responseDat4 = response.responseData) === null || _response$responseDat4 === void 0 ? void 0 : (_response$responseDat5 = _response$responseDat4.data) === null || _response$responseDat5 === void 0 ? void 0 : _response$responseDat5.map(function (rows, id) {
      var _lastYearResponse$res, _lastYearResponse$res2, _rows$plots;
      var lyData = lastYearResponse === null || lastYearResponse === void 0 ? void 0 : (_lastYearResponse$res = lastYearResponse.responseData) === null || _lastYearResponse$res === void 0 ? void 0 : (_lastYearResponse$res2 = _lastYearResponse$res.data) === null || _lastYearResponse$res2 === void 0 ? void 0 : _lastYearResponse$res2.find(function (lyRow) {
        return (lyRow === null || lyRow === void 0 ? void 0 : lyRow.headerName) === (rows === null || rows === void 0 ? void 0 : rows.headerName);
      });
      return rows === null || rows === void 0 ? void 0 : (_rows$plots = rows.plots) === null || _rows$plots === void 0 ? void 0 : _rows$plots.reduce(function (acc, row, currentIndex) {
        var _lyData$plots, _lyData$plots$current;
        var cellValue = (row === null || row === void 0 ? void 0 : row.value) !== null ? row === null || row === void 0 ? void 0 : row.value : (row === null || row === void 0 ? void 0 : row.label) || "";
        var prevData = lyData === null || lyData === void 0 ? void 0 : (_lyData$plots = lyData.plots) === null || _lyData$plots === void 0 ? void 0 : (_lyData$plots$current = _lyData$plots[currentIndex]) === null || _lyData$plots$current === void 0 ? void 0 : _lyData$plots$current.value;
        var insight = null;
        if ((row === null || row === void 0 ? void 0 : row.name) === "CapacityUtilization" && chartKey !== "fsmVehicleLogReportByVehicleNo") {
          var range = value.range;
          var startDate = range.startDate,
            endDate = range.endDate;
          var numberOfDays = differenceInCalendarDays(endDate, startDate) + 1;
          var ulbs = dssTenants.filter(function (tenant) {
            var _tenant$city;
            return (tenant === null || tenant === void 0 ? void 0 : (_tenant$city = tenant.city) === null || _tenant$city === void 0 ? void 0 : _tenant$city.ddrName) === (rows === null || rows === void 0 ? void 0 : rows.headerName) || (tenant === null || tenant === void 0 ? void 0 : tenant.code) === (rows === null || rows === void 0 ? void 0 : rows.headerName);
          }).map(function (tenant) {
            return tenant === null || tenant === void 0 ? void 0 : tenant.code;
          });
          var totalCapacity = fstpMdmsData === null || fstpMdmsData === void 0 ? void 0 : fstpMdmsData.filter(function (plant) {
            return ulbs.find(function (ulb) {
              var _plant$ULBS;
              return plant === null || plant === void 0 ? void 0 : (_plant$ULBS = plant.ULBS) === null || _plant$ULBS === void 0 ? void 0 : _plant$ULBS.includes(ulb);
            });
          }).reduce(function (acc, plant) {
            return acc + Number(plant === null || plant === void 0 ? void 0 : plant.PlantOperationalCapacityKLD);
          }, 0);
          cellValue = calculateFSTPCapacityUtilization(cellValue, totalCapacity, numberOfDays);
          prevData = calculateFSTPCapacityUtilization(prevData, totalCapacity, numberOfDays);
        }
        if ((row === null || row === void 0 ? void 0 : row.name) === "CapacityUtilization" && chartKey === "fsmVehicleLogReportByVehicleNo") {
          var tankCapcity = rows === null || rows === void 0 ? void 0 : rows.plots.find(function (plot) {
            return (plot === null || plot === void 0 ? void 0 : plot.name) === "TankCapacity";
          });
          cellValue = calculateFSTPCapacityUtilization(cellValue, tankCapcity === null || tankCapcity === void 0 ? void 0 : tankCapcity.value);
          prevData = calculateFSTPCapacityUtilization(prevData, tankCapcity === null || tankCapcity === void 0 ? void 0 : tankCapcity.value);
        }
        if (((row === null || row === void 0 ? void 0 : row.symbol) === "number" || (row === null || row === void 0 ? void 0 : row.symbol) === "percentage" || (row === null || row === void 0 ? void 0 : row.symbol) === "amount") && (row === null || row === void 0 ? void 0 : row.name) !== "CitizenAverageRating" && (row === null || row === void 0 ? void 0 : row.name) !== "TankCapacity" && lyData !== undefined) {
          if (prevData === cellValue) insight = 0;else insight = prevData === 0 ? 100 : Math.round((cellValue - prevData) / prevData * 100);
        }
        if (typeof cellValue === "number" && !Number.isInteger(cellValue)) {
          cellValue = Math.round((cellValue + Number.EPSILON) * 100) / 100;
        }
        if (typeof cellValue === "string" && rowNamesToBeLocalised !== null && rowNamesToBeLocalised !== void 0 && rowNamesToBeLocalised.includes(row.name)) {
          cellValue = t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(cellValue));
        }
        acc[t("DSS_HEADER_" + Digit.Utils.locale.getTransformedLocale(row === null || row === void 0 ? void 0 : row.name))] = insight !== null ? {
          value: cellValue,
          insight: insight
        } : (row === null || row === void 0 ? void 0 : row.name) === "S.N." ? id + 1 : cellValue;
        acc["key"] = rows === null || rows === void 0 ? void 0 : rows.headerName;
        return acc;
      }, {});
    });
  }, [response, lastYearResponse]);
  React.useEffect(function () {
    if (tableData) {
      var result = tableData === null || tableData === void 0 ? void 0 : tableData.map(function (row) {
        return Object.keys(row).reduce(function (acc, key) {
          var _row$key;
          if (key === "key") return acc;
          acc[key] = typeof (row === null || row === void 0 ? void 0 : row[key]) === "object" ? row === null || row === void 0 ? void 0 : (_row$key = row[key]) === null || _row$key === void 0 ? void 0 : _row$key.value : row === null || row === void 0 ? void 0 : row[key];
          return acc;
        }, {});
      });
      setChartData(result);
    } else {
      var _result = [];
      setChartData(_result);
    }
  }, [tableData]);
  var filterValue = React.useCallback(function (rows, id, filterValue) {
    if (filterValue === void 0) {
      filterValue = "";
    }
    return rows.filter(function (row) {
      var res = Object.keys(row === null || row === void 0 ? void 0 : row.values).find(function (key) {
        var _row$values, _String$toLowerCase, _row$values5, _filterValue3, _String$toLowerCase2, _row$values6, _filterValue4;
        if (typeof (row === null || row === void 0 ? void 0 : (_row$values = row.values) === null || _row$values === void 0 ? void 0 : _row$values[key]) === "object") {
          var _row$values2;
          return Object.keys(row === null || row === void 0 ? void 0 : (_row$values2 = row.values) === null || _row$values2 === void 0 ? void 0 : _row$values2[key]).find(function (id) {
            var _String, _row$values4, _row$values4$key, _filterValue2;
            if (id === "insight") {
              var _row$values3, _row$values3$key, _filterValue;
              return String(Math.abs(row === null || row === void 0 ? void 0 : (_row$values3 = row.values) === null || _row$values3 === void 0 ? void 0 : (_row$values3$key = _row$values3[key]) === null || _row$values3$key === void 0 ? void 0 : _row$values3$key[id]) + "%").toLowerCase().startsWith((_filterValue = filterValue) === null || _filterValue === void 0 ? void 0 : _filterValue.toLowerCase());
            }
            return (_String = String(row === null || row === void 0 ? void 0 : (_row$values4 = row.values) === null || _row$values4 === void 0 ? void 0 : (_row$values4$key = _row$values4[key]) === null || _row$values4$key === void 0 ? void 0 : _row$values4$key[id])) === null || _String === void 0 ? void 0 : _String.toLowerCase().includes((_filterValue2 = filterValue) === null || _filterValue2 === void 0 ? void 0 : _filterValue2.toLowerCase());
          });
        }
        return ((_String$toLowerCase = String(row === null || row === void 0 ? void 0 : (_row$values5 = row.values) === null || _row$values5 === void 0 ? void 0 : _row$values5[key]).toLowerCase()) === null || _String$toLowerCase === void 0 ? void 0 : _String$toLowerCase.includes((_filterValue3 = filterValue) === null || _filterValue3 === void 0 ? void 0 : _filterValue3.toLowerCase())) || ((_String$toLowerCase2 = String(t(row === null || row === void 0 ? void 0 : (_row$values6 = row.values) === null || _row$values6 === void 0 ? void 0 : _row$values6[key])).toLowerCase()) === null || _String$toLowerCase2 === void 0 ? void 0 : _String$toLowerCase2.includes((_filterValue4 = filterValue) === null || _filterValue4 === void 0 ? void 0 : _filterValue4.toLowerCase()))
        ;
      });

      return res;
    });
  }, []);
  var renderUnits = function renderUnits(denomination) {
    switch (denomination) {
      case "Unit":
        return "(" + t('DSS_' + Digit.Utils.locale.getTransformedLocale(denomination)) + ")";
      case "Lac":
        return "(" + t('DSS_' + Digit.Utils.locale.getTransformedLocale(denomination)) + ")";
      case "Cr":
        return "(" + t('DSS_' + Digit.Utils.locale.getTransformedLocale(denomination)) + ")";
      default:
        return "";
    }
  };
  var renderHeader = function renderHeader(plot) {
    var code = "DSS_HEADER_" + Digit.Utils.locale.getTransformedLocale(plot === null || plot === void 0 ? void 0 : plot.name);
    if ((plot === null || plot === void 0 ? void 0 : plot.symbol) === "amount") {
      return t(code) + " " + renderUnits(value === null || value === void 0 ? void 0 : value.denomination);
    }
    return t(code);
  };
  var getDrilldownCharts = function getDrilldownCharts(value, filterKey, label) {
    var _response$responseDat6, _response$responseDat7;
    if (response !== null && response !== void 0 && (_response$responseDat6 = response.responseData) !== null && _response$responseDat6 !== void 0 && _response$responseDat6.drillDownChartId && (response === null || response === void 0 ? void 0 : (_response$responseDat7 = response.responseData) === null || _response$responseDat7 === void 0 ? void 0 : _response$responseDat7.drillDownChartId) !== "none") {
      var _response$responseDat8, _response$responseDat9;
      var currentValue = value;
      if (filterKey === "tenantId") {
        var _currentValue;
        currentValue = dssTenants === null || dssTenants === void 0 ? void 0 : dssTenants.filter(function (tenant) {
          var _tenant$city2;
          return (tenant === null || tenant === void 0 ? void 0 : (_tenant$city2 = tenant.city) === null || _tenant$city2 === void 0 ? void 0 : _tenant$city2.ddrName) === value || (tenant === null || tenant === void 0 ? void 0 : tenant.code) === value || (tenant === null || tenant === void 0 ? void 0 : tenant.description) === value;
        }).map(function (tenant) {
          return tenant === null || tenant === void 0 ? void 0 : tenant.code;
        });
        if (((_currentValue = currentValue) === null || _currentValue === void 0 ? void 0 : _currentValue.length) == 0 && value) {
          currentValue = [value];
        }
        if (currentValue === undefined) return;
      }
      setFilterStack([].concat(filterStack, [{
        id: response === null || response === void 0 ? void 0 : (_response$responseDat8 = response.responseData) === null || _response$responseDat8 === void 0 ? void 0 : _response$responseDat8.drillDownChartId,
        name: value,
        filterKey: filterKey,
        filterValue: currentValue,
        label: label
      }]));
      setChartKey(response === null || response === void 0 ? void 0 : (_response$responseDat9 = response.responseData) === null || _response$responseDat9 === void 0 ? void 0 : _response$responseDat9.drillDownChartId);
    }
  };
  var sortRows = React.useCallback(function (rowA, rowB, columnId) {
    var _rowA$values, _rowB$values;
    var firstCell = rowA === null || rowA === void 0 ? void 0 : (_rowA$values = rowA.values) === null || _rowA$values === void 0 ? void 0 : _rowA$values[columnId];
    var secondCell = rowB === null || rowB === void 0 ? void 0 : (_rowB$values = rowB.values) === null || _rowB$values === void 0 ? void 0 : _rowB$values[columnId];
    var value1, value2;
    value1 = typeof firstCell === "object" ? firstCell === null || firstCell === void 0 ? void 0 : firstCell.value : firstCell;
    value2 = typeof secondCell === "object" ? secondCell === null || secondCell === void 0 ? void 0 : secondCell.value : secondCell;
    return String(value1).localeCompare(String(value2), undefined, {
      numeric: true
    });
  }, []);
  var accessData = function accessData(plot) {
    var name = t("DSS_HEADER_" + Digit.Utils.locale.getTransformedLocale(plot === null || plot === void 0 ? void 0 : plot.name));
    return function (originalRow, rowIndex, columns) {
      var cellValue = originalRow === null || originalRow === void 0 ? void 0 : originalRow[name];
      if ((plot === null || plot === void 0 ? void 0 : plot.symbol) === "amount") {
        return typeof cellValue === "object" ? {
          value: convertDenomination(cellValue === null || cellValue === void 0 ? void 0 : cellValue.value),
          insight: cellValue === null || cellValue === void 0 ? void 0 : cellValue.insight
        } : String(convertDenomination(cellValue));
      }
      return originalRow[name];
    };
  };
  var isMobile = window.Digit.Utils.browser.isMobile();
  var getTooltipStyles = function getTooltipStyles(name) {
    if (isMobile) return {
      height: "fit-content",
      background: "#555",
      padding: "5px",
      wordBreak: (name === null || name === void 0 ? void 0 : name.length) > 100 ? "break-all" : "break-word",
      overflowWrap: "break-word",
      borderRadius: "6px",
      maxWidth: "205px"
    };else return {
      height: "fit-content",
      background: "#555",
      width: "fit-content",
      padding: "5px",
      wordBreak: (name === null || name === void 0 ? void 0 : name.length) > 100 ? "break-all" : "break-word",
      overflowWrap: "break-word",
      borderRadius: "6px"
    };
  };
  var tableColumns = React.useMemo(function () {
    var _response$responseDat10, _response$responseDat11, _columns$plots;
    var columns = response === null || response === void 0 ? void 0 : (_response$responseDat10 = response.responseData) === null || _response$responseDat10 === void 0 ? void 0 : (_response$responseDat11 = _response$responseDat10.data) === null || _response$responseDat11 === void 0 ? void 0 : _response$responseDat11.find(function (row) {
      return !!row;
    });
    return columns === null || columns === void 0 ? void 0 : (_columns$plots = columns.plots) === null || _columns$plots === void 0 ? void 0 : _columns$plots.filter(function (plot) {
      return (plot === null || plot === void 0 ? void 0 : plot.name) !== "TankCapacity";
    }).map(function (plot) {
      var _plot$name;
      return {
        Header: /*#__PURE__*/React__default.createElement("span", {
          className: "tooltip"
        }, renderHeader(plot), /*#__PURE__*/React__default.createElement("span", {
          className: "tooltiptext",
          style: {
            fontSize: "14px",
            marginLeft: t("TIP_DSS_HEADER_" + Digit.Utils.locale.getTransformedLocale(plot === null || plot === void 0 ? void 0 : plot.name)).length < 10 ? -40 : (tableData === null || tableData === void 0 ? void 0 : tableData.length) > 2 ? -100 : -160,
            height: "35px",
            bottom: '0%',
            top: '100%',
            background: "none",
            width: (tableData === null || tableData === void 0 ? void 0 : tableData.length) > 2 || t("TIP_DSS_HEADER_" + Digit.Utils.locale.getTransformedLocale(plot === null || plot === void 0 ? void 0 : plot.name)).length < 42 ? "150px" : "250px"
          }
        }, /*#__PURE__*/React__default.createElement("div", {
          style: getTooltipStyles(t("TIP_DSS_HEADER_" + Digit.Utils.locale.getTransformedLocale(plot === null || plot === void 0 ? void 0 : plot.name)))
        }, t("TIP_DSS_HEADER_" + Digit.Utils.locale.getTransformedLocale(plot === null || plot === void 0 ? void 0 : plot.name))))),
        accessor: accessData(plot),
        id: plot === null || plot === void 0 ? void 0 : (_plot$name = plot.name) === null || _plot$name === void 0 ? void 0 : _plot$name.replaceAll(".", " "),
        symbol: plot === null || plot === void 0 ? void 0 : plot.symbol,
        sortType: sortRows,
        Cell: function Cell(args) {
          var _response$responseDat12, _response$responseDat13, _response$responseDat14;
          var cellValue = args.value,
            column = args.column,
            row = args.row;
          if (typeof cellValue === "object") {
            return /*#__PURE__*/React__default.createElement(InsightView, {
              insight: cellValue === null || cellValue === void 0 ? void 0 : cellValue.insight,
              rowValue: cellValue === null || cellValue === void 0 ? void 0 : cellValue.value
            });
          }
          var filter = response === null || response === void 0 ? void 0 : (_response$responseDat12 = response.responseData) === null || _response$responseDat12 === void 0 ? void 0 : (_response$responseDat13 = _response$responseDat12.filter) === null || _response$responseDat13 === void 0 ? void 0 : _response$responseDat13.find(function (elem) {
            return (elem === null || elem === void 0 ? void 0 : elem.column) === (column === null || column === void 0 ? void 0 : column.id);
          });
          if ((response === null || response === void 0 ? void 0 : (_response$responseDat14 = response.responseData) === null || _response$responseDat14 === void 0 ? void 0 : _response$responseDat14.drillDownChartId) !== "none" && filter !== undefined) {
            return /*#__PURE__*/React__default.createElement("span", {
              style: {
                color: "#F47738",
                cursor: "pointer"
              },
              onClick: function onClick() {
                return getDrilldownCharts(cellValue, filter === null || filter === void 0 ? void 0 : filter.key, t("DSS_HEADER_" + Digit.Utils.locale.getTransformedLocale(plot === null || plot === void 0 ? void 0 : plot.name)));
              }
            }, t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(cellValue)));
          }
          if ((column === null || column === void 0 ? void 0 : column.id) === "CitizenAverageRating") {
            return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Rating, {
              id: row === null || row === void 0 ? void 0 : row.id,
              currentRating: Math.round(cellValue * 10) / 10,
              styles: {
                width: "unset",
                marginBottom: 0
              },
              starStyles: {
                width: "25px"
              }
            });
          }
          return String(t(cellValue));
        }
      };
    });
  }, [response, value === null || value === void 0 ? void 0 : value.denomination, value === null || value === void 0 ? void 0 : value.range]);
  var convertDenomination = function convertDenomination(val) {
    var denomination = value.denomination;
    switch (denomination) {
      case "Unit":
        return val;
      case "Lac":
        return Number((val / 100000).toFixed(2));
      case "Cr":
        return Number((val / 10000000).toFixed(2));
      default:
        return val;
    }
  };
  var removeULB = function removeULB(id) {
    var _nextState;
    var nextState = filterStack === null || filterStack === void 0 ? void 0 : filterStack.filter(function (filter, index) {
      return index < id;
    });
    setFilterStack(nextState);
    setChartKey((_nextState = nextState[(nextState === null || nextState === void 0 ? void 0 : nextState.length) - 1]) === null || _nextState === void 0 ? void 0 : _nextState.id);
  };
  if (isLoading || isRequestLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", {
    style: {
      width: "100%"
    }
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "dss-table-subheader",
    style: {
      position: "sticky",
      left: 0
    }
  }, t('DSS_CMN_TABLE_INFO')), (filterStack === null || filterStack === void 0 ? void 0 : filterStack.length) > 1 && /*#__PURE__*/React__default.createElement("div", {
    className: "tag-container"
  }, /*#__PURE__*/React__default.createElement("span", {
    style: {
      marginTop: "20px"
    }
  }, t("DSS_FILTERS_APPLIED"), ": "), filterStack.map(function (filter, id) {
    return id > 0 ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: (filter === null || filter === void 0 ? void 0 : filter.label) + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter === null || filter === void 0 ? void 0 : filter.name)),
      onClick: function onClick() {
        return removeULB(id);
      }
    }) : null;
  })), !tableColumns || !tableData ? /*#__PURE__*/React__default.createElement(NoData, {
    t: t
  }) : /*#__PURE__*/React__default.createElement(digitUiReactComponents.Table, {
    className: "customTable ",
    t: t,
    customTableWrapperClassName: "dss-table-wrapper",
    disableSort: false,
    autoSort: true,
    manualPagination: false,
    globalSearch: filterValue,
    initSortId: "S N ",
    onSearch: onSearch,
    data: (tableData === null || tableData === void 0 ? void 0 : tableData.filter(function (tRow) {
      return tRow;
    })) || [],
    totalRecords: tableData === null || tableData === void 0 ? void 0 : tableData.length,
    columns: tableColumns === null || tableColumns === void 0 ? void 0 : (_tableColumns$filter = tableColumns.filter(function (row) {
      return row;
    })) === null || _tableColumns$filter === void 0 ? void 0 : _tableColumns$filter.slice(1),
    showAutoSerialNo: "DSS_HEADER_S_N_",
    styles: {
      overflow: "hidden"
    },
    getCellProps: function getCellProps(cellInfo) {
      return {
        style: {}
      };
    }
  }));
};

var SearchImg = function SearchImg() {
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.SearchIconSvg, {
    className: "signature-img"
  });
};
var GenericChart = function GenericChart(_ref) {
  var header = _ref.header,
    subHeader = _ref.subHeader,
    className = _ref.className,
    caption = _ref.caption,
    children = _ref.children,
    _ref$showHeader = _ref.showHeader,
    showHeader = _ref$showHeader === void 0 ? true : _ref$showHeader,
    _ref$showSearch = _ref.showSearch,
    showSearch = _ref$showSearch === void 0 ? false : _ref$showSearch,
    _ref$showDownload = _ref.showDownload,
    showDownload = _ref$showDownload === void 0 ? false : _ref$showDownload,
    onChange = _ref.onChange,
    _ref$chip = _ref.chip,
    chip = _ref$chip === void 0 ? [] : _ref$chip,
    updateChip = _ref.updateChip,
    _ref$value = _ref.value,
    value = _ref$value === void 0 ? {} : _ref$value;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useState = React.useState(null),
    chartData = _useState[0],
    setChartData = _useState[1];
  var _useState2 = React.useState(null),
    chartDenomination = _useState2[0],
    setChartDenomination = _useState2[1];
  var isMobile = window.Digit.Utils.browser.isMobile();
  var chart = React.useRef();
  var menuItems = [{
    code: "image",
    i18nKey: t("ES_COMMON_DOWNLOAD_IMAGE"),
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.DownloadIcon, null)
  }, {
    code: "shareImage",
    i18nKey: t("ES_DSS_SHARE_IMAGE"),
    target: "mail",
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.EmailIcon, null)
  }, {
    code: "shareImage",
    i18nKey: t("ES_DSS_SHARE_IMAGE"),
    target: "whatsapp",
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.WhatsappIcon, null)
  }];
  function download(data) {
    setTimeout(function () {
      switch (data.code) {
        case "pdf":
          return Digit.Download.PDF(chart, t(header));
        case "image":
          return Digit.Download.IndividualChartImage(chart, t(header));
        case "sharePdf":
          return Digit.ShareFiles.PDF(tenantId, chart, t(header), data.target);
        case "shareImage":
          return Digit.ShareFiles.IndividualChartImage(tenantId, chart, t(header), data.target);
        default:
          return null;
      }
    }, 500);
  }
  var handleExcelDownload = function handleExcelDownload() {
    return Digit.Download.Excel(chartData, t(header));
  };
  var headerName = t(Digit.Utils.locale.getTransformedLocale(header));
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
    className: "chart-item " + className,
    ReactRef: chart
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "chartHeader " + (showSearch && "column-direction")
  }, /*#__PURE__*/React__default.createElement("div", null, showHeader && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardLabel, {
    className: "dss-header-label"
  }, /*#__PURE__*/React__default.createElement("span", {
    className: "tooltip " + ((headerName === null || headerName === void 0 ? void 0 : headerName.length) < (isMobile ? 20 : 30) ? "dss-white-pre" : "dss-white-pre-line")
  }, headerName, (chartDenomination === null || chartDenomination === void 0 ? void 0 : chartDenomination.toLowerCase()) === "amount" && /*#__PURE__*/React__default.createElement("span", {
    style: {
      whiteSpace: "pre"
    }
  }, " (", t("DSS_" + Digit.Utils.locale.getTransformedLocale(value === null || value === void 0 ? void 0 : value.denomination)), ")"), /*#__PURE__*/React__default.createElement("span", {
    className: "tooltiptext",
    style: {
      whiteSpace: !isMobile ? "nowrap" : "normal",
      fontSize: "medium",
      marginLeft: t("TIP_" + Digit.Utils.locale.getTransformedLocale(header)).length > 30 ? -120 : -60
    }
  }, t("TIP_" + Digit.Utils.locale.getTransformedLocale(header))))), subHeader && /*#__PURE__*/React__default.createElement("p", {
    style: {
      color: "#505A5F",
      fontWeight: 700
    }
  }, subHeader)), /*#__PURE__*/React__default.createElement("div", {
    className: "sideContent"
  }, chip && chip.length > 1 && /*#__PURE__*/React__default.createElement(Chip, {
    items: chip,
    onClick: updateChip,
    t: t
  }), /*#__PURE__*/React__default.createElement("span", {
    className: "table-search-wrapper"
  }, showSearch && /*#__PURE__*/React__default.createElement(digitUiReactComponents.TextInput, {
    className: "searchInput",
    placeholder: "Search",
    signature: true,
    signatureImg: /*#__PURE__*/React__default.createElement(SearchImg, null),
    onChange: onChange
  }), showDownload && /*#__PURE__*/React__default.createElement(digitUiReactComponents.DownloadIcon, {
    className: "mrlg cursorPointer",
    onClick: handleExcelDownload
  })), !showDownload && /*#__PURE__*/React__default.createElement(digitUiReactComponents.EllipsisMenu, {
    menuItems: menuItems,
    displayKey: "i18nKey",
    onSelect: function onSelect(data) {
      return download(data);
    }
  }))), caption && /*#__PURE__*/React__default.createElement(digitUiReactComponents.CardCaption, null, caption), React__default.cloneElement(children, {
    setChartData: setChartData,
    setChartDenomination: setChartDenomination
  }));
};
var Chip = function Chip(props) {
  var _useState3 = React.useState(1),
    state = _useState3[0],
    setState = _useState3[1];
  return /*#__PURE__*/React__default.createElement("div", {
    className: "table-switch-card-chip"
  }, props.items.map(function (item, index) {
    var _item$tabName;
    return /*#__PURE__*/React__default.createElement("div", {
      className: item.active && state ? "table-switch-card-active" : "table-switch-card-inactive",
      onClick: function onClick() {
        props.onClick && props.onClick(item.index);
        setState(function (prev) {
          return prev + 1;
        });
      }
    }, props.t("DSS_TAB_" + (item === null || item === void 0 ? void 0 : (_item$tabName = item.tabName) === null || _item$tabName === void 0 ? void 0 : _item$tabName.toUpperCase())));
  }));
};

var MetricData = function MetricData(_ref) {
  var _data$insight, _data$insight$value, _data$insight$value$r, _data$insight2;
  var t = _ref.t,
    data = _ref.data,
    code = _ref.code;
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value;
  var insight = data === null || data === void 0 ? void 0 : (_data$insight = data.insight) === null || _data$insight === void 0 ? void 0 : (_data$insight$value = _data$insight.value) === null || _data$insight$value === void 0 ? void 0 : (_data$insight$value$r = _data$insight$value.replace(/[+-]/g, "")) === null || _data$insight$value$r === void 0 ? void 0 : _data$insight$value$r.split('%');
  return /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("p", {
    className: "heading-m",
    style: {
      textAlign: "right",
      paddingTop: "0px",
      whiteSpace: "nowrap"
    }
  }, code === "citizenAvgRating" ? /*#__PURE__*/React__default.createElement(digitUiReactComponents.Rating, {
    currentRating: Math.round((data === null || data === void 0 ? void 0 : data.headerValue) * 10) / 10,
    styles: {
      width: "unset"
    },
    starStyles: {
      width: "25px"
    }
  }) : Digit.Utils.dss.formatter(data === null || data === void 0 ? void 0 : data.headerValue, data === null || data === void 0 ? void 0 : data.headerSymbol, value === null || value === void 0 ? void 0 : value.denomination, true) + " " + (code === "totalSludgeTreated" ? t("DSS_KL") : "")), (data === null || data === void 0 ? void 0 : data.insight) && /*#__PURE__*/React__default.createElement("div", {
    style: {
      width: "100%",
      display: "flex",
      justifyContent: "end"
    }
  }, (data === null || data === void 0 ? void 0 : (_data$insight2 = data.insight) === null || _data$insight2 === void 0 ? void 0 : _data$insight2.indicator) === "upper_green" ? ArrowUpwardElement("10px") : ArrowDownwardElement("10px"), /*#__PURE__*/React__default.createElement("p", {
    className: "" + (data === null || data === void 0 ? void 0 : data.insight.colorCode),
    style: {
      whiteSpace: "pre"
    }
  }, (insight === null || insight === void 0 ? void 0 : insight[0]) && insight[0] + "% " + t(Digit.Utils.locale.getTransformedLocale('DSS' + (insight === null || insight === void 0 ? void 0 : insight[1]) || "")))));
};
var MetricChartRow = function MetricChartRow(_ref2) {
  var _value$range, _value$range$startDat, _value$range2, _value$range2$endDate, _name$filter, _showDate$id, _showDate$id2, _response$responseDat7, _response$responseDat8, _response$responseDat9;
  var data = _ref2.data,
    setChartDenomination = _ref2.setChartDenomination,
    index = _ref2.index;
  var id = data.id,
    chartType = data.chartType;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useContext2 = React.useContext(FilterContext),
    value = _useContext2.value;
  var _useState = React.useState({}),
    showDate = _useState[0],
    setShowDate = _useState[1];
  var isMobile = window.Digit.Utils.browser.isMobile();
  var _Digit$Hooks$dss$useG = Digit.Hooks.dss.useGetChart({
      key: id,
      type: chartType,
      tenantId: tenantId,
      requestDate: _extends({}, value === null || value === void 0 ? void 0 : value.requestDate, {
        startDate: value === null || value === void 0 ? void 0 : (_value$range = value.range) === null || _value$range === void 0 ? void 0 : (_value$range$startDat = _value$range.startDate) === null || _value$range$startDat === void 0 ? void 0 : _value$range$startDat.getTime(),
        endDate: value === null || value === void 0 ? void 0 : (_value$range2 = value.range) === null || _value$range2 === void 0 ? void 0 : (_value$range2$endDate = _value$range2.endDate) === null || _value$range2$endDate === void 0 ? void 0 : _value$range2$endDate.getTime()
      }),
      filters: value === null || value === void 0 ? void 0 : value.filters
    }),
    isLoading = _Digit$Hooks$dss$useG.isLoading,
    response = _Digit$Hooks$dss$useG.data;
  React.useEffect(function () {
    if (response) {
      var _response$responseDat, _response$responseDat2, _response$responseDat3, _response$responseDat4, _response$responseDat5, _response$responseDat6;
      var plots = (response === null || response === void 0 ? void 0 : (_response$responseDat = response.responseData) === null || _response$responseDat === void 0 ? void 0 : (_response$responseDat2 = _response$responseDat.data) === null || _response$responseDat2 === void 0 ? void 0 : (_response$responseDat3 = _response$responseDat2[0]) === null || _response$responseDat3 === void 0 ? void 0 : _response$responseDat3.plots) || null;
      if (plots && Array.isArray(plots) && plots.length > 0 && plots !== null && plots !== void 0 && plots.every(function (e) {
        return e.value;
      })) setShowDate(function (oldstate) {
        var _plots$, _plots$2, _extends2;
        return _extends({}, oldstate, (_extends2 = {}, _extends2[id] = {
          todaysDate: Digit.DateUtils.ConvertEpochToDate(plots === null || plots === void 0 ? void 0 : (_plots$ = plots[0]) === null || _plots$ === void 0 ? void 0 : _plots$.value),
          lastUpdatedTime: Digit.DateUtils.ConvertEpochToTimeInHours(plots === null || plots === void 0 ? void 0 : (_plots$2 = plots[1]) === null || _plots$2 === void 0 ? void 0 : _plots$2.value)
        }, _extends2));
      });
      index === 0 && setChartDenomination(response === null || response === void 0 ? void 0 : (_response$responseDat4 = response.responseData) === null || _response$responseDat4 === void 0 ? void 0 : (_response$responseDat5 = _response$responseDat4.data) === null || _response$responseDat5 === void 0 ? void 0 : (_response$responseDat6 = _response$responseDat5[0]) === null || _response$responseDat6 === void 0 ? void 0 : _response$responseDat6.headerSymbol);
    } else {
      setShowDate({});
    }
  }, [response]);
  if (isLoading) {
    return false;
  }
  if (!response) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "row"
    }, /*#__PURE__*/React__default.createElement("div", {
      className: "tooltip"
    }, t(data.name), /*#__PURE__*/React__default.createElement("span", {
      className: "tooltiptext",
      style: {
        fontSize: "medium",
        width: t("TIP_" + data.name).length < 50 ? "fit-content" : 400,
        height: 50,
        whiteSpace: "normal"
      }
    }, /*#__PURE__*/React__default.createElement("span", {
      style: {
        fontWeight: "500",
        color: "white"
      }
    }, t("TIP_" + data.name)))), /*#__PURE__*/React__default.createElement("span", {
      style: {
        whiteSpace: "pre"
      }
    }, t("DSS_NO_DATA")));
  }
  var name = t(data === null || data === void 0 ? void 0 : data.name) || "";
  var getWidth = function getWidth(data) {
    if (isMobile) return "auto";else return t("TIP_" + data.name).length < 50 ? "fit-content" : 400;
  };

  var getHeight = function getHeight(data) {
    if (isMobile) return "auto";else return 50;
  };

  return /*#__PURE__*/React__default.createElement("div", {
    className: "row"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "tooltip"
  }, typeof name == "string" && name, Array.isArray(name) && (name === null || name === void 0 ? void 0 : (_name$filter = name.filter(function (ele) {
    return ele;
  })) === null || _name$filter === void 0 ? void 0 : _name$filter.map(function (ele) {
    return /*#__PURE__*/React__default.createElement("div", {
      style: {
        whiteSpace: "pre"
      }
    }, ele);
  })), /*#__PURE__*/React__default.createElement("span", {
    className: "dss-white-pre",
    style: {
      display: "block"
    }
  }, " ", showDate === null || showDate === void 0 ? void 0 : (_showDate$id = showDate[id]) === null || _showDate$id === void 0 ? void 0 : _showDate$id.todaysDate), /*#__PURE__*/React__default.createElement("span", {
    className: "tooltiptext",
    style: {
      fontSize: "medium",
      width: getWidth(data),
      height: getHeight(),
      whiteSpace: "normal"
    }
  }, /*#__PURE__*/React__default.createElement("span", {
    style: {
      fontWeight: "500",
      color: "white"
    }
  }, t("TIP_" + data.name)), /*#__PURE__*/React__default.createElement("span", {
    style: {
      color: "white"
    }
  }, " ", showDate === null || showDate === void 0 ? void 0 : (_showDate$id2 = showDate[id]) === null || _showDate$id2 === void 0 ? void 0 : _showDate$id2.lastUpdatedTime))), /*#__PURE__*/React__default.createElement(MetricData, {
    t: t,
    data: response === null || response === void 0 ? void 0 : (_response$responseDat7 = response.responseData) === null || _response$responseDat7 === void 0 ? void 0 : (_response$responseDat8 = _response$responseDat7.data) === null || _response$responseDat8 === void 0 ? void 0 : _response$responseDat8[0],
    code: response === null || response === void 0 ? void 0 : (_response$responseDat9 = response.responseData) === null || _response$responseDat9 === void 0 ? void 0 : _response$responseDat9.visualizationCode
  }));
};
var MetricChart = function MetricChart(_ref3) {
  var data = _ref3.data,
    setChartDenomination = _ref3.setChartDenomination;
  var charts = data.charts;
  return /*#__PURE__*/React__default.createElement(React.Fragment, null, /*#__PURE__*/React__default.createElement("span", {
    className: "chart-metric-wrapper"
  }, charts.map(function (chart, index) {
    return /*#__PURE__*/React__default.createElement(MetricChartRow, {
      data: chart,
      key: index,
      index: index,
      setChartDenomination: setChartDenomination
    });
  })));
};

var Chart = function Chart(_ref) {
  var _response$responseDat, _response$responseDat2, _response$responseDat3;
  var data = _ref.data,
    _ref$url = _ref.url,
    url = _ref$url === void 0 ? "" : _ref$url;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var id = data.id,
    chartType = data.chartType;
  var requestDate = {
    startDate: getTime(startOfMonth(new Date())),
    endDate: getTime(endOfMonth(new Date())),
    interval: "month",
    title: ""
  };
  var history = reactRouterDom.useHistory();
  var _Digit$Hooks$dss$useG = Digit.Hooks.dss.useGetChart({
      key: id,
      type: chartType,
      tenantId: tenantId,
      requestDate: requestDate
    }),
    isLoading = _Digit$Hooks$dss$useG.isLoading,
    response = _Digit$Hooks$dss$useG.data;
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement("div", {
    className: "blocks cursorPointer"
  }, /*#__PURE__*/React__default.createElement("div", {
    onClick: function onClick() {
      return url && history.push("/digit-ui/employee/dss/dashboard/" + url);
    }
  }, /*#__PURE__*/React__default.createElement("p", null, t(data === null || data === void 0 ? void 0 : data.name)), /*#__PURE__*/React__default.createElement("p", null, response === null || response === void 0 ? void 0 : (_response$responseDat = response.responseData) === null || _response$responseDat === void 0 ? void 0 : (_response$responseDat2 = _response$responseDat.data) === null || _response$responseDat2 === void 0 ? void 0 : (_response$responseDat3 = _response$responseDat2[0]) === null || _response$responseDat3 === void 0 ? void 0 : _response$responseDat3.headerValue)));
};
var Summary = function Summary(_ref2) {
  var data = _ref2.data;
  var _useTranslation2 = reactI18next.useTranslation(),
    t = _useTranslation2.t;
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Card, {
    style: {
      flexBasis: "100%"
    }
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "summary-wrapper"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Poll, null), /*#__PURE__*/React__default.createElement("div", {
    className: "wrapper-child"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "blocks"
  }, /*#__PURE__*/React__default.createElement("p", null, t(data === null || data === void 0 ? void 0 : data.name))), /*#__PURE__*/React__default.createElement("div", {
    style: {
      display: "flex"
    }
  }, data.charts.map(function (chart, key) {
    var _data$ref;
    return /*#__PURE__*/React__default.createElement(Chart, {
      data: chart,
      key: key,
      url: data === null || data === void 0 ? void 0 : (_data$ref = data.ref) === null || _data$ref === void 0 ? void 0 : _data$ref.url
    });
  }))), /*#__PURE__*/React__default.createElement("div", {
    className: "wrapper-child"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "blocks cell-text",
    style: {
      justifyContent: "space-around"
    }
  }))));
};

var index = 1;
var showCustomLabel = function showCustomLabel(title, t) {
  switch (title) {
    case "DSS_FSM_MONTHLY_WASTE_CAL":
      return t("DSS_WASTE_RECIEVED") + " " + t("DSS_WASTE_UNIT");
    default:
      return "";
  }
};
var Layout = function Layout(_ref) {
  var rowData = _ref.rowData;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useContext = React.useContext(FilterContext),
    value = _useContext.value;
  var _useState = React.useState(""),
    searchQuery = _useState[0],
    onSearch = _useState[1];
  var _useState2 = React.useState({}),
    chip = _useState2[0],
    updateChip = _useState2[1];
  var renderChart = function renderChart(chart, title) {
    switch (chart.chartType) {
      case "table":
        return /*#__PURE__*/React__default.createElement(CustomTable, {
          data: chart,
          onSearch: searchQuery,
          chip: chip,
          title: title
        });
      case "donut":
        return /*#__PURE__*/React__default.createElement(CustomPieChart, {
          data: chart,
          title: title
        });
      case "line":
        return /*#__PURE__*/React__default.createElement(CustomAreaChart, {
          data: chart,
          title: title
        });
      case "horizontalBar":
        return /*#__PURE__*/React__default.createElement(CustomHorizontalBarChart, {
          data: chart,
          xAxisType: "number",
          yAxisType: "category",
          layout: "vertical",
          yDataKey: "name",
          xDataKey: "",
          showDrillDown: false,
          title: title
        });
      case "bar":
        return /*#__PURE__*/React__default.createElement(CustomHorizontalBarChart, {
          data: chart,
          title: title,
          yAxisLabel: showCustomLabel(title, t)
        });
      default:
        return null;
    }
  };
  var renderVisualizer = function renderVisualizer(visualizer, key, chip, onChipChange) {
    var _value$filters, _value$filters$tenant, _visualizer$charts, _visualizer$charts2, _visualizer$charts3, _chip$filter, _chip$filter$, _visualizer$charts4, _visualizer$charts5, _visualizer$charts6, _visualizer$charts7, _chip$filter2, _chip$filter2$, _value$filters2, _value$filters2$tenan, _visualizer$charts8, _visualizer$charts9, _visualizer$charts10, _chip$filter3, _chip$filter3$;
    switch (visualizer.vizType) {
      case "metric-collection":
        return /*#__PURE__*/React__default.createElement(GenericChart, {
          header: visualizer.name,
          className: "metricsTable",
          key: key,
          value: value
        }, /*#__PURE__*/React__default.createElement(MetricChart, {
          data: visualizer
        }));
      case "chart":
        if ((value === null || value === void 0 ? void 0 : (_value$filters = value.filters) === null || _value$filters === void 0 ? void 0 : (_value$filters$tenant = _value$filters.tenantId) === null || _value$filters$tenant === void 0 ? void 0 : _value$filters$tenant.length) === 0 && ((visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts = visualizer.charts) === null || _visualizer$charts === void 0 ? void 0 : _visualizer$charts[0].id) === "fsmTopDsoByPerformance" || (visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts2 = visualizer.charts) === null || _visualizer$charts2 === void 0 ? void 0 : _visualizer$charts2[0].id) === "fsmBottomDsoByPerformance")) return null;
        return /*#__PURE__*/React__default.createElement(GenericChart, {
          key: key,
          value: value,
          header: (visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts3 = visualizer.charts) === null || _visualizer$charts3 === void 0 ? void 0 : _visualizer$charts3[chip ? (_chip$filter = chip.filter(function (ele) {
            return ele.active;
          })) === null || _chip$filter === void 0 ? void 0 : (_chip$filter$ = _chip$filter[0]) === null || _chip$filter$ === void 0 ? void 0 : _chip$filter$.index : 0].chartType) === "line" ? "" + visualizer.name : visualizer.name,
          chip: chip,
          updateChip: onChipChange,
          showDownload: (visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts4 = visualizer.charts) === null || _visualizer$charts4 === void 0 ? void 0 : _visualizer$charts4[0].chartType) === "table",
          showSearch: (visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts5 = visualizer.charts) === null || _visualizer$charts5 === void 0 ? void 0 : _visualizer$charts5[0].chartType) === "table",
          className: (visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts6 = visualizer.charts) === null || _visualizer$charts6 === void 0 ? void 0 : _visualizer$charts6[0].chartType) === "table" && "fullWidth",
          onChange: function onChange(e) {
            return onSearch(e.target.value);
          }
        }, renderChart(visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts7 = visualizer.charts) === null || _visualizer$charts7 === void 0 ? void 0 : _visualizer$charts7[chip ? (_chip$filter2 = chip.filter(function (ele) {
          return ele.active;
        })) === null || _chip$filter2 === void 0 ? void 0 : (_chip$filter2$ = _chip$filter2[0]) === null || _chip$filter2$ === void 0 ? void 0 : _chip$filter2$.index : 0], visualizer.name));
      case "performing-metric":
        if ((value === null || value === void 0 ? void 0 : (_value$filters2 = value.filters) === null || _value$filters2 === void 0 ? void 0 : (_value$filters2$tenan = _value$filters2.tenantId) === null || _value$filters2$tenan === void 0 ? void 0 : _value$filters2$tenan.length) > 0 && ((visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts8 = visualizer.charts) === null || _visualizer$charts8 === void 0 ? void 0 : _visualizer$charts8[0].id) === "fsmTopUlbByPerformance" || (visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts9 = visualizer.charts) === null || _visualizer$charts9 === void 0 ? void 0 : _visualizer$charts9[0].id) === "fsmBottomUlbByPerformance")) return null;
        return /*#__PURE__*/React__default.createElement(GenericChart, {
          value: value,
          header: visualizer.name,
          subHeader: "(" + t("SUB_" + visualizer.name) + ")",
          key: key,
          chip: chip,
          updateChip: onChipChange
        }, /*#__PURE__*/React__default.createElement(CustomBarChart, {
          data: visualizer === null || visualizer === void 0 ? void 0 : (_visualizer$charts10 = visualizer.charts) === null || _visualizer$charts10 === void 0 ? void 0 : _visualizer$charts10[chip ? (_chip$filter3 = chip.filter(function (ele) {
            return ele.active;
          })) === null || _chip$filter3 === void 0 ? void 0 : (_chip$filter3$ = _chip$filter3[0]) === null || _chip$filter3$ === void 0 ? void 0 : _chip$filter3$.index : 0],
          fillColor: index++ % 2 ? "RED" : "GREEN",
          title: visualizer.name,
          showDrillDown: true
        }));
      case "collection":
      case "module":
        return /*#__PURE__*/React__default.createElement(Summary, {
          key: key,
          ttile: visualizer.name,
          data: visualizer
        });
      default:
        return null;
    }
  };
  React.useEffect(function () {
    var chipData = {};
    rowData.vizArray.map(function (chart) {
      var _chart$charts;
      if ((chart === null || chart === void 0 ? void 0 : (_chart$charts = chart.charts) === null || _chart$charts === void 0 ? void 0 : _chart$charts.length) > 1) {
        chipData[chart.name] = chart.charts.map(function (ele, ind) {
          return {
            tabName: ele.tabName,
            active: ind === 0,
            index: ind
          };
        });
      }
    });
    updateChip(_extends({}, chipData));
  }, []);
  return /*#__PURE__*/React__default.createElement("div", {
    className: "chart-row"
  }, rowData.vizArray.map(React.useCallback(function (chart, key) {
    var chipData = chip === null || chip === void 0 ? void 0 : chip[chart.name];
    var onChipChange = function onChipChange(index) {
      return updateChip(function (oldState) {
        var prevChip = oldState[chart.name];
        oldState[chart.name] = prevChip.map(function (ele) {
          return _extends({}, ele, {
            active: ele.index === index
          });
        });
        return _extends({}, oldState);
      });
    };
    return renderVisualizer(chart, key, chipData, onChipChange);
  }, [renderVisualizer, chip])));
};

var key = "DSS_FILTERS";
var getInitialRange = function getInitialRange() {
  var _data$range, _data$range2, _data$range3, _data$range4, _data$filters;
  var data = Digit.SessionStorage.get(key);
  var startDate = data !== null && data !== void 0 && (_data$range = data.range) !== null && _data$range !== void 0 && _data$range.startDate ? new Date(data === null || data === void 0 ? void 0 : (_data$range2 = data.range) === null || _data$range2 === void 0 ? void 0 : _data$range2.startDate) : Digit.Utils.dss.getDefaultFinacialYear().startDate;
  var endDate = data !== null && data !== void 0 && (_data$range3 = data.range) !== null && _data$range3 !== void 0 && _data$range3.endDate ? new Date(data === null || data === void 0 ? void 0 : (_data$range4 = data.range) === null || _data$range4 === void 0 ? void 0 : _data$range4.endDate) : Digit.Utils.dss.getDefaultFinacialYear().endDate;
  var title = format(startDate, "MMM d, yyyy") + " - " + format(endDate, "MMM d, yyyy");
  var interval = Digit.Utils.dss.getDuration(startDate, endDate);
  var denomination = (data === null || data === void 0 ? void 0 : data.denomination) || "Lac";
  var tenantId = (data === null || data === void 0 ? void 0 : (_data$filters = data.filters) === null || _data$filters === void 0 ? void 0 : _data$filters.tenantId) || [];
  return {
    startDate: startDate,
    endDate: endDate,
    title: title,
    interval: interval,
    denomination: denomination,
    tenantId: tenantId
  };
};
var DashBoard = function DashBoard(_ref) {
  var _dashboardConfig$2, _dashboardConfig$2$vi, _dashboardConfig$5, _filters$filters5, _filters$filters5$ten, _filters$filters6, _filters$filters7, _filters$filters7$ten, _filters$filters8, _filters$filters8$sta, _filters$filters9, _filters$filters10, _filters$filters10$st, _filters$filters11, _filters$filters11$ul, _filters$filters12, _filters$filters13, _filters$filters13$ul, _dashboardConfig$6;
  var stateCode = _ref.stateCode;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useState = React.useState(function () {
      var _getInitialRange = getInitialRange(),
        startDate = _getInitialRange.startDate,
        endDate = _getInitialRange.endDate,
        title = _getInitialRange.title,
        interval = _getInitialRange.interval,
        denomination = _getInitialRange.denomination,
        tenantId = _getInitialRange.tenantId;
      return {
        denomination: denomination,
        range: {
          startDate: startDate,
          endDate: endDate,
          title: title,
          interval: interval
        },
        requestDate: {
          startDate: startDate.getTime(),
          endDate: endDate.getTime(),
          interval: interval,
          title: title
        },
        filters: {
          tenantId: tenantId
        }
      };
    }),
    filters = _useState[0],
    setFilters = _useState[1];
  var _useState2 = React.useState(false),
    isFilterModalOpen = _useState2[0],
    setIsFilterModalOpen = _useState2[1];
  var isNational = checkCurrentScreen();
  var _useParams = reactRouterDom.useParams(),
    moduleCode = _useParams.moduleCode;
  var language = Digit.StoreData.getCurrentLanguage();
  var _Digit$Services$useSt = Digit.Services.useStore({
      stateCode: stateCode,
      moduleCode: moduleCode,
      language: language
    }),
    localizationLoading = _Digit$Services$useSt.isLoading;
  var _Digit$Hooks$dss$useM = Digit.Hooks.dss.useMDMS(stateCode, "dss-dashboard", "DssDashboard");
  var _Digit$Hooks$dss$useM2 = Digit.Hooks.dss.useMDMS(stateCode, "tenant", ["nationalInfo"], {
      select: function select(data) {
        var _data$tenant;
        var nationalInfo = (data === null || data === void 0 ? void 0 : (_data$tenant = data.tenant) === null || _data$tenant === void 0 ? void 0 : _data$tenant.nationalInfo) || [];
        var combinedResult = nationalInfo.reduce(function (acc, curr) {
          if (acc[curr.stateCode]) {
            acc[curr.stateCode].push(curr);
          } else {
            acc[curr.stateCode] = [curr];
          }
          return _extends({}, acc);
        }, {});
        var formattedResponse = {
          ddr: [],
          ulb: []
        };
        Object.keys(combinedResult).map(function (key) {
          var _combinedResult$key, _formattedResponse$ul;
          var stateName = (_combinedResult$key = combinedResult[key]) === null || _combinedResult$key === void 0 ? void 0 : _combinedResult$key[0].stateName;
          formattedResponse.ddr.push({
            code: key,
            ddrKey: stateName,
            ulbKey: stateName
          });
          (_formattedResponse$ul = formattedResponse.ulb).push.apply(_formattedResponse$ul, combinedResult[key].map(function (e) {
            return {
              code: e.code,
              ulbKey: e.name,
              ddrKey: e.stateName
            };
          }));
        });
        return formattedResponse;
      },
      enabled: isNational
    }),
    nationalInfo = _Digit$Hooks$dss$useM2.data,
    isLoadingNAT = _Digit$Hooks$dss$useM2.isLoadingNAT;
  var _Digit$Hooks$dss$useD = Digit.Hooks.dss.useDashboardConfig(moduleCode),
    response = _Digit$Hooks$dss$useD.data,
    isLoading = _Digit$Hooks$dss$useD.isLoading;
  var _Digit$Hooks$useModul = Digit.Hooks.useModuleTenants("DSS"),
    ulbTenants = _Digit$Hooks$useModul.data,
    isUlbLoading = _Digit$Hooks$useModul.isLoading;
  var _Digit$Hooks$useCommo = Digit.Hooks.useCommonMDMS(stateCode, "FSM", "FSTPPlantInfo"),
    isMdmsLoading = _Digit$Hooks$useCommo.isLoading,
    mdmsData = _Digit$Hooks$useCommo.data;
  var _useState3 = React.useState(false),
    showOptions = _useState3[0],
    setShowOptions = _useState3[1];
  var _useState4 = React.useState(false),
    showFilters = _useState4[0],
    setShowFilters = _useState4[1];
  var _useState5 = React.useState(""),
    tabState = _useState5[0],
    setTabState = _useState5[1];
  var handleFilters = function handleFilters(data) {
    Digit.SessionStorage.set(key, data);
    setFilters(data);
  };
  var fullPageRef = React.useRef();
  var provided = React.useMemo(function () {
    return {
      value: filters,
      setValue: handleFilters,
      ulbTenants: isNational ? nationalInfo : ulbTenants,
      fstpMdmsData: mdmsData
    };
  }, [filters, isUlbLoading, isMdmsLoading]);
  var mobileView = window.Digit.Utils.browser.isMobile();
  var handlePrint = function handlePrint() {
    var _dashboardConfig$;
    return Digit.Download.PDF(fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$ = dashboardConfig[0]) === null || _dashboardConfig$ === void 0 ? void 0 : _dashboardConfig$.name));
  };
  var removeULB = function removeULB(id) {
    var _filters$filters;
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        tenantId: [].concat(filters === null || filters === void 0 ? void 0 : (_filters$filters = filters.filters) === null || _filters$filters === void 0 ? void 0 : _filters$filters.tenantId).filter(function (tenant, index) {
          return index !== id;
        })
      })
    }));
  };
  var removeST = function removeST(id) {
    var _filters$filters2, _filters$filters3;
    var newStates = [].concat(filters === null || filters === void 0 ? void 0 : (_filters$filters2 = filters.filters) === null || _filters$filters2 === void 0 ? void 0 : _filters$filters2.state).filter(function (tenant, index) {
      return index !== id;
    });
    var newUlbs = (filters === null || filters === void 0 ? void 0 : (_filters$filters3 = filters.filters) === null || _filters$filters3 === void 0 ? void 0 : _filters$filters3.ulb) || [];
    if ((newStates === null || newStates === void 0 ? void 0 : newStates.length) == 0) {
      newUlbs = [];
    } else {
      var _nationalInfo$ulb, _nationalInfo$ulb$fil;
      var filteredUlbs = nationalInfo === null || nationalInfo === void 0 ? void 0 : (_nationalInfo$ulb = nationalInfo.ulb) === null || _nationalInfo$ulb === void 0 ? void 0 : (_nationalInfo$ulb$fil = _nationalInfo$ulb.filter(function (e) {
        return Digit.Utils.dss.getCitiesAvailable(e, newStates);
      })) === null || _nationalInfo$ulb$fil === void 0 ? void 0 : _nationalInfo$ulb$fil.map(function (ulbs) {
        return ulbs === null || ulbs === void 0 ? void 0 : ulbs.code;
      });
      newUlbs = newUlbs.filter(function (ulb) {
        return filteredUlbs.includes(ulb);
      });
    }
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        state: newStates,
        ulb: newUlbs
      })
    }));
  };
  var removeTenant = function removeTenant(id) {
    var _filters$filters4;
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        ulb: [].concat(filters === null || filters === void 0 ? void 0 : (_filters$filters4 = filters.filters) === null || _filters$filters4 === void 0 ? void 0 : _filters$filters4.ulb).filter(function (tenant, index) {
          return index !== id;
        })
      })
    }));
  };
  var handleClear = function handleClear() {
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        tenantId: []
      })
    }));
  };
  var clearAllTn = function clearAllTn() {
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        ulb: []
      })
    }));
  };
  var clearAllSt = function clearAllSt() {
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        state: [],
        ulb: []
      })
    }));
  };
  var dashboardConfig = response === null || response === void 0 ? void 0 : response.responseData;
  var tabArrayObj = (dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$2 = dashboardConfig[0]) === null || _dashboardConfig$2 === void 0 ? void 0 : (_dashboardConfig$2$vi = _dashboardConfig$2.visualizations) === null || _dashboardConfig$2$vi === void 0 ? void 0 : _dashboardConfig$2$vi.reduce(function (curr, acc) {
    curr[acc.name] = 0;
    return _extends({}, curr);
  }, {})) || {};
  var tabArray = Object.keys(tabArrayObj).map(function (key) {
    return key;
  });
  React.useEffect(function () {
    if ((tabArray === null || tabArray === void 0 ? void 0 : tabArray.length) > 0 && tabState == "") {
      setTabState(tabArray[0]);
    }
  }, [tabArray]);
  var shareOptions =
  [
  {
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.EmailIcon, null),
    label: t("ES_DSS_SHARE_IMAGE"),
    onClick: function onClick() {
      setShowOptions(!showOptions);
      setTimeout(function () {
        var _dashboardConfig$3;
        return Digit.ShareFiles.DownloadImage(tenantId, fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$3 = dashboardConfig[0]) === null || _dashboardConfig$3 === void 0 ? void 0 : _dashboardConfig$3.name), "mail");
      }, 500);
    }
  }, {
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.WhatsappIcon, null),
    label: t("ES_DSS_SHARE_IMAGE"),
    onClick: function onClick() {
      setShowOptions(!showOptions);
      setTimeout(function () {
        var _dashboardConfig$4;
        return Digit.ShareFiles.DownloadImage(tenantId, fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$4 = dashboardConfig[0]) === null || _dashboardConfig$4 === void 0 ? void 0 : _dashboardConfig$4.name), "whatsapp");
      }, 500);
    }
  }];
  if (isLoading || isUlbLoading || localizationLoading || isMdmsLoading || isLoadingNAT) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(FilterContext.Provider, {
    value: provided
  }, /*#__PURE__*/React__default.createElement("div", {
    ref: fullPageRef,
    id: "divToPrint"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "options"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, {
    styles: mobileView ? {
      marginLeft: "0px",
      whiteSpace: "pre-line"
    } : {
      marginBottom: "0px",
      whiteSpace: "pre"
    }
  }, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$5 = dashboardConfig[0]) === null || _dashboardConfig$5 === void 0 ? void 0 : _dashboardConfig$5.name)), mobileView ? null : /*#__PURE__*/React__default.createElement("div", {
    className: "divToBeHidden"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "mrlg divToBeHidden"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiLink, {
    className: "multilink-block-wrapper divToBeHidden",
    label: t("ES_DSS_SHARE"),
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.ShareIcon, {
      className: "mrsm"
    })
    ,
    onHeadClick: function onHeadClick(e) {
      setShowOptions(e !== undefined ? e : !showOptions);
    },
    displayOptions: showOptions,
    options: shareOptions
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "mrsm divToBeHidden",
    onClick: handlePrint
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.DownloadIcon, {
    className: "mrsm divToBeHidden"
  }), t("ES_DSS_DOWNLOAD")))), isNational ? /*#__PURE__*/React__default.createElement(Filters$1, {
    t: t,
    ulbTenants: nationalInfo,
    isOpen: isFilterModalOpen,
    closeFilters: function closeFilters() {
      return setIsFilterModalOpen(false);
    },
    isNational: isNational
  }) : /*#__PURE__*/React__default.createElement(Filters, {
    t: t,
    ulbTenants: isNational ? nationalInfo : ulbTenants,
    isOpen: isFilterModalOpen,
    closeFilters: function closeFilters() {
      return setIsFilterModalOpen(false);
    },
    isNational: isNational
  }), (filters === null || filters === void 0 ? void 0 : (_filters$filters5 = filters.filters) === null || _filters$filters5 === void 0 ? void 0 : (_filters$filters5$ten = _filters$filters5.tenantId) === null || _filters$filters5$ten === void 0 ? void 0 : _filters$filters5$ten.length) > 0 && /*#__PURE__*/React__default.createElement("div", {
    className: "tag-container"
  }, !showFilters && (filters === null || filters === void 0 ? void 0 : (_filters$filters6 = filters.filters) === null || _filters$filters6 === void 0 ? void 0 : _filters$filters6.tenantId) && filters.filters.tenantId.slice(0, 5).map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_ULB") + ": " + t(filter),
      onClick: function onClick() {
        return removeULB(id);
      }
    });
  }), (filters === null || filters === void 0 ? void 0 : (_filters$filters7 = filters.filters) === null || _filters$filters7 === void 0 ? void 0 : (_filters$filters7$ten = _filters$filters7.tenantId) === null || _filters$filters7$ten === void 0 ? void 0 : _filters$filters7$ten.length) > 6 && /*#__PURE__*/React__default.createElement(React.Fragment, null, showFilters && filters.filters.tenantId.map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_ULB") + ": " + t(filter),
      onClick: function onClick() {
        return removeULB(id);
      }
    });
  }), !showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(true);
    }
  }, t("DSS_FILTER_SHOWALL")), showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(false);
    }
  }, t("DSS_FILTER_SHOWLESS"))), /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: handleClear
  }, t("DSS_FILTER_CLEAR"))), (filters === null || filters === void 0 ? void 0 : (_filters$filters8 = filters.filters) === null || _filters$filters8 === void 0 ? void 0 : (_filters$filters8$sta = _filters$filters8.state) === null || _filters$filters8$sta === void 0 ? void 0 : _filters$filters8$sta.length) > 0 && /*#__PURE__*/React__default.createElement("div", {
    className: "tag-container"
  }, !showFilters && (filters === null || filters === void 0 ? void 0 : (_filters$filters9 = filters.filters) === null || _filters$filters9 === void 0 ? void 0 : _filters$filters9.state) && filters.filters.state.slice(0, 5).map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_STATE") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeST(id);
      }
    });
  }), (filters === null || filters === void 0 ? void 0 : (_filters$filters10 = filters.filters) === null || _filters$filters10 === void 0 ? void 0 : (_filters$filters10$st = _filters$filters10.state) === null || _filters$filters10$st === void 0 ? void 0 : _filters$filters10$st.length) > 6 && /*#__PURE__*/React__default.createElement(React.Fragment, null, showFilters && filters.filters.state.map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_STATE") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeST(id);
      }
    });
  }), !showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(true);
    }
  }, t("DSS_FILTER_SHOWALL")), showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(false);
    }
  }, t("DSS_FILTER_SHOWLESS"))), /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: clearAllSt
  }, t("DSS_FILTER_CLEAR_ST"))), (filters === null || filters === void 0 ? void 0 : (_filters$filters11 = filters.filters) === null || _filters$filters11 === void 0 ? void 0 : (_filters$filters11$ul = _filters$filters11.ulb) === null || _filters$filters11$ul === void 0 ? void 0 : _filters$filters11$ul.length) > 0 && /*#__PURE__*/React__default.createElement("div", {
    className: "tag-container"
  }, !showFilters && (filters === null || filters === void 0 ? void 0 : (_filters$filters12 = filters.filters) === null || _filters$filters12 === void 0 ? void 0 : _filters$filters12.ulb) && filters.filters.ulb.slice(0, 5).map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_ULB") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeTenant(id);
      }
    });
  }), (filters === null || filters === void 0 ? void 0 : (_filters$filters13 = filters.filters) === null || _filters$filters13 === void 0 ? void 0 : (_filters$filters13$ul = _filters$filters13.ulb) === null || _filters$filters13$ul === void 0 ? void 0 : _filters$filters13$ul.length) > 6 && /*#__PURE__*/React__default.createElement(React.Fragment, null, showFilters && filters.filters.ulb.map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_ULB") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeTenant(id);
      }
    });
  }), !showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(true);
    }
  }, t("DSS_FILTER_SHOWALL")), showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(false);
    }
  }, t("DSS_FILTER_SHOWLESS"))), /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: clearAllTn
  }, t("DSS_FILTER_CLEAR_TN"))), mobileView ? /*#__PURE__*/React__default.createElement("div", {
    className: "options-m"
  }, /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.FilterIcon, {
    onClick: function onClick() {
      return setIsFilterModalOpen(!isFilterModalOpen);
    },
    style: true
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "divToBeHidden"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiLink, {
    className: "multilink-block-wrapper",
    label: t("ES_DSS_SHARE"),
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.ShareIcon, {
      className: "mrsm"
    }),
    onHeadClick: function onHeadClick(e) {
      setShowOptions(!showOptions);
    },
    displayOptions: showOptions,
    options: shareOptions
  })), /*#__PURE__*/React__default.createElement("div", {
    onClick: handlePrint,
    className: "divToBeHidden"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.DownloadIcon, null), t("ES_DSS_DOWNLOAD"))) : null, /*#__PURE__*/React__default.createElement("div", null, tabArray && (tabArray === null || tabArray === void 0 ? void 0 : tabArray.length) > 1 && /*#__PURE__*/React__default.createElement("div", {
    className: "dss-switch-tabs chart-row"
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "dss-switch-tab-wrapper"
  }, tabArray === null || tabArray === void 0 ? void 0 : tabArray.map(function (key) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: tabState === key ? "dss-switch-tab-selected" : "dss-switch-tab-unselected",
      onClick: function onClick() {
        return setTabState(key);
      }
    }, t(key));
  })))), dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$6 = dashboardConfig[0]) === null || _dashboardConfig$6 === void 0 ? void 0 : _dashboardConfig$6.visualizations.filter(function (row) {
    return row.name === tabState;
  }).map(function (row, key) {
    return /*#__PURE__*/React__default.createElement(Layout, {
      rowData: row,
      key: key
    });
  })));
};

var key$1 = "DSS_FILTERS";
var getInitialRange$1 = function getInitialRange() {
  var _data$range, _data$range2, _data$range3, _data$range4, _data$filters;
  var data = Digit.SessionStorage.get(key$1);
  var startDate = data !== null && data !== void 0 && (_data$range = data.range) !== null && _data$range !== void 0 && _data$range.startDate ? new Date(data === null || data === void 0 ? void 0 : (_data$range2 = data.range) === null || _data$range2 === void 0 ? void 0 : _data$range2.startDate) : Digit.Utils.dss.getDefaultFinacialYear().startDate;
  var endDate = data !== null && data !== void 0 && (_data$range3 = data.range) !== null && _data$range3 !== void 0 && _data$range3.endDate ? new Date(data === null || data === void 0 ? void 0 : (_data$range4 = data.range) === null || _data$range4 === void 0 ? void 0 : _data$range4.endDate) : Digit.Utils.dss.getDefaultFinacialYear().endDate;
  var title = format(startDate, "MMM d, yyyy") + " - " + format(endDate, "MMM d, yyyy");
  var interval = Digit.Utils.dss.getDuration(startDate, endDate);
  var denomination = (data === null || data === void 0 ? void 0 : data.denomination) || "Lac";
  var tenantId = (data === null || data === void 0 ? void 0 : (_data$filters = data.filters) === null || _data$filters === void 0 ? void 0 : _data$filters.tenantId) || [];
  return {
    startDate: startDate,
    endDate: endDate,
    title: title,
    interval: interval,
    denomination: denomination,
    tenantId: tenantId
  };
};
var DashBoard$1 = function DashBoard(_ref) {
  var _dashboardConfig$8, _dashboardConfig$9;
  var stateCode = _ref.stateCode;
  var tenantId = Digit.ULBService.getCurrentTenantId();
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _useState = React.useState(function () {
      var _getInitialRange = getInitialRange$1(),
        startDate = _getInitialRange.startDate,
        endDate = _getInitialRange.endDate,
        title = _getInitialRange.title,
        interval = _getInitialRange.interval,
        denomination = _getInitialRange.denomination,
        tenantId = _getInitialRange.tenantId;
      return {
        denomination: denomination,
        range: {
          startDate: startDate,
          endDate: endDate,
          title: title,
          interval: interval
        },
        requestDate: {
          startDate: startDate.getTime(),
          endDate: endDate.getTime(),
          interval: interval,
          title: title
        },
        filters: {
          tenantId: tenantId
        }
      };
    }),
    filters = _useState[0],
    setFilters = _useState[1];
  var _useParams = reactRouterDom.useParams(),
    moduleCode = _useParams.moduleCode;
  var language = Digit.StoreData.getCurrentLanguage();
  var _Digit$Services$useSt = Digit.Services.useStore({
      stateCode: stateCode,
      moduleCode: moduleCode,
      language: language
    }),
    localizationLoading = _Digit$Services$useSt.isLoading;
  var _Digit$Hooks$dss$useD = Digit.Hooks.dss.useDashboardConfig(moduleCode),
    response = _Digit$Hooks$dss$useD.data,
    isLoading = _Digit$Hooks$dss$useD.isLoading;
  var _useState2 = React.useState(false),
    showOptions = _useState2[0],
    setShowOptions = _useState2[1];
  var handleFilters = function handleFilters(data) {
    Digit.SessionStorage.set(key$1, data);
    setFilters(data);
  };
  var fullPageRef = React.useRef();
  var provided = React.useMemo(function () {
    return {
      value: filters,
      setValue: handleFilters
    };
  }, [filters]);
  var mobileView = innerWidth <= 640;
  var handlePrint = function handlePrint() {
    var _dashboardConfig$;
    return Digit.Download.PDF(fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$ = dashboardConfig[0]) === null || _dashboardConfig$ === void 0 ? void 0 : _dashboardConfig$.name));
  };
  var dashboardConfig = response === null || response === void 0 ? void 0 : response.responseData;
  var shareOptions = navigator.share ? [{
    label: t("ES_DSS_SHARE_PDF"),
    onClick: function onClick() {
      setShowOptions(!showOptions);
      setTimeout(function () {
        var _dashboardConfig$2;
        return Digit.ShareFiles.PDF(tenantId, fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$2 = dashboardConfig[0]) === null || _dashboardConfig$2 === void 0 ? void 0 : _dashboardConfig$2.name));
      }, 500);
    }
  }, {
    label: t("ES_DSS_SHARE_IMAGE"),
    onClick: function onClick() {
      setShowOptions(!showOptions);
      setTimeout(function () {
        var _dashboardConfig$3;
        return Digit.ShareFiles.Image(tenantId, fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$3 = dashboardConfig[0]) === null || _dashboardConfig$3 === void 0 ? void 0 : _dashboardConfig$3.name));
      }, 500);
    }
  }] : [{
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.EmailIcon, null),
    label: t("ES_DSS_SHARE_PDF"),
    onClick: function onClick() {
      setShowOptions(!showOptions);
      setTimeout(function () {
        var _dashboardConfig$4;
        return Digit.ShareFiles.PDF(tenantId, fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$4 = dashboardConfig[0]) === null || _dashboardConfig$4 === void 0 ? void 0 : _dashboardConfig$4.name), "mail");
      }, 500);
    }
  }, {
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.WhatsappIcon, null),
    label: t("ES_DSS_SHARE_PDF"),
    onClick: function onClick() {
      setShowOptions(!showOptions);
      setTimeout(function () {
        var _dashboardConfig$5;
        return Digit.ShareFiles.PDF(tenantId, fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$5 = dashboardConfig[0]) === null || _dashboardConfig$5 === void 0 ? void 0 : _dashboardConfig$5.name), "whatsapp");
      }, 500);
    }
  }, {
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.EmailIcon, null),
    label: t("ES_DSS_SHARE_IMAGE"),
    onClick: function onClick() {
      setShowOptions(!showOptions);
      setTimeout(function () {
        var _dashboardConfig$6;
        return Digit.ShareFiles.Image(tenantId, fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$6 = dashboardConfig[0]) === null || _dashboardConfig$6 === void 0 ? void 0 : _dashboardConfig$6.name), "mail");
      }, 500);
    }
  }, {
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.WhatsappIcon, null),
    label: t("ES_DSS_SHARE_IMAGE"),
    onClick: function onClick() {
      setShowOptions(!showOptions);
      setTimeout(function () {
        var _dashboardConfig$7;
        return Digit.ShareFiles.Image(tenantId, fullPageRef, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$7 = dashboardConfig[0]) === null || _dashboardConfig$7 === void 0 ? void 0 : _dashboardConfig$7.name), "whatsapp");
      }, 500);
    }
  }];
  if (isLoading || localizationLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(FilterContext.Provider, {
    value: provided
  }, /*#__PURE__*/React__default.createElement("div", {
    ref: fullPageRef
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "options"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, {
    styles: {
      marginBottom: "0px"
    }
  }, t(dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$8 = dashboardConfig[0]) === null || _dashboardConfig$8 === void 0 ? void 0 : _dashboardConfig$8.name)), mobileView ? null : /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement("div", {
    className: "mrlg"
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiLink, {
    className: "multilink-block-wrapper",
    label: t("ES_DSS_SHARE"),
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.ShareIcon, {
      className: "mrsm"
    }),
    showOptions: function showOptions(e) {
      return setShowOptions(e);
    },
    onHeadClick: function onHeadClick(e) {
      return setShowOptions(e !== undefined ? e : !showOptions);
    },
    displayOptions: showOptions,
    options: shareOptions
  })), /*#__PURE__*/React__default.createElement("div", {
    className: "mrsm",
    onClick: handlePrint
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.DownloadIcon, {
    className: "mrsm"
  }), t("ES_DSS_DOWNLOAD")))), mobileView ? /*#__PURE__*/React__default.createElement("div", {
    className: "options-m"
  }, /*#__PURE__*/React__default.createElement("div", null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.MultiLink, {
    className: "multilink-block-wrapper",
    label: t("ES_DSS_SHARE"),
    icon: /*#__PURE__*/React__default.createElement(digitUiReactComponents.ShareIcon, {
      className: "mrsm"
    }),
    showOptions: function showOptions(e) {
      return setShowOptions(e);
    },
    onHeadClick: function onHeadClick(e) {
      return setShowOptions(e !== undefined ? e : !showOptions);
    },
    displayOptions: showOptions,
    options: shareOptions
  })), /*#__PURE__*/React__default.createElement("div", {
    onClick: handlePrint
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.DownloadIcon, null), t("ES_DSS_DOWNLOAD"))) : null, dashboardConfig === null || dashboardConfig === void 0 ? void 0 : (_dashboardConfig$9 = dashboardConfig[0]) === null || _dashboardConfig$9 === void 0 ? void 0 : _dashboardConfig$9.visualizations.map(function (row, key) {
    return /*#__PURE__*/React__default.createElement(Layout, {
      rowData: row,
      key: key,
      forHome: true
    });
  })));
};

var key$2 = "DSS_FILTERS";
var getInitialRange$2 = function getInitialRange() {
  var _data$range, _data$range2, _data$range3, _data$range4, _data$filters;
  var data = Digit.SessionStorage.get(key$2);
  var startDate = data !== null && data !== void 0 && (_data$range = data.range) !== null && _data$range !== void 0 && _data$range.startDate ? new Date(data === null || data === void 0 ? void 0 : (_data$range2 = data.range) === null || _data$range2 === void 0 ? void 0 : _data$range2.startDate) : addMonths(startOfYear(new Date()), 3);
  var endDate = data !== null && data !== void 0 && (_data$range3 = data.range) !== null && _data$range3 !== void 0 && _data$range3.endDate ? new Date(data === null || data === void 0 ? void 0 : (_data$range4 = data.range) === null || _data$range4 === void 0 ? void 0 : _data$range4.endDate) : addMonths(endOfYear(new Date()), 3);
  var title = format(startDate, "MMM d, yyyy") + " - " + format(endDate, "MMM d, yyyy");
  var interval = Digit.Utils.dss.getDuration(startDate, endDate);
  var denomination = (data === null || data === void 0 ? void 0 : data.denomination) || "Unit";
  var tenantId = (data === null || data === void 0 ? void 0 : (_data$filters = data.filters) === null || _data$filters === void 0 ? void 0 : _data$filters.tenantId) || [];
  return {
    startDate: startDate,
    endDate: endDate,
    title: title,
    interval: interval,
    denomination: denomination,
    tenantId: tenantId
  };
};
var DrillDown = function DrillDown(_ref) {
  var _filters$filters5, _filters$filters5$ten, _filters$filters6, _filters$filters7, _filters$filters7$ten, _filters$filters8, _filters$filters8$sta, _filters$filters9, _filters$filters10, _filters$filters10$st, _filters$filters11, _filters$filters11$ul, _filters$filters12, _filters$filters13, _filters$filters13$ul;
  var stateCode = _ref.stateCode;
  var _useState = React.useState(""),
    searchQuery = _useState[0],
    onSearch = _useState[1];
  var _Digit$Hooks$useQuery = Digit.Hooks.useQueryParams(),
    chart = _Digit$Hooks$useQuery.chart,
    title = _Digit$Hooks$useQuery.title,
    _Digit$Hooks$useQuery2 = _Digit$Hooks$useQuery.type,
    type = _Digit$Hooks$useQuery2 === void 0 ? "table" : _Digit$Hooks$useQuery2,
    _Digit$Hooks$useQuery3 = _Digit$Hooks$useQuery.fillColor,
    fillColor = _Digit$Hooks$useQuery3 === void 0 ? "" : _Digit$Hooks$useQuery3,
    _Digit$Hooks$useQuery4 = _Digit$Hooks$useQuery.isNational,
    isNational = _Digit$Hooks$useQuery4 === void 0 ? "NO" : _Digit$Hooks$useQuery4;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var nationalDB = isNational == "YES" ? true : false;
  var _useState2 = React.useState(function () {
      var _getInitialRange = getInitialRange$2(),
        startDate = _getInitialRange.startDate,
        endDate = _getInitialRange.endDate,
        title = _getInitialRange.title,
        interval = _getInitialRange.interval,
        tenantId = _getInitialRange.tenantId;
      return {
        range: {
          startDate: startDate,
          endDate: endDate,
          title: title,
          interval: interval
        },
        requestDate: {
          startDate: startDate.getTime(),
          endDate: endDate.getTime(),
          interval: interval,
          title: title
        },
        filters: {
          tenantId: tenantId
        }
      };
    }),
    filters = _useState2[0],
    setFilters = _useState2[1];
  var _useState3 = React.useState(false),
    showFilters = _useState3[0],
    setShowFilters = _useState3[1];
  var handleFilters = function handleFilters(data) {
    Digit.SessionStorage.set(key$2, data);
    setFilters(data);
  };
  var _Digit$Hooks$useModul = Digit.Hooks.useModuleTenants("DSS"),
    ulbTenants = _Digit$Hooks$useModul.data,
    isUlbLoading = _Digit$Hooks$useModul.isLoading;
  var provided = React.useMemo(function () {
    return {
      value: filters,
      setValue: handleFilters
    };
  }, [filters]);
  var _Digit$Hooks$dss$useM = Digit.Hooks.dss.useMDMS(stateCode, "tenant", ["nationalInfo"], {
      select: function select(data) {
        var _data$tenant;
        var nationalInfo = (data === null || data === void 0 ? void 0 : (_data$tenant = data.tenant) === null || _data$tenant === void 0 ? void 0 : _data$tenant.nationalInfo) || [];
        var combinedResult = nationalInfo.reduce(function (acc, curr) {
          if (acc[curr.stateCode]) {
            acc[curr.stateCode].push(curr);
          } else {
            acc[curr.stateCode] = [curr];
          }
          return _extends({}, acc);
        }, {});
        var formattedResponse = {
          ddr: [],
          ulb: []
        };
        Object.keys(combinedResult).map(function (key) {
          var _combinedResult$key, _formattedResponse$ul;
          var stateName = (_combinedResult$key = combinedResult[key]) === null || _combinedResult$key === void 0 ? void 0 : _combinedResult$key[0].stateName;
          formattedResponse.ddr.push({
            code: key,
            ddrKey: stateName,
            ulbKey: stateName
          });
          (_formattedResponse$ul = formattedResponse.ulb).push.apply(_formattedResponse$ul, combinedResult[key].map(function (e) {
            return {
              code: e.code,
              ulbKey: e.name,
              ddrKey: e.stateName
            };
          }));
        });
        return formattedResponse;
      },
      enabled: nationalDB
    }),
    nationalInfo = _Digit$Hooks$dss$useM.data;
  var removeULB = function removeULB(id) {
    var _filters$filters;
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        tenantId: [].concat(filters === null || filters === void 0 ? void 0 : (_filters$filters = filters.filters) === null || _filters$filters === void 0 ? void 0 : _filters$filters.tenantId).filter(function (tenant, index) {
          return index !== id;
        })
      })
    }));
  };
  var removeST = function removeST(id) {
    var _filters$filters2, _filters$filters3;
    var newStates = [].concat(filters === null || filters === void 0 ? void 0 : (_filters$filters2 = filters.filters) === null || _filters$filters2 === void 0 ? void 0 : _filters$filters2.state).filter(function (tenant, index) {
      return index !== id;
    });
    var newUlbs = (filters === null || filters === void 0 ? void 0 : (_filters$filters3 = filters.filters) === null || _filters$filters3 === void 0 ? void 0 : _filters$filters3.ulb) || [];
    if ((newStates === null || newStates === void 0 ? void 0 : newStates.length) == 0) {
      newUlbs = [];
    } else {
      var _nationalInfo$ulb, _nationalInfo$ulb$fil;
      var filteredUlbs = nationalInfo === null || nationalInfo === void 0 ? void 0 : (_nationalInfo$ulb = nationalInfo.ulb) === null || _nationalInfo$ulb === void 0 ? void 0 : (_nationalInfo$ulb$fil = _nationalInfo$ulb.filter(function (e) {
        return Digit.Utils.dss.getCitiesAvailable(e, newStates);
      })) === null || _nationalInfo$ulb$fil === void 0 ? void 0 : _nationalInfo$ulb$fil.map(function (ulbs) {
        return ulbs === null || ulbs === void 0 ? void 0 : ulbs.code;
      });
      newUlbs = newUlbs.filter(function (ulb) {
        return filteredUlbs.includes(ulb);
      });
    }
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        state: newStates,
        ulb: newUlbs
      })
    }));
  };
  var removeTenant = function removeTenant(id) {
    var _filters$filters4;
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        ulb: [].concat(filters === null || filters === void 0 ? void 0 : (_filters$filters4 = filters.filters) === null || _filters$filters4 === void 0 ? void 0 : _filters$filters4.ulb).filter(function (tenant, index) {
          return index !== id;
        })
      })
    }));
  };
  var handleClear = function handleClear() {
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        tenantId: []
      })
    }));
  };
  var clearAllTn = function clearAllTn() {
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        ulb: []
      })
    }));
  };
  var clearAllSt = function clearAllSt() {
    handleFilters(_extends({}, filters, {
      filters: _extends({}, filters === null || filters === void 0 ? void 0 : filters.filters, {
        state: [],
        ulb: []
      })
    }));
  };
  if (isUlbLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  return /*#__PURE__*/React__default.createElement(FilterContext.Provider, {
    value: provided
  }, /*#__PURE__*/React__default.createElement(digitUiReactComponents.Header, null, t(title)), isNational ? /*#__PURE__*/React__default.createElement(Filters$1, {
    t: t,
    ulbTenants: nationalInfo,
    isNational: isNational
  }) : /*#__PURE__*/React__default.createElement(Filters, {
    t: t,
    ulbTenants: isNational ? nationalInfo : ulbTenants
    ,
    isNational: nationalDB
  }), (filters === null || filters === void 0 ? void 0 : (_filters$filters5 = filters.filters) === null || _filters$filters5 === void 0 ? void 0 : (_filters$filters5$ten = _filters$filters5.tenantId) === null || _filters$filters5$ten === void 0 ? void 0 : _filters$filters5$ten.length) > 0 && /*#__PURE__*/React__default.createElement("div", {
    className: "tag-container"
  }, !showFilters && (filters === null || filters === void 0 ? void 0 : (_filters$filters6 = filters.filters) === null || _filters$filters6 === void 0 ? void 0 : _filters$filters6.tenantId) && filters.filters.tenantId.slice(0, 5).map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_ULB") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeULB(id);
      }
    });
  }), (filters === null || filters === void 0 ? void 0 : (_filters$filters7 = filters.filters) === null || _filters$filters7 === void 0 ? void 0 : (_filters$filters7$ten = _filters$filters7.tenantId) === null || _filters$filters7$ten === void 0 ? void 0 : _filters$filters7$ten.length) > 6 && /*#__PURE__*/React__default.createElement(Fragment, null, showFilters && filters.filters.tenantId.map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_ULB") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeULB(id);
      }
    });
  }), !showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(true);
    }
  }, t("DSS_FILTER_SHOWALL")), showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(false);
    }
  }, t("DSS_FILTER_SHOWLESS"))), /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: handleClear
  }, t("DSS_FILTER_CLEAR"))), (filters === null || filters === void 0 ? void 0 : (_filters$filters8 = filters.filters) === null || _filters$filters8 === void 0 ? void 0 : (_filters$filters8$sta = _filters$filters8.state) === null || _filters$filters8$sta === void 0 ? void 0 : _filters$filters8$sta.length) > 0 && /*#__PURE__*/React__default.createElement("div", {
    className: "tag-container"
  }, !showFilters && (filters === null || filters === void 0 ? void 0 : (_filters$filters9 = filters.filters) === null || _filters$filters9 === void 0 ? void 0 : _filters$filters9.state) && filters.filters.state.slice(0, 5).map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_STATE") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeST(id);
      }
    });
  }), (filters === null || filters === void 0 ? void 0 : (_filters$filters10 = filters.filters) === null || _filters$filters10 === void 0 ? void 0 : (_filters$filters10$st = _filters$filters10.state) === null || _filters$filters10$st === void 0 ? void 0 : _filters$filters10$st.length) > 6 && /*#__PURE__*/React__default.createElement(Fragment, null, showFilters && filters.filters.state.map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_STATE") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeST(id);
      }
    });
  }), !showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(true);
    }
  }, t("DSS_FILTER_SHOWALL")), showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(false);
    }
  }, t("DSS_FILTER_SHOWLESS"))), /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: clearAllSt
  }, t("DSS_FILTER_CLEAR_ST"))), (filters === null || filters === void 0 ? void 0 : (_filters$filters11 = filters.filters) === null || _filters$filters11 === void 0 ? void 0 : (_filters$filters11$ul = _filters$filters11.ulb) === null || _filters$filters11$ul === void 0 ? void 0 : _filters$filters11$ul.length) > 0 && /*#__PURE__*/React__default.createElement("div", {
    className: "tag-container"
  }, !showFilters && (filters === null || filters === void 0 ? void 0 : (_filters$filters12 = filters.filters) === null || _filters$filters12 === void 0 ? void 0 : _filters$filters12.ulb) && filters.filters.ulb.slice(0, 5).map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_ULB") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeTenant(id);
      }
    });
  }), (filters === null || filters === void 0 ? void 0 : (_filters$filters13 = filters.filters) === null || _filters$filters13 === void 0 ? void 0 : (_filters$filters13$ul = _filters$filters13.ulb) === null || _filters$filters13$ul === void 0 ? void 0 : _filters$filters13$ul.length) > 6 && /*#__PURE__*/React__default.createElement(Fragment, null, showFilters && filters.filters.ulb.map(function (filter, id) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.RemoveableTag, {
      key: id,
      text: t("DSS_HEADER_ULB") + ": " + t("DSS_TB_" + Digit.Utils.locale.getTransformedLocale(filter)),
      onClick: function onClick() {
        return removeTenant(id);
      }
    });
  }), !showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(true);
    }
  }, t("DSS_FILTER_SHOWALL")), showFilters && /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: function onClick() {
      return setShowFilters(false);
    }
  }, t("DSS_FILTER_SHOWLESS"))), /*#__PURE__*/React__default.createElement("p", {
    className: "clearText cursorPointer",
    onClick: clearAllTn
  }, t("DSS_FILTER_CLEAR_TN"))), type === "table" && /*#__PURE__*/React__default.createElement(GenericChart, {
    header: title,
    showDownload: true,
    showSearch: true,
    className: "fullWidth",
    onChange: function onChange(e) {
      return onSearch(e.target.value);
    },
    showHeader: false
  }, /*#__PURE__*/React__default.createElement(CustomTable, {
    data: {
      id: chart
    },
    onSearch: searchQuery
  })), type === "performing-metric" && /*#__PURE__*/React__default.createElement(GenericChart, {
    header: title,
    subHeader: "(" + t("SUB_" + title) + ")",
    showHeader: false,
    className: "fullWidth"
  }, /*#__PURE__*/React__default.createElement(CustomBarChart, {
    data: {
      id: chart
    },
    fillColor: fillColor,
    title: title,
    showDrillDown: false
  })));
};

var DssBreadCrumb = function DssBreadCrumb(_ref) {
  var location = _ref.location;
  var _useTranslation = reactI18next.useTranslation(),
    t = _useTranslation.t;
  var _Digit$Hooks$useQuery = Digit.Hooks.useQueryParams(),
    _Digit$Hooks$useQuery2 = _Digit$Hooks$useQuery.fromModule,
    fromModule = _Digit$Hooks$useQuery2 === void 0 ? false : _Digit$Hooks$useQuery2,
    title = _Digit$Hooks$useQuery.title;
  var moduleName = Digit.Utils.dss.getCurrentModuleName();
  var crumbs = [{
    path: "/digit-ui/employee",
    content: t("ES_COMMON_HOME"),
    show: true
  }, {
    path: fromModule ? "/digit-ui/employee/dss/dashboard/" + fromModule : "/digit-ui/employee/dss/dashboard/" + Digit.Utils.dss.getCurrentModuleName(),
    content: t("ES_COMMON_DSS_" + Digit.Utils.locale.getTransformedLocale(fromModule ? fromModule : moduleName)),
    show: true
  }, {
    path: "/digit-ui/employee/dss/drilldown",
    content: location.pathname.includes("drilldown") ? t(title) : t("ES_COMMON_DSS_DRILL"),
    show: location.pathname.includes("drilldown") ? true : false
  }];
  return /*#__PURE__*/React__default.createElement(digitUiReactComponents.BreadCrumb, {
    crumbs: crumbs
  });
};
var Routes = function Routes(_ref2) {
  var path = _ref2.path,
    stateCode = _ref2.stateCode;
  var location = reactRouterDom.useLocation();
  return /*#__PURE__*/React__default.createElement("div", {
    className: "chart-wrapper"
  }, /*#__PURE__*/React__default.createElement(DssBreadCrumb, {
    location: location
  }), /*#__PURE__*/React__default.createElement(reactRouterDom.Switch, null, /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/home/:moduleCode",
    component: function component() {
      return /*#__PURE__*/React__default.createElement(DashBoard$1, {
        stateCode: stateCode
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/dashboard/:moduleCode",
    component: function component() {
      return /*#__PURE__*/React__default.createElement(DashBoard, {
        stateCode: stateCode
      });
    }
  }), /*#__PURE__*/React__default.createElement(digitUiReactComponents.PrivateRoute, {
    path: path + "/drilldown",
    component: function component() {
      return /*#__PURE__*/React__default.createElement(DrillDown, {
        stateCode: stateCode
      });
    }
  })));
};
var DSSModule = function DSSModule(_ref3) {
  var stateCode = _ref3.stateCode,
    userType = _ref3.userType,
    tenants = _ref3.tenants;
  var moduleCode = "DSS";
  var _useRouteMatch = reactRouterDom.useRouteMatch(),
    path = _useRouteMatch.path;
  var language = Digit.StoreData.getCurrentLanguage();
  var _Digit$Services$useSt = Digit.Services.useStore({
      stateCode: stateCode,
      moduleCode: moduleCode,
      language: language
    }),
    isLoading = _Digit$Services$useSt.isLoading;
  if (isLoading) {
    return /*#__PURE__*/React__default.createElement(digitUiReactComponents.Loader, null);
  }
  Digit.SessionStorage.set("DSS_TENANTS", tenants);
  if (userType !== "citizen") {
    return /*#__PURE__*/React__default.createElement(Routes, {
      path: path,
      stateCode: stateCode
    });
  }
};
var componentsToRegister = {
  DSSModule: DSSModule,
  DSSCard: DSSCard,
  NDSSCard: NDSSCard
};
var initDSSComponents = function initDSSComponents() {
  Object.entries(componentsToRegister).forEach(function (_ref4) {
    var key = _ref4[0],
      value = _ref4[1];
    Digit.ComponentRegistryService.setComponent(key, value);
  });
};

exports.initDSSComponents = initDSSComponents;
//# sourceMappingURL=index.js.map
